{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2bf9a905",
   "metadata": {},
   "source": [
    "# 1. Import & Installation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "3a8c9ab0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random\n",
    "from datetime import datetime\n",
    "import datetime as dt\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "\n",
    "import scipy\n",
    "from itertools import cycle\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.impute import KNNImputer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.sparse as sparse\n",
    "from scipy.sparse import coo_matrix\n",
    "from scipy.sparse.linalg import spsolve\n",
    "import random\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import implicit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3d94615",
   "metadata": {},
   "source": [
    "# 2. Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0491af24",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f1e81d63",
   "metadata": {},
   "source": [
    "# 3. Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "bb377d3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "items_1=pd.read_csv('item_properties_part1.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "e2e95539",
   "metadata": {},
   "outputs": [],
   "source": [
    "items_2=pd.read_csv('item_properties_part2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "76645292",
   "metadata": {},
   "outputs": [],
   "source": [
    "events=pd.read_csv('events.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "8f521c1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "tree=pd.read_csv('category_tree.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "64f31b00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10999999 entries, 0 to 10999998\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Dtype \n",
      "---  ------     ----- \n",
      " 0   timestamp  int64 \n",
      " 1   itemid     int64 \n",
      " 2   property   object\n",
      " 3   value      object\n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 335.7+ MB\n"
     ]
    }
   ],
   "source": [
    "items_1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "0446d3e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>460429</td>\n",
       "      <td>categoryid</td>\n",
       "      <td>1338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1441508400000</td>\n",
       "      <td>206783</td>\n",
       "      <td>888</td>\n",
       "      <td>1116713 960601 n277.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1439089200000</td>\n",
       "      <td>395014</td>\n",
       "      <td>400</td>\n",
       "      <td>n552.000 639502 n720.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1431226800000</td>\n",
       "      <td>59481</td>\n",
       "      <td>790</td>\n",
       "      <td>n15360.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>156781</td>\n",
       "      <td>917</td>\n",
       "      <td>828513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1436065200000</td>\n",
       "      <td>285026</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1434250800000</td>\n",
       "      <td>89534</td>\n",
       "      <td>213</td>\n",
       "      <td>1121373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>264312</td>\n",
       "      <td>6</td>\n",
       "      <td>319724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1433646000000</td>\n",
       "      <td>229370</td>\n",
       "      <td>202</td>\n",
       "      <td>1330310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1434250800000</td>\n",
       "      <td>98113</td>\n",
       "      <td>451</td>\n",
       "      <td>1141052 n48.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp  itemid    property                            value\n",
       "0  1435460400000  460429  categoryid                             1338\n",
       "1  1441508400000  206783         888          1116713 960601 n277.200\n",
       "2  1439089200000  395014         400  n552.000 639502 n720.000 424566\n",
       "3  1431226800000   59481         790                       n15360.000\n",
       "4  1431831600000  156781         917                           828513\n",
       "5  1436065200000  285026   available                                0\n",
       "6  1434250800000   89534         213                          1121373\n",
       "7  1431831600000  264312           6                           319724\n",
       "8  1433646000000  229370         202                          1330310\n",
       "9  1434250800000   98113         451                  1141052 n48.000"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "f2d903a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9275903 entries, 0 to 9275902\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Dtype \n",
      "---  ------     ----- \n",
      " 0   timestamp  int64 \n",
      " 1   itemid     int64 \n",
      " 2   property   object\n",
      " 3   value      object\n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 283.1+ MB\n"
     ]
    }
   ],
   "source": [
    "items_2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "b0dc1a72",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433041200000</td>\n",
       "      <td>183478</td>\n",
       "      <td>561</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1439694000000</td>\n",
       "      <td>132256</td>\n",
       "      <td>976</td>\n",
       "      <td>n26.400 1135780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>420307</td>\n",
       "      <td>921</td>\n",
       "      <td>1149317 1257525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>403324</td>\n",
       "      <td>917</td>\n",
       "      <td>1204143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>230701</td>\n",
       "      <td>521</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1433041200000</td>\n",
       "      <td>286407</td>\n",
       "      <td>202</td>\n",
       "      <td>820407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1438484400000</td>\n",
       "      <td>256368</td>\n",
       "      <td>888</td>\n",
       "      <td>437265 1296497 n24.000 229949 651738 285933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1437879600000</td>\n",
       "      <td>307534</td>\n",
       "      <td>888</td>\n",
       "      <td>150169 212349 1095303 824508 1257235 153900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1439089200000</td>\n",
       "      <td>102767</td>\n",
       "      <td>888</td>\n",
       "      <td>5135 790941 1055803 221748 122132 n12.000 1135...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>215180</td>\n",
       "      <td>71</td>\n",
       "      <td>1096621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp  itemid property  \\\n",
       "0  1433041200000  183478      561   \n",
       "1  1439694000000  132256      976   \n",
       "2  1435460400000  420307      921   \n",
       "3  1431831600000  403324      917   \n",
       "4  1435460400000  230701      521   \n",
       "5  1433041200000  286407      202   \n",
       "6  1438484400000  256368      888   \n",
       "7  1437879600000  307534      888   \n",
       "8  1439089200000  102767      888   \n",
       "9  1431831600000  215180       71   \n",
       "\n",
       "                                               value  \n",
       "0                                             769062  \n",
       "1                                    n26.400 1135780  \n",
       "2                                    1149317 1257525  \n",
       "3                                            1204143  \n",
       "4                                             769062  \n",
       "5                                             820407  \n",
       "6        437265 1296497 n24.000 229949 651738 285933  \n",
       "7        150169 212349 1095303 824508 1257235 153900  \n",
       "8  5135 790941 1055803 221748 122132 n12.000 1135...  \n",
       "9                                            1096621  "
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71328e14",
   "metadata": {},
   "source": [
    "В обоих датасетах items содержатся свойства товаров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "202b2718",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2756101 entries, 0 to 2756100\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Dtype  \n",
      "---  ------         -----  \n",
      " 0   timestamp      int64  \n",
      " 1   visitorid      int64  \n",
      " 2   event          object \n",
      " 3   itemid         int64  \n",
      " 4   transactionid  float64\n",
      "dtypes: float64(1), int64(3), object(1)\n",
      "memory usage: 105.1+ MB\n"
     ]
    }
   ],
   "source": [
    "events.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "410fb727",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2756091</th>\n",
       "      <td>1438398087349</td>\n",
       "      <td>126458</td>\n",
       "      <td>view</td>\n",
       "      <td>439758</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756092</th>\n",
       "      <td>1438398473572</td>\n",
       "      <td>709520</td>\n",
       "      <td>view</td>\n",
       "      <td>104512</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756093</th>\n",
       "      <td>1438400498250</td>\n",
       "      <td>226214</td>\n",
       "      <td>view</td>\n",
       "      <td>190530</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756094</th>\n",
       "      <td>1438399289446</td>\n",
       "      <td>701750</td>\n",
       "      <td>view</td>\n",
       "      <td>296172</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756095</th>\n",
       "      <td>1438400574346</td>\n",
       "      <td>289041</td>\n",
       "      <td>view</td>\n",
       "      <td>156947</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756096</th>\n",
       "      <td>1438398785939</td>\n",
       "      <td>591435</td>\n",
       "      <td>view</td>\n",
       "      <td>261427</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756097</th>\n",
       "      <td>1438399813142</td>\n",
       "      <td>762376</td>\n",
       "      <td>view</td>\n",
       "      <td>115946</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756098</th>\n",
       "      <td>1438397820527</td>\n",
       "      <td>1251746</td>\n",
       "      <td>view</td>\n",
       "      <td>78144</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756099</th>\n",
       "      <td>1438398530703</td>\n",
       "      <td>1184451</td>\n",
       "      <td>view</td>\n",
       "      <td>283392</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756100</th>\n",
       "      <td>1438400163914</td>\n",
       "      <td>199536</td>\n",
       "      <td>view</td>\n",
       "      <td>152913</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp  visitorid event  itemid  transactionid\n",
       "2756091  1438398087349     126458  view  439758            NaN\n",
       "2756092  1438398473572     709520  view  104512            NaN\n",
       "2756093  1438400498250     226214  view  190530            NaN\n",
       "2756094  1438399289446     701750  view  296172            NaN\n",
       "2756095  1438400574346     289041  view  156947            NaN\n",
       "2756096  1438398785939     591435  view  261427            NaN\n",
       "2756097  1438399813142     762376  view  115946            NaN\n",
       "2756098  1438397820527    1251746  view   78144            NaN\n",
       "2756099  1438398530703    1184451  view  283392            NaN\n",
       "2756100  1438400163914     199536  view  152913            NaN"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.tail(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c24b32c",
   "metadata": {},
   "source": [
    "Данные в датасете описывают процесс покупки товаров пользователями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "d2ad4a70",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1669 entries, 0 to 1668\n",
      "Data columns (total 2 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   categoryid  1669 non-null   int64  \n",
      " 1   parentid    1644 non-null   float64\n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 26.2 KB\n"
     ]
    }
   ],
   "source": [
    "tree.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "40eecf38",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryid</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>732</th>\n",
       "      <td>410</td>\n",
       "      <td>894.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1668</th>\n",
       "      <td>761</td>\n",
       "      <td>395.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1603</th>\n",
       "      <td>1299</td>\n",
       "      <td>1532.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>912</th>\n",
       "      <td>1349</td>\n",
       "      <td>121.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1465</th>\n",
       "      <td>596</td>\n",
       "      <td>799.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>490</th>\n",
       "      <td>1086</td>\n",
       "      <td>250.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1299</th>\n",
       "      <td>1678</td>\n",
       "      <td>1698.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>1098</td>\n",
       "      <td>897.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1293</th>\n",
       "      <td>1466</td>\n",
       "      <td>905.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1474</th>\n",
       "      <td>45</td>\n",
       "      <td>903.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      categoryid  parentid\n",
       "732          410     894.0\n",
       "1668         761     395.0\n",
       "1603        1299    1532.0\n",
       "912         1349     121.0\n",
       "1465         596     799.0\n",
       "490         1086     250.0\n",
       "1299        1678    1698.0\n",
       "262         1098     897.0\n",
       "1293        1466     905.0\n",
       "1474          45     903.0"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09c3e5fb",
   "metadata": {},
   "source": [
    "В датасете содержатся данные о товаре:\n",
    "\n",
    "categoryid / уникальная категория товара,\n",
    "parentid / родительская категория товара."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77aa3535",
   "metadata": {},
   "source": [
    "# 4. Preprocessing and Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63ed7322",
   "metadata": {},
   "source": [
    "### Events"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "4b33a645",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "view           2664312\n",
       "addtocart        69332\n",
       "transaction      22457\n",
       "Name: event, dtype: int64"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.event.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "338265dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp        2750455\n",
       "visitorid        1407580\n",
       "event                  3\n",
       "itemid            235061\n",
       "transactionid      17672\n",
       "dtype: int64"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "c693bf5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicateRows = events[events.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "04b69fba",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "addtocart    366\n",
       "view          94\n",
       "Name: event, dtype: int64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duplicateRows.event.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "703a5e07",
   "metadata": {},
   "source": [
    "Как можно видеть, в данном датасете есть дубликаты. Они относятся не к транзакциям, а к просмотру товара или добавлению в корзину. По логике, добавить в корзину несколько штук товара сразу, возможно. Но вот просмотр одновременно одного и того же товара один и тем же клиентом в одно время, кажется сомнительным.\n",
    "Так как дубликтова немного, и они не относятся к transaction, удалим эти данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "023b1fe6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433221332117</td>\n",
       "      <td>257597</td>\n",
       "      <td>view</td>\n",
       "      <td>355908</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224214164</td>\n",
       "      <td>992329</td>\n",
       "      <td>view</td>\n",
       "      <td>248676</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221999827</td>\n",
       "      <td>111016</td>\n",
       "      <td>view</td>\n",
       "      <td>318965</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433221955914</td>\n",
       "      <td>483717</td>\n",
       "      <td>view</td>\n",
       "      <td>253185</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433221337106</td>\n",
       "      <td>951259</td>\n",
       "      <td>view</td>\n",
       "      <td>367447</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756096</th>\n",
       "      <td>1438398785939</td>\n",
       "      <td>591435</td>\n",
       "      <td>view</td>\n",
       "      <td>261427</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756097</th>\n",
       "      <td>1438399813142</td>\n",
       "      <td>762376</td>\n",
       "      <td>view</td>\n",
       "      <td>115946</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756098</th>\n",
       "      <td>1438397820527</td>\n",
       "      <td>1251746</td>\n",
       "      <td>view</td>\n",
       "      <td>78144</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756099</th>\n",
       "      <td>1438398530703</td>\n",
       "      <td>1184451</td>\n",
       "      <td>view</td>\n",
       "      <td>283392</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756100</th>\n",
       "      <td>1438400163914</td>\n",
       "      <td>199536</td>\n",
       "      <td>view</td>\n",
       "      <td>152913</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2755641 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp  visitorid event  itemid  transactionid\n",
       "0        1433221332117     257597  view  355908            NaN\n",
       "1        1433224214164     992329  view  248676            NaN\n",
       "2        1433221999827     111016  view  318965            NaN\n",
       "3        1433221955914     483717  view  253185            NaN\n",
       "4        1433221337106     951259  view  367447            NaN\n",
       "...                ...        ...   ...     ...            ...\n",
       "2756096  1438398785939     591435  view  261427            NaN\n",
       "2756097  1438399813142     762376  view  115946            NaN\n",
       "2756098  1438397820527    1251746  view   78144            NaN\n",
       "2756099  1438398530703    1184451  view  283392            NaN\n",
       "2756100  1438400163914     199536  view  152913            NaN\n",
       "\n",
       "[2755641 rows x 5 columns]"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "84dd6be8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp        2750455\n",
       "visitorid        1407580\n",
       "event                  3\n",
       "itemid            235061\n",
       "transactionid      17672\n",
       "dtype: int64"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "cdfeda97",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp              0\n",
       "visitorid              0\n",
       "event                  0\n",
       "itemid                 0\n",
       "transactionid    2733644\n",
       "dtype: int64"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ee8d3e",
   "metadata": {},
   "source": [
    "Как можно увидеть, в transactionid много пропусков. Скорее всего, это означает, что visitor не совершил покупку, проверим. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "05425cf3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event        transactionid\n",
       "transaction  7063.0           31\n",
       "             765.0            28\n",
       "             8351.0           27\n",
       "             2753.0           23\n",
       "             6993.0           21\n",
       "                              ..\n",
       "             17666.0           1\n",
       "             17667.0           1\n",
       "             17668.0           1\n",
       "             17670.0           1\n",
       "             17671.0           1\n",
       "Name: transactionid, Length: 17672, dtype: int64"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.groupby(['event']).transactionid.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6b9b686",
   "metadata": {},
   "source": [
    "Действительно, transactionid есть только у event-transaction, и у каждого event-transaction есть transactionid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "04a71150",
   "metadata": {},
   "outputs": [],
   "source": [
    "events = events.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "1fd56934",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Making date features from timestamp\n",
    "events['date'] = pd.to_datetime(events['timestamp'], unit='ms')\n",
    "events['format_date'] = pd.DatetimeIndex(events['date']).date\n",
    "events['month'] = pd.DatetimeIndex(events['date']).month\n",
    "events['day_week'] = pd.DatetimeIndex(events['date']).dayofweek\n",
    "events['hour'] = pd.DatetimeIndex(events['date']).hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "c85788d8",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433221332117</td>\n",
       "      <td>257597</td>\n",
       "      <td>view</td>\n",
       "      <td>355908</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:02:12.117</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224214164</td>\n",
       "      <td>992329</td>\n",
       "      <td>view</td>\n",
       "      <td>248676</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:50:14.164</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221999827</td>\n",
       "      <td>111016</td>\n",
       "      <td>view</td>\n",
       "      <td>318965</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:13:19.827</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433221955914</td>\n",
       "      <td>483717</td>\n",
       "      <td>view</td>\n",
       "      <td>253185</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:12:35.914</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433221337106</td>\n",
       "      <td>951259</td>\n",
       "      <td>view</td>\n",
       "      <td>367447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:02:17.106</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp  visitorid event  itemid  transactionid  \\\n",
       "0  1433221332117     257597  view  355908            0.0   \n",
       "1  1433224214164     992329  view  248676            0.0   \n",
       "2  1433221999827     111016  view  318965            0.0   \n",
       "3  1433221955914     483717  view  253185            0.0   \n",
       "4  1433221337106     951259  view  367447            0.0   \n",
       "\n",
       "                     date format_date  month  day_week  hour  \n",
       "0 2015-06-02 05:02:12.117  2015-06-02      6         1     5  \n",
       "1 2015-06-02 05:50:14.164  2015-06-02      6         1     5  \n",
       "2 2015-06-02 05:13:19.827  2015-06-02      6         1     5  \n",
       "3 2015-06-02 05:12:35.914  2015-06-02      6         1     5  \n",
       "4 2015-06-02 05:02:17.106  2015-06-02      6         1     5  "
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "b4b7d7ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "view           2664312\n",
       "addtocart        69332\n",
       "transaction      22457\n",
       "Name: event, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.event.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "6f9559ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.015954332968641214"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(events.loc[events.event=='transaction'])/events.visitorid.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "a1f0fd6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        559\n",
       "1        349\n",
       "2        286\n",
       "3        189\n",
       "4        188\n",
       "        ... \n",
       "11714      1\n",
       "11715      1\n",
       "11716      1\n",
       "11717      1\n",
       "11718      1\n",
       "Name: visitorid, Length: 11719, dtype: int64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='transaction']['visitorid'].value_counts().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f89c5d80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       559\n",
       "1       349\n",
       "2       286\n",
       "3       189\n",
       "4       188\n",
       "       ... \n",
       "2571      2\n",
       "2572      2\n",
       "2573      2\n",
       "2574      2\n",
       "2575      2\n",
       "Name: visitorid, Length: 2576, dtype: int64"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='transaction']['visitorid'].value_counts().loc[lambda x : x > 1].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "6d6a872f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.89283166853749"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(events.loc[events.event=='view'])/events.visitorid.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "1743595a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04925617016439563"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(events.loc[events.event=='addtocart'])/events.visitorid.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "da02e6fd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        719\n",
       "1        419\n",
       "2        371\n",
       "3        296\n",
       "4        231\n",
       "        ... \n",
       "37717      1\n",
       "37718      1\n",
       "37719      1\n",
       "37720      1\n",
       "37721      1\n",
       "Name: visitorid, Length: 37722, dtype: int64"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='addtocart']['visitorid'].value_counts().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "8701eede",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       719\n",
       "1       419\n",
       "2       371\n",
       "3       296\n",
       "4       231\n",
       "       ... \n",
       "9070      2\n",
       "9071      2\n",
       "9072      2\n",
       "9073      2\n",
       "9074      2\n",
       "Name: visitorid, Length: 9075, dtype: int64"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='addtocart']['visitorid'].value_counts().loc[lambda x : x > 1].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "843c8325",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.051156933732095074"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(events.loc[events.event=='transaction']['itemid'].unique())/events.itemid.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "3c9784ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11.334555711070744"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(events.loc[events.event=='view'])/events.itemid.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "18e2582f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         3410\n",
       "1         2539\n",
       "2         2325\n",
       "3         1854\n",
       "4         1740\n",
       "          ... \n",
       "234833       1\n",
       "234834       1\n",
       "234835       1\n",
       "234836       1\n",
       "234837       1\n",
       "Name: itemid, Length: 234838, dtype: int64"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='view']['itemid'].value_counts().reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "551d4e8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         3410\n",
       "1         2539\n",
       "2         2325\n",
       "3         1854\n",
       "4         1740\n",
       "          ... \n",
       "161040       2\n",
       "161041       2\n",
       "161042       2\n",
       "161043       2\n",
       "161044       2\n",
       "Name: itemid, Length: 161045, dtype: int64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.loc[events.event=='view']['itemid'].value_counts().loc[lambda x : x > 1].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "993a79e5",
   "metadata": {},
   "source": [
    "Анализируя данный датасет, можно сделать следующие выводы:\n",
    "1)Меньше 2 процентов пользователей делают покупку, и около 5 что-то кладут в корзину, при этом все пользователи в среднем просматривают около 2 товаров, что говорит о достаточно активном поведении.\n",
    "2)Из всех представленных в датасете товаров, только 5 процентов покупается. На каждый товар прходится примерно по 11 просмотров\n",
    "3)Стоит учитывать наличие клиентов, которые покупают большое количество товаров, так и наличие популярных товаров."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f84bfe4",
   "metadata": {},
   "source": [
    "### Items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "5e906677",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>460429</td>\n",
       "      <td>categoryid</td>\n",
       "      <td>1338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1441508400000</td>\n",
       "      <td>206783</td>\n",
       "      <td>888</td>\n",
       "      <td>1116713 960601 n277.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1439089200000</td>\n",
       "      <td>395014</td>\n",
       "      <td>400</td>\n",
       "      <td>n552.000 639502 n720.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1431226800000</td>\n",
       "      <td>59481</td>\n",
       "      <td>790</td>\n",
       "      <td>n15360.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>156781</td>\n",
       "      <td>917</td>\n",
       "      <td>828513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999994</th>\n",
       "      <td>1439694000000</td>\n",
       "      <td>86599</td>\n",
       "      <td>categoryid</td>\n",
       "      <td>618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999995</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>153032</td>\n",
       "      <td>1066</td>\n",
       "      <td>n1020.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999996</th>\n",
       "      <td>1440298800000</td>\n",
       "      <td>421788</td>\n",
       "      <td>888</td>\n",
       "      <td>35975 856003 37346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999997</th>\n",
       "      <td>1437879600000</td>\n",
       "      <td>159792</td>\n",
       "      <td>400</td>\n",
       "      <td>n552.000 639502 n720.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999998</th>\n",
       "      <td>1436065200000</td>\n",
       "      <td>464846</td>\n",
       "      <td>790</td>\n",
       "      <td>n410640.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10999999 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              timestamp  itemid    property                            value\n",
       "0         1435460400000  460429  categoryid                             1338\n",
       "1         1441508400000  206783         888          1116713 960601 n277.200\n",
       "2         1439089200000  395014         400  n552.000 639502 n720.000 424566\n",
       "3         1431226800000   59481         790                       n15360.000\n",
       "4         1431831600000  156781         917                           828513\n",
       "...                 ...     ...         ...                              ...\n",
       "10999994  1439694000000   86599  categoryid                              618\n",
       "10999995  1435460400000  153032        1066                 n1020.000 424566\n",
       "10999996  1440298800000  421788         888               35975 856003 37346\n",
       "10999997  1437879600000  159792         400  n552.000 639502 n720.000 424566\n",
       "10999998  1436065200000  464846         790                      n410640.000\n",
       "\n",
       "[10999999 rows x 4 columns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "766598ed",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp         18\n",
       "itemid        417053\n",
       "property        1097\n",
       "value        1231581\n",
       "dtype: int64"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "bb43d9cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1[items_1.duplicated()].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "d4b0bf61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433041200000</td>\n",
       "      <td>183478</td>\n",
       "      <td>561</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1439694000000</td>\n",
       "      <td>132256</td>\n",
       "      <td>976</td>\n",
       "      <td>n26.400 1135780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>420307</td>\n",
       "      <td>921</td>\n",
       "      <td>1149317 1257525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1431831600000</td>\n",
       "      <td>403324</td>\n",
       "      <td>917</td>\n",
       "      <td>1204143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1435460400000</td>\n",
       "      <td>230701</td>\n",
       "      <td>521</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275898</th>\n",
       "      <td>1433646000000</td>\n",
       "      <td>236931</td>\n",
       "      <td>929</td>\n",
       "      <td>n12.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275899</th>\n",
       "      <td>1440903600000</td>\n",
       "      <td>455746</td>\n",
       "      <td>6</td>\n",
       "      <td>150169 639134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275900</th>\n",
       "      <td>1439694000000</td>\n",
       "      <td>347565</td>\n",
       "      <td>686</td>\n",
       "      <td>610834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275901</th>\n",
       "      <td>1433646000000</td>\n",
       "      <td>287231</td>\n",
       "      <td>867</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275902</th>\n",
       "      <td>1442113200000</td>\n",
       "      <td>275768</td>\n",
       "      <td>888</td>\n",
       "      <td>888666 n10800.000 746840 1318567</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9275903 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp  itemid property                             value\n",
       "0        1433041200000  183478      561                            769062\n",
       "1        1439694000000  132256      976                   n26.400 1135780\n",
       "2        1435460400000  420307      921                   1149317 1257525\n",
       "3        1431831600000  403324      917                           1204143\n",
       "4        1435460400000  230701      521                            769062\n",
       "...                ...     ...      ...                               ...\n",
       "9275898  1433646000000  236931      929                           n12.000\n",
       "9275899  1440903600000  455746        6                     150169 639134\n",
       "9275900  1439694000000  347565      686                            610834\n",
       "9275901  1433646000000  287231      867                            769062\n",
       "9275902  1442113200000  275768      888  888666 n10800.000 746840 1318567\n",
       "\n",
       "[9275903 rows x 4 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "6aa20ecc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp         18\n",
       "itemid        417053\n",
       "property        1094\n",
       "value        1075730\n",
       "dtype: int64"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "095aa7b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2[items_2.duplicated()].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4ab0ef2",
   "metadata": {},
   "source": [
    "timestamp имеет в обоих датасетах очень малое количество уникальных значение. Так как на данный момент, нет оснований полагать, что момент записи значения свойства имеет большое значение, удалим данный столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "971f45b4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "items_1=items_1.drop(columns = ['timestamp'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "7e5a5d95",
   "metadata": {},
   "outputs": [],
   "source": [
    "items_2=items_2.drop(columns = ['timestamp'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "8a4b1d23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "itemid  property  value                                                                                                                                                                                                                                                                                                            \n",
       "441950  888       866645 40557 1256206 1337784 992862 951748 685028 1284577 892689 1284577 n33.600 1135780 1284577 n48.000 1187104 1319429 661116 1257525 1284577 n12000.000 1187104 1284577 618514 980588 927741 544576 1284577 670753 n96.000 1284577 1169991                                                                        17\n",
       "285749  888       325083 40557 10680 427700 768342 992862 951748 1011636 1284577 1299688 1284577 n34.800 1135780 1284577 n96.000 1187104 539109 661116 1257525 1284577 n12000.000 1187104 1284577 618514 980588 399087 593327 1284577 670753 n96.000 1284577 1169991                                                                   17\n",
       "287242  888       5135 1095464 992862 951748 1137726 n21.600 1135780 1284577 n187.200 1284577 n16392.000 628176 n9216.000 134030 1284577 n72.000 1187104 1284577 n12.000 1175087 n6000.000 1187104 1284577 1186729 681805 612841 1284577 1055803 1164666 625815 584849 1284577 1141052 n48.000 288796 1284577 814297 670753 n96.000    17\n",
       "118803  888       128748 547104 n687823920.000 992862 951748 103615 1284577 1096273 1284577 n40.800 1135780 1284577 n96.000 1187104 1319429 661116 1257525 1284577 n24000.000 1187104 1284577 1055803 1164666 625815 941273 1284577 670753 n96.000 1284577 1169991                                                                     17\n",
       "118771  888       435092 191135 120057 1055803 278045 1284577 267729 1284577 n15.600 1135780 1284577 n48.000 1187104 661116 1257525 1284577 n12000.000 1187104 1284577 1055803 1164666 1121447 1284577 842796 1284577 1298303                                                                                                          17\n",
       "                                                                                                                                                                                                                                                                                                                                       ..\n",
       "12357   790       n43560.000                                                                                                                                                                                                                                                                                                            1\n",
       "                  n42360.000                                                                                                                                                                                                                                                                                                            1\n",
       "347523  888       762199 327156 n24.000 1187104                                                                                                                                                                                                                                                                                         1\n",
       "27804   888       495153 1297579                                                                                                                                                                                                                                                                                                        1\n",
       "301892  888       302280 n696.000 584910 1154859                                                                                                                                                                                                                                                                                        1\n",
       "Length: 635350, dtype: int64"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1[items_1.duplicated()].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "d4db41c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "itemid  property    value                                                                                                                                                                                                                                                                                                                                     \n",
       "411225  888         128748 499427 n687907440.000 992862 647924 1284577 1031160 1284577 n28.800 1135780 1284577 n48.000 1187104 539109 661116 1257525 1284577 n6000.000 1187104 1284577 992862 625815 1119999 1284577 842796 1284577 1169991                                                                                                                       17\n",
       "256206  888         1206276 1055803 278045 718056 n27.600 1135780 1284577 n207.600 1284577 n19200.000 628176 n10800.000 134030 1284577 n72.000 1187104 1284577 n24.000 1175087 n9000.000 1187104 1284577 1186729 681805 612841 1284577 1055803 1164666 625815 62261 1284577 1141052 n48.000 288796 1284577 814297 670753 n84.000 685584 789585 n768.000 535229    17\n",
       "44493   364         266290                                                                                                                                                                                                                                                                                                                                        17\n",
       "77379   888         874902 862092 992862 951748 1090293 n26.400 1135780 1284577 n187.200 1284577 n16392.000 628176 n9216.000 134030 1284577 n48.000 1187104 1284577 n12.000 1175087 n6000.000 1187104 1284577 491900 1284577 1055803 1164666 625815 683119 1284577 1141052 n36.000 288796 1284577 250863                                                          17\n",
       "377640  888         866645 40557 1180929 1195099 992862 951748 1011636 1284577 13722 1284577 n19.200 1135780 1284577 n48.000 1187104 1319429 661116 1257525 1284577 n12000.000 1187104 1284577 618514 980588 927741 376092 1284577 670753 n96.000 1284577 1169991                                                                                                 17\n",
       "                                                                                                                                                                                                                                                                                                                                                                  ..\n",
       "26920   6           537209                                                                                                                                                                                                                                                                                                                                         1\n",
       "394044  790         n110520.000                                                                                                                                                                                                                                                                                                                                    1\n",
       "394040  categoryid  491                                                                                                                                                                                                                                                                                                                                            1\n",
       "241718  888         150169 1249617 561964 n2808.000 1154859 86628 n1344000.000 786769                                                                                                                                                                                                                                                                              1\n",
       "335229  790         n20760.000                                                                                                                                                                                                                                                                                                                                     1\n",
       "Length: 545501, dtype: int64"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2[items_2.duplicated()].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9a39d87",
   "metadata": {},
   "source": [
    "Как можно увидеть по количеству уникальных значений, в датасетах item большое количество повторов, относящиеся к разным данным. Так как полные дубликаты появилиь при удаление timestap, есть вероятность, что многие товары дублировались при загрузки в разное время. Возможно данную информацию можно использовать как признак, но на данном этапе, ввиду большего количества данных, удалим дубликаты."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "9b4b9cee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>460429</td>\n",
       "      <td>categoryid</td>\n",
       "      <td>1338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>206783</td>\n",
       "      <td>888</td>\n",
       "      <td>1116713 960601 n277.200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>395014</td>\n",
       "      <td>400</td>\n",
       "      <td>n552.000 639502 n720.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>59481</td>\n",
       "      <td>790</td>\n",
       "      <td>n15360.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>156781</td>\n",
       "      <td>917</td>\n",
       "      <td>828513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999990</th>\n",
       "      <td>385426</td>\n",
       "      <td>846</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999993</th>\n",
       "      <td>70776</td>\n",
       "      <td>283</td>\n",
       "      <td>160795 283258 981281 829153 787461 333798 2832...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999994</th>\n",
       "      <td>86599</td>\n",
       "      <td>categoryid</td>\n",
       "      <td>618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999995</th>\n",
       "      <td>153032</td>\n",
       "      <td>1066</td>\n",
       "      <td>n1020.000 424566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10999998</th>\n",
       "      <td>464846</td>\n",
       "      <td>790</td>\n",
       "      <td>n410640.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7042064 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          itemid    property  \\\n",
       "0         460429  categoryid   \n",
       "1         206783         888   \n",
       "2         395014         400   \n",
       "3          59481         790   \n",
       "4         156781         917   \n",
       "...          ...         ...   \n",
       "10999990  385426         846   \n",
       "10999993   70776         283   \n",
       "10999994   86599  categoryid   \n",
       "10999995  153032        1066   \n",
       "10999998  464846         790   \n",
       "\n",
       "                                                      value  \n",
       "0                                                      1338  \n",
       "1                                   1116713 960601 n277.200  \n",
       "2                           n552.000 639502 n720.000 424566  \n",
       "3                                                n15360.000  \n",
       "4                                                    828513  \n",
       "...                                                     ...  \n",
       "10999990                                             769062  \n",
       "10999993  160795 283258 981281 829153 787461 333798 2832...  \n",
       "10999994                                                618  \n",
       "10999995                                   n1020.000 424566  \n",
       "10999998                                        n410640.000  \n",
       "\n",
       "[7042064 rows x 3 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1=items_1.drop_duplicates()\n",
    "items_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "16477813",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>183478</td>\n",
       "      <td>561</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>132256</td>\n",
       "      <td>976</td>\n",
       "      <td>n26.400 1135780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>420307</td>\n",
       "      <td>921</td>\n",
       "      <td>1149317 1257525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>403324</td>\n",
       "      <td>917</td>\n",
       "      <td>1204143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230701</td>\n",
       "      <td>521</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275898</th>\n",
       "      <td>236931</td>\n",
       "      <td>929</td>\n",
       "      <td>n12.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275899</th>\n",
       "      <td>455746</td>\n",
       "      <td>6</td>\n",
       "      <td>150169 639134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275900</th>\n",
       "      <td>347565</td>\n",
       "      <td>686</td>\n",
       "      <td>610834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275901</th>\n",
       "      <td>287231</td>\n",
       "      <td>867</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9275902</th>\n",
       "      <td>275768</td>\n",
       "      <td>888</td>\n",
       "      <td>888666 n10800.000 746840 1318567</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5958844 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         itemid property                             value\n",
       "0        183478      561                            769062\n",
       "1        132256      976                   n26.400 1135780\n",
       "2        420307      921                   1149317 1257525\n",
       "3        403324      917                           1204143\n",
       "4        230701      521                            769062\n",
       "...         ...      ...                               ...\n",
       "9275898  236931      929                           n12.000\n",
       "9275899  455746        6                     150169 639134\n",
       "9275900  347565      686                            610834\n",
       "9275901  287231      867                            769062\n",
       "9275902  275768      888  888666 n10800.000 746840 1318567\n",
       "\n",
       "[5958844 rows x 3 columns]"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2=items_2.drop_duplicates()\n",
    "items_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "0e5e6448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "itemid       417053\n",
       "property       1097\n",
       "value       1231581\n",
       "dtype: int64"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_1.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "dc4fd25f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "itemid       417053\n",
       "property       1094\n",
       "value       1075730\n",
       "dtype: int64"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_2.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b48cc75d",
   "metadata": {},
   "source": [
    "Интересно, что несмотря на то, что количество наименований свойств практически одинаковое в обоих датасетах, количество значений свойств разнится. То есть, судя по всему каждому свойству может соответствовать несколько значений, в дальнейшем стоит обратить на это внимание"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49e8aae9",
   "metadata": {},
   "source": [
    "### Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "a040b321",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree[tree.duplicated()].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "bcb15ed0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "categoryid    1669\n",
       "parentid       362\n",
       "dtype: int64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "9a619d31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryid</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1016</td>\n",
       "      <td>213.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>809</td>\n",
       "      <td>169.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>570</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1691</td>\n",
       "      <td>885.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>536</td>\n",
       "      <td>1691.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1664</th>\n",
       "      <td>49</td>\n",
       "      <td>1125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1665</th>\n",
       "      <td>1112</td>\n",
       "      <td>630.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1666</th>\n",
       "      <td>1336</td>\n",
       "      <td>745.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1667</th>\n",
       "      <td>689</td>\n",
       "      <td>207.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1668</th>\n",
       "      <td>761</td>\n",
       "      <td>395.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1669 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      categoryid  parentid\n",
       "0           1016     213.0\n",
       "1            809     169.0\n",
       "2            570       9.0\n",
       "3           1691     885.0\n",
       "4            536    1691.0\n",
       "...          ...       ...\n",
       "1664          49    1125.0\n",
       "1665        1112     630.0\n",
       "1666        1336     745.0\n",
       "1667         689     207.0\n",
       "1668         761     395.0\n",
       "\n",
       "[1669 rows x 2 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92995bbc",
   "metadata": {},
   "source": [
    "Пропущенные значения имеются только в parentid, их вего 25. Мы могли бы удалить их, но более правильно заполнить их. Можно заполнить пропуски с использованием средних значений, что является довольно топорным. Поэтому обратитмся к алгоритму k ближайших соседей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "3fbb4c87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1669 entries, 0 to 1668\n",
      "Data columns (total 2 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   categoryid  1669 non-null   float64\n",
      " 1   parentid    1669 non-null   float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 26.2 KB\n"
     ]
    }
   ],
   "source": [
    "imputer = KNNImputer(n_neighbors=5)\n",
    "no_nan = imputer.fit_transform(tree[['categoryid', 'parentid']])\n",
    "tree = pd.DataFrame(no_nan, columns = ['categoryid','parentid'])\n",
    "tree['parentid'] = round(tree['parentid'])\n",
    "tree.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "d9fc3e2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "parentid\n",
       "250.0     31\n",
       "1009.0    22\n",
       "362.0     22\n",
       "351.0     19\n",
       "1259.0    18\n",
       "          ..\n",
       "801.0      1\n",
       "788.0      1\n",
       "1525.0     1\n",
       "785.0      1\n",
       "843.0      1\n",
       "Name: categoryid, Length: 382, dtype: int64"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.groupby(['parentid']).categoryid.count().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa0d3cb9",
   "metadata": {},
   "source": [
    "Видно, что большинство родительских категорий будет иметь только один товар, что не очень помогает категоризировать товар"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "0c28b68c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "categoryid    1669\n",
       "parentid       382\n",
       "dtype: int64"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caf10f4c",
   "metadata": {},
   "source": [
    "# 5.Visualisation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51548d61",
   "metadata": {},
   "source": [
    "### Events"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ceeeaec",
   "metadata": {},
   "source": [
    "Построим визуализацию по временным рядам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "cb5c382e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-128-e55a254f1fba>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  month_ev_all['count'] = 1\n",
      "<ipython-input-128-e55a254f1fba>:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  day_ev_all['count'] = 1\n",
      "<ipython-input-128-e55a254f1fba>:20: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  hour_ev_all['count'] = 1\n"
     ]
    }
   ],
   "source": [
    "#MONTH transactions\n",
    "cols = ['month', 'event']\n",
    "month_ev_all = events[cols]\n",
    "month_ev_all['count'] = 1\n",
    "\n",
    "month_ev_vis_all = month_ev_all.groupby(['month','event']).sum()\n",
    "month_ev_vis_all = month_ev_vis_all.reset_index()\n",
    "\n",
    "#DAY transactions\n",
    "cols = ['day_week', 'event']\n",
    "day_ev_all = events[cols]\n",
    "day_ev_all['count'] = 1\n",
    "\n",
    "day_ev_vis_all = day_ev_all.groupby(['day_week','event']).sum()\n",
    "day_ev_vis_all = day_ev_vis_all.reset_index()\n",
    "\n",
    "#HOUR transactions\n",
    "cols = ['hour', 'event']\n",
    "hour_ev_all = events[cols]\n",
    "hour_ev_all['count'] = 1\n",
    "\n",
    "hour_ev_vis_all = hour_ev_all.groupby(['hour','event']).sum()\n",
    "hour_ev_vis_all = hour_ev_vis_all.reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9ba11f5",
   "metadata": {},
   "source": [
    "Посмотрим 20 наиболее покупаемых товаров"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "9495ef85",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-129-4477e53a00db>:6: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_20_items = top_items.itemid.value_counts()[:20]\n",
      "<ipython-input-129-4477e53a00db>:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  month_ev_20['count'] = 1\n",
      "<ipython-input-129-4477e53a00db>:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  day_ev_20['count'] = 1\n",
      "<ipython-input-129-4477e53a00db>:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  hour_ev_20['count'] = 1\n"
     ]
    }
   ],
   "source": [
    "cols = ['itemid', 'event', 'format_date']\n",
    "top_items = events[cols]\n",
    "sale_items = top_items.loc[top_items.event=='transaction']['itemid'].unique().tolist()\n",
    "top_items = top_items.loc[top_items.itemid.isin(sale_items)]\n",
    "top_items = top_items.loc[top_items.event=='transaction']\n",
    "top_20_items = top_items.itemid.value_counts()[:20]\n",
    "\n",
    "top_events = events.loc[events.itemid.isin(top_20_items)]\n",
    "\n",
    "#MONTH transactions\n",
    "cols = ['month', 'event']\n",
    "month_ev_20 = top_events[cols]\n",
    "month_ev_20['count'] = 1\n",
    "\n",
    "month_ev_vis_20 = month_ev_20.groupby(['month','event']).sum()\n",
    "month_ev_vis_20 = month_ev_vis_20.reset_index()\n",
    "\n",
    "#DAY transactions\n",
    "cols = ['day_week', 'event']\n",
    "day_ev_20 = top_events[cols]\n",
    "day_ev_20['count'] = 1\n",
    "\n",
    "day_ev_vis_20 = day_ev_20.groupby(['day_week','event']).sum()\n",
    "day_ev_vis_20 = day_ev_vis_20.reset_index()\n",
    "\n",
    "#HOUR transactions\n",
    "cols = ['hour', 'event']\n",
    "hour_ev_20 = top_events[cols]\n",
    "hour_ev_20['count'] = 1\n",
    "\n",
    "hour_ev_vis_20 = hour_ev_20.groupby(['hour','event']).sum()\n",
    "hour_ev_vis_20 = hour_ev_vis_20.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "0acdaea2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-130-7da0f0260cfd>:2: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_20per_items = top_items.itemid.value_counts()[:2405]\n",
      "<ipython-input-130-7da0f0260cfd>:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  month_ev_20per['count'] = 1\n",
      "<ipython-input-130-7da0f0260cfd>:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  day_ev_20per['count'] = 1\n",
      "<ipython-input-130-7da0f0260cfd>:24: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  hour_ev_20per['count'] = 1\n"
     ]
    }
   ],
   "source": [
    "#Top-20% list\n",
    "top_20per_items = top_items.itemid.value_counts()[:2405]\n",
    "top_20per_events = events.loc[events.itemid.isin(top_20per_items)]\n",
    "\n",
    "#MONTH transactions\n",
    "cols = ['month', 'event']\n",
    "month_ev_20per = top_20per_events[cols]\n",
    "month_ev_20per['count'] = 1\n",
    "\n",
    "month_ev_vis_20per = month_ev_20per.groupby(['month','event']).sum()\n",
    "month_ev_vis_20per = month_ev_vis_20per.reset_index()\n",
    "\n",
    "#DAY transactions\n",
    "cols = ['day_week', 'event']\n",
    "day_ev_20per = top_20per_events[cols]\n",
    "day_ev_20per['count'] = 1\n",
    "\n",
    "day_ev_vis_20per = day_ev_20per.groupby(['day_week','event']).sum()\n",
    "day_ev_vis_20per = day_ev_vis_20per.reset_index()\n",
    "\n",
    "#HOUR transactions\n",
    "cols = ['hour', 'event']\n",
    "hour_ev_20per = top_20per_events[cols]\n",
    "hour_ev_20per['count'] = 1\n",
    "\n",
    "hour_ev_vis_20per = hour_ev_20per.groupby(['hour','event']).sum()\n",
    "hour_ev_vis_20per = hour_ev_vis_20per.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "890bbde4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-131-249654b05016>:59: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  f1.show()\n",
      "<ipython-input-131-249654b05016>:128: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  f2.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1872x1152 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1872x1152 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f1, axs = plt.subplots(3,3, figsize=(26, 16))\n",
    "\n",
    "#View ALL\n",
    "sns.barplot(ax=axs[0,0],\n",
    "            x = 'month',\n",
    "            y = 'count',\n",
    "            data=month_ev_vis_all.loc[month_ev_vis_all.event=='view'],\n",
    "            color =\"#16781E\").set(title=\"Distribution view / MONTH ALL\")\n",
    "\n",
    "sns.barplot(ax=axs[1,0],\n",
    "            x = 'day_week',\n",
    "            y = 'count',\n",
    "            data=day_ev_vis_all.loc[day_ev_vis_all.event=='view'],\n",
    "            color =\"#16781E\").set(title=\"Distribution view / DAY ALL\")\n",
    "\n",
    "sns.barplot(ax=axs[2,0],\n",
    "            x = 'hour',\n",
    "            y = 'count',\n",
    "            data=hour_ev_vis_all.loc[hour_ev_vis_all.event=='view'],\n",
    "            color =\"#16781E\").set(title=\"Distribution view / HOUR ALL\")\n",
    "\n",
    "#View Top-20\n",
    "sns.barplot(ax=axs[0,1],\n",
    "            x = 'month',\n",
    "            y = 'count',\n",
    "            data=month_ev_vis_20.loc[month_ev_vis_20.event=='view'],\n",
    "            color =\"#21B82E\").set(title=\"Distribution view / MONTH Top-20 ITEMS\")\n",
    "\n",
    "sns.barplot(ax=axs[1,1],\n",
    "            x = 'day_week',\n",
    "            y = 'count',\n",
    "            data=day_ev_vis_20.loc[day_ev_vis_20.event=='view'],\n",
    "            color =\"#21B82E\").set(title=\"Distribution view / DAY Top-20 ITEMS\")\n",
    "\n",
    "sns.barplot(ax=axs[2,1],\n",
    "            x = 'hour',\n",
    "            y = 'count',\n",
    "            data=hour_ev_vis_20.loc[hour_ev_vis_20.event=='view'],\n",
    "            color =\"#21B82E\").set(title=\"Distribution view / HOUR Top-20 ITEMS\")\n",
    "\n",
    "#View Top-20%\n",
    "sns.barplot(ax=axs[0,2],\n",
    "            x = 'month',\n",
    "            y = 'count',\n",
    "            data=month_ev_vis_20per.loc[month_ev_vis_20per.event=='view'],\n",
    "            color =\"#4DFF55\").set(title=\"Distribution view / MONTH Top-20%\")\n",
    "\n",
    "sns.barplot(ax=axs[1,2],\n",
    "            x = 'day_week',\n",
    "            y = 'count',\n",
    "            data=day_ev_vis_20per.loc[day_ev_vis_20per.event=='view'],\n",
    "            color =\"#4DFF55\").set(title=\"Distribution view / DAY Top-20%\")\n",
    "\n",
    "sns.barplot(ax=axs[2,2],\n",
    "            x = 'hour',\n",
    "            y = 'count',\n",
    "            data=hour_ev_vis_20per.loc[hour_ev_vis_20per.event=='view'],\n",
    "            color =\"#4DFF55\").set(title=\"Distribution view / HOUR Top-20%\")\n",
    "f1.show()\n",
    "\n",
    "f2, axs = plt.subplots(3,3, figsize=(26, 16))\n",
    "\n",
    "#Addtocart / transaction ALL\n",
    "sns.barplot(ax=axs[0,0],\n",
    "            x=\"month\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=month_ev_vis_all.loc[month_ev_vis_all.event!='view'],\n",
    "            palette='dark').set(title=\"Distribution addtocart / transaction / MONTH ALL\")\n",
    "\n",
    "sns.barplot(ax=axs[1,0],\n",
    "            x=\"day_week\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=day_ev_vis_all.loc[day_ev_vis_all.event!='view'],\n",
    "            palette=\"dark\").set(title=\"Distribution addtocart / transaction / DAY ALL\")\n",
    "\n",
    "sns.barplot(ax=axs[2,0],\n",
    "            x=\"hour\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=hour_ev_vis_all.loc[hour_ev_vis_all.event!='view'],\n",
    "            palette=\"dark\").set(title=\"Distribution addtocart / transaction / HOUR ALL\")\n",
    "\n",
    "#Addtocart / transaction Top_20\n",
    "sns.barplot(ax=axs[0,1],\n",
    "            x=\"month\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=month_ev_vis_20.loc[month_ev_vis_20.event!='view'],\n",
    "            palette=\"bright\").set(title=\"Distribution addtocart / transaction / MONTH Top-20 ITEMS\")\n",
    "\n",
    "sns.barplot(ax=axs[1,1],\n",
    "            x=\"day_week\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=day_ev_vis_20.loc[day_ev_vis_20.event!='view'],\n",
    "            palette=\"bright\").set(title=\"Distribution addtocart / transaction / DAY Top-20 ITEMS\")\n",
    "\n",
    "sns.barplot(ax=axs[2,1],\n",
    "            x=\"hour\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=hour_ev_vis_20.loc[hour_ev_vis_20.event!='view'],\n",
    "            palette=\"bright\").set(title=\"Distribution addtocart / transaction / HOUR Top-20 ITEMS\")\n",
    "\n",
    "#Addtocart / transaction Top_20%\n",
    "sns.barplot(ax=axs[0,2],\n",
    "            x=\"month\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=month_ev_vis_20per.loc[month_ev_vis_20per.event!='view'],\n",
    "            palette=\"muted\").set(title=\"Distribution addtocart / transaction / MONTH Top-20%\")\n",
    "\n",
    "sns.barplot(ax=axs[1,2],\n",
    "            x=\"day_week\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=day_ev_vis_20per.loc[day_ev_vis_20per.event!='view'],\n",
    "            palette=\"muted\").set(title=\"Distribution addtocart / transaction / DAY Top-20%\")\n",
    "\n",
    "sns.barplot(ax=axs[2,2],\n",
    "            x=\"hour\",\n",
    "            y=\"count\",\n",
    "            hue='event',\n",
    "            data=hour_ev_vis_20per.loc[hour_ev_vis_20per.event!='view'],\n",
    "            palette=\"muted\").set(title=\"Distribution addtocart / transaction / HOUR Top-20%\")\n",
    "f2.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a323a73",
   "metadata": {},
   "source": [
    "Как мы уже установили ранее, количество просмотров значительно превышает добавления в корзину и собственно транзацкции, что также видно на визуализации. Пик всех активностей приходится на июль. По дням, на будние дни, в частности на понедельник, вторник, среду. По часам, активность высока вечером и ночью, достигает пика в 20:00 и значительно спадает после 5 утра.\n",
    "Сильно выделяется топ-20 единичных уникальных товаров, по дням просмотра есть сиьный сдвиг на воскресенье и понедельник.Также стоит отметить, что в мае и сентябре они не продавались, хотя активно просматривались, продажи начались в июне и значительно возросли к августу. При этом их покупали только по понедельникам и вторникам, в 0:00 и в 05:00. А количество добавлений товаров в корзину сравнилось с количеством покупок. Скорее всего проводилась какая-то акция на данные товары, строго в определённое время, чтобы привлечь покупателей в период низкого трафика\n",
    "Просмотры топ-20% товаров (20% с максимальным числом продаж) больше похожи на просмотры товаров всего датасета, однако другие действия по месяцам распределяются также, как топ-20 артикулов (нет продаж в мае и сентября, хотя просмотры есть). Добавления в корзину и покупки более равномерно распределяются по дням недели (хотя по средам и четвергам их нет), при распределении по часам часто количество добавлений в корзину также совпадает с количеством покупок, что также наводит на мысль о действии скидок в определенные часы.\n",
    "\n",
    "Исходя из наблюдаемого, необходимо включить время активности пользователей относительно того или другого товара в число признаков."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a180ac15",
   "metadata": {},
   "source": [
    "# 6. Outliers handling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "879dc408",
   "metadata": {},
   "source": [
    "Поскольку общая задача проекта - предсказание артикулов, которые купит пользователь, для дальнейшей работы нам необходимо отобрать только тех пользователей, которые совершили покупки. Исходя из принципа деления на трейн и тест, по временному признаку, мы будем отбирать пользователей, которые совершили не менее 2 покупок. Также уберем возможные выбросы, чтобы избежать искажений при расчете модели."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "010741ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>172</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>264</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2019</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>3104</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>3258</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11683</th>\n",
       "      <td>1402220</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11695</th>\n",
       "      <td>1403769</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11701</th>\n",
       "      <td>1404265</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11705</th>\n",
       "      <td>1404991</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11711</th>\n",
       "      <td>1406087</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2576 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       visitorid  count\n",
       "0            172      2\n",
       "2            264      2\n",
       "12          2019      2\n",
       "22          3104      2\n",
       "26          3258      2\n",
       "...          ...    ...\n",
       "11683    1402220      3\n",
       "11695    1403769      7\n",
       "11701    1404265      2\n",
       "11705    1404991      3\n",
       "11711    1406087      4\n",
       "\n",
       "[2576 rows x 2 columns]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Selecting visitors with non less than 2 purchases\n",
    "df = events.copy()\n",
    "\n",
    "cols = ['visitorid', 'event']\n",
    "df = df[cols]\n",
    "df = df.loc[df.event=='transaction']\n",
    "df['count'] = 1\n",
    "df.drop(columns='event', axis=1, inplace=True)\n",
    "df = df.groupby('visitorid').sum().reset_index()\n",
    "df = df.loc[df['count']>1]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "33dc950c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-133-ba493aff07f7>:7: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature = 'count'\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(20, 3))\n",
    "axs[0].hist(df[feature], bins=30, histtype='bar', orientation='vertical', color='#DB388D')\n",
    "axs[0].set_title('Count BEFORE outliers handling', fontsize=15)\n",
    "axs[1].boxplot(df[feature], vert=False)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "59cfa82d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.576000e+03</td>\n",
       "      <td>2576.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.165735e+05</td>\n",
       "      <td>5.168478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.012194e+05</td>\n",
       "      <td>18.517595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.720000e+02</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.713838e+05</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.403535e+05</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.059046e+06</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.406087e+06</td>\n",
       "      <td>559.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          visitorid        count\n",
       "count  2.576000e+03  2576.000000\n",
       "mean   7.165735e+05     5.168478\n",
       "std    4.012194e+05    18.517595\n",
       "min    1.720000e+02     2.000000\n",
       "25%    3.713838e+05     2.000000\n",
       "50%    7.403535e+05     2.000000\n",
       "75%    1.059046e+06     3.000000\n",
       "max    1.406087e+06   559.000000"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Statistic description\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0dd8506a",
   "metadata": {},
   "source": [
    "Среднее количество покупок, приходящихся на одного посетителя, не превышает 5 единиц. Поэтому мы можем оставить для дальнейшей работы только тех пользователей, кто совершил от 2 до 10 покупок (чтобы оставить количество пользователей достаточно вариативным).\n",
    "\n",
    "Сразу можно сказать о том, что такое малое количество покупок на одного покупателя предсказывает нам сложности с коллаборативной фильтрацией по пользователям, потому что разброс будет велик. С другой стороны, возможно что в их покупках будут преобладать хиты продаж (топ-20), что может упростить процесс предсказания."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "9094c327",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-135-f72762f7274a>:9: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Capping outliers\n",
    "df = df.loc[(df['count']==2)|(df['count']<11)]\n",
    "feature = 'count'\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(20, 3))\n",
    "axs[0].hist(df[feature], bins=30, histtype='bar', orientation='vertical', color='#DB388D')\n",
    "axs[0].set_title('Count AFTER outliers handling', fontsize=15)\n",
    "axs[1].boxplot(df[feature], vert=False)\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "a20a5248",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.438000e+03</td>\n",
       "      <td>2438.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.196018e+05</td>\n",
       "      <td>2.798195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.015871e+05</td>\n",
       "      <td>1.467290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.720000e+02</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.748370e+05</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.422210e+05</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.062136e+06</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.406087e+06</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          visitorid        count\n",
       "count  2.438000e+03  2438.000000\n",
       "mean   7.196018e+05     2.798195\n",
       "std    4.015871e+05     1.467290\n",
       "min    1.720000e+02     2.000000\n",
       "25%    3.748370e+05     2.000000\n",
       "50%    7.422210e+05     2.000000\n",
       "75%    1.062136e+06     3.000000\n",
       "max    1.406087e+06    10.000000"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7df9ad1",
   "metadata": {},
   "source": [
    "Как мы видим, большинство суммарных покупок пользователей за период наблюдений по-прежнему находятся в диапазоне от 2 до 4, однако их распределение стало более равномерным. При этом количество уникальных пользователей сократилось на 138, т.е. на 5%, поэтому можно сказать, что выборка остается достаточно репрезентативной."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "d4ecdadd",
   "metadata": {},
   "outputs": [],
   "source": [
    "vis_df = df.visitorid.unique().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "26b85199",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>1433194177067</td>\n",
       "      <td>1185234</td>\n",
       "      <td>view</td>\n",
       "      <td>154912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:29:37.067</td>\n",
       "      <td>2015-06-01</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755610</th>\n",
       "      <td>1438358117670</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>194328</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755624</th>\n",
       "      <td>1438359207418</td>\n",
       "      <td>1015139</td>\n",
       "      <td>view</td>\n",
       "      <td>439726</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 16:13:27.418</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755626</th>\n",
       "      <td>1438360037777</td>\n",
       "      <td>572806</td>\n",
       "      <td>view</td>\n",
       "      <td>104781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>2015-07-31</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2755769</th>\n",
       "      <td>1438406444601</td>\n",
       "      <td>115257</td>\n",
       "      <td>view</td>\n",
       "      <td>443791</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>2015-08-01</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2756008</th>\n",
       "      <td>1438402186555</td>\n",
       "      <td>175890</td>\n",
       "      <td>view</td>\n",
       "      <td>396732</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>2015-08-01</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>69618 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp  visitorid      event  itemid  transactionid  \\\n",
       "27       1433222147345    1076270       view  262799            0.0   \n",
       "35       1433224644638     361387       view   43485            0.0   \n",
       "106      1433221123646    1076270       view  269430            0.0   \n",
       "196      1433193535886     820159       view  369447            0.0   \n",
       "211      1433194177067    1185234       view  154912            0.0   \n",
       "...                ...        ...        ...     ...            ...   \n",
       "2755610  1438358117670    1188952  addtocart  194328            0.0   \n",
       "2755624  1438359207418    1015139       view  439726            0.0   \n",
       "2755626  1438360037777     572806       view  104781            0.0   \n",
       "2755769  1438406444601     115257       view  443791            0.0   \n",
       "2756008  1438402186555     175890       view  396732            0.0   \n",
       "\n",
       "                           date format_date  month  day_week  hour  \n",
       "27      2015-06-02 05:15:47.345  2015-06-02      6         1     5  \n",
       "35      2015-06-02 05:57:24.638  2015-06-02      6         1     5  \n",
       "106     2015-06-02 04:58:43.646  2015-06-02      6         1     4  \n",
       "196     2015-06-01 21:18:55.886  2015-06-01      6         0    21  \n",
       "211     2015-06-01 21:29:37.067  2015-06-01      6         0    21  \n",
       "...                         ...         ...    ...       ...   ...  \n",
       "2755610 2015-07-31 15:55:17.670  2015-07-31      7         4    15  \n",
       "2755624 2015-07-31 16:13:27.418  2015-07-31      7         4    16  \n",
       "2755626 2015-07-31 16:27:17.777  2015-07-31      7         4    16  \n",
       "2755769 2015-08-01 05:20:44.601  2015-08-01      8         5     5  \n",
       "2756008 2015-08-01 04:09:46.555  2015-08-01      8         5     4  \n",
       "\n",
       "[69618 rows x 10 columns]"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events = events.loc[events.visitorid.isin(vis_df)]\n",
    "events"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b2c2442",
   "metadata": {},
   "source": [
    "# 7. Train & Test splitting\n",
    "Мы выяснили, что покупки значительно зависят от временных признаков, поэтому сделаем так, чтобы данные по одному пользователю присутствовали в обеих частях. При этом более ранняя покупка пользователя уходит в трейн,а более поздняя - в тест. Далее мы скорретируем пропорции частей, чтобы они составляли 70/30."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "1da12f3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1 = events.copy()\n",
    "df_1['format_date'] = pd.to_datetime(df_1['timestamp'], unit='ms')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "44df8f2a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>848114</th>\n",
       "      <td>172</td>\n",
       "      <td>transaction</td>\n",
       "      <td>465522</td>\n",
       "      <td>1439602141230</td>\n",
       "      <td>2015-08-15 01:29:01.230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>850895</th>\n",
       "      <td>172</td>\n",
       "      <td>transaction</td>\n",
       "      <td>10034</td>\n",
       "      <td>1439602141686</td>\n",
       "      <td>2015-08-15 01:29:01.686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1276395</th>\n",
       "      <td>264</td>\n",
       "      <td>transaction</td>\n",
       "      <td>459835</td>\n",
       "      <td>1441647285614</td>\n",
       "      <td>2015-09-07 17:34:45.614</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1283314</th>\n",
       "      <td>264</td>\n",
       "      <td>transaction</td>\n",
       "      <td>161949</td>\n",
       "      <td>1441647285708</td>\n",
       "      <td>2015-09-07 17:34:45.708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53617</th>\n",
       "      <td>2019</td>\n",
       "      <td>transaction</td>\n",
       "      <td>393144</td>\n",
       "      <td>1433368509996</td>\n",
       "      <td>2015-06-03 21:55:09.996</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         visitorid        event  itemid      timestamp                    date\n",
       "848114         172  transaction  465522  1439602141230 2015-08-15 01:29:01.230\n",
       "850895         172  transaction   10034  1439602141686 2015-08-15 01:29:01.686\n",
       "1276395        264  transaction  459835  1441647285614 2015-09-07 17:34:45.614\n",
       "1283314        264  transaction  161949  1441647285708 2015-09-07 17:34:45.708\n",
       "53617         2019  transaction  393144  1433368509996 2015-06-03 21:55:09.996"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['visitorid', 'event', 'itemid', 'timestamp']\n",
    "splitting = df_1[cols]\n",
    "\n",
    "splitting = splitting.loc[splitting.event=='transaction']\n",
    "splitting['date'] = pd.to_datetime(splitting['timestamp'], unit='ms')\n",
    "splitting = splitting.sort_values(by=['visitorid','date'])\n",
    "splitting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "d854022c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-141-c0117e093a50>:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  chunk_2['flag'] = chunk_2['new_index'].apply(lambda x: 'train' if x<1 else 'test')\n",
      "<ipython-input-141-c0117e093a50>:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  chunk_3['flag'] = chunk_3['new_index'].apply(lambda x: 'train' if x<2 else 'test')\n",
      "<ipython-input-141-c0117e093a50>:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  chunk_4['flag'] = chunk_4['new_index'].apply(lambda x: 'train' if x<3 else 'test')\n",
      "<ipython-input-141-c0117e093a50>:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  chunk_5['flag'] = chunk_5['new_index'].apply(lambda x: 'train' if x<4 else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
      "<ipython-input-141-c0117e093a50>:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>date</th>\n",
       "      <th>new_index</th>\n",
       "      <th>count</th>\n",
       "      <th>flag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>172</td>\n",
       "      <td>transaction</td>\n",
       "      <td>465522</td>\n",
       "      <td>1439602141230</td>\n",
       "      <td>2015-08-15 01:29:01.230</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>172</td>\n",
       "      <td>transaction</td>\n",
       "      <td>10034</td>\n",
       "      <td>1439602141686</td>\n",
       "      <td>2015-08-15 01:29:01.686</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>264</td>\n",
       "      <td>transaction</td>\n",
       "      <td>459835</td>\n",
       "      <td>1441647285614</td>\n",
       "      <td>2015-09-07 17:34:45.614</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>264</td>\n",
       "      <td>transaction</td>\n",
       "      <td>161949</td>\n",
       "      <td>1441647285708</td>\n",
       "      <td>2015-09-07 17:34:45.708</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019</td>\n",
       "      <td>transaction</td>\n",
       "      <td>393144</td>\n",
       "      <td>1433368509996</td>\n",
       "      <td>2015-06-03 21:55:09.996</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   visitorid        event  itemid      timestamp                    date  \\\n",
       "0        172  transaction  465522  1439602141230 2015-08-15 01:29:01.230   \n",
       "1        172  transaction   10034  1439602141686 2015-08-15 01:29:01.686   \n",
       "2        264  transaction  459835  1441647285614 2015-09-07 17:34:45.614   \n",
       "3        264  transaction  161949  1441647285708 2015-09-07 17:34:45.708   \n",
       "4       2019  transaction  393144  1433368509996 2015-06-03 21:55:09.996   \n",
       "\n",
       "   new_index  count   flag  \n",
       "0          0      2  train  \n",
       "1          1      2   test  \n",
       "2          0      2  train  \n",
       "3          1      2   test  \n",
       "4          0      2  train  "
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Making an index for the next splitting\n",
    "splitting['new_index'] = splitting.groupby('visitorid').cumcount().to_frame()\n",
    "splitting = splitting.merge(df, on='visitorid', how='left')\n",
    "splitting.head()\n",
    "\n",
    "#Cutting chunks according to purchases sum\n",
    "chunk_2 = splitting.loc[splitting['count']==2]\n",
    "chunk_3 = splitting.loc[splitting['count']==3]\n",
    "chunk_4 = splitting.loc[splitting['count']==4]\n",
    "chunk_5 = splitting.loc[splitting['count']==5]\n",
    "chunk_big = splitting.loc[splitting['count']>5]\n",
    "\n",
    "#Making Train & Test flags\n",
    "chunk_2['flag'] = chunk_2['new_index'].apply(lambda x: 'train' if x<1 else 'test')\n",
    "chunk_3['flag'] = chunk_3['new_index'].apply(lambda x: 'train' if x<2 else 'test')\n",
    "chunk_4['flag'] = chunk_4['new_index'].apply(lambda x: 'train' if x<3 else 'test')\n",
    "chunk_5['flag'] = chunk_5['new_index'].apply(lambda x: 'train' if x<4 else 'test')\n",
    "\n",
    "#Combine the full frame\n",
    "empty = pd.DataFrame()\n",
    "big_visitors_list = chunk_big.visitorid.unique().tolist()\n",
    "\n",
    "for vis in big_visitors_list:\n",
    "    data = chunk_big.loc[chunk_big.visitorid==vis]\n",
    "    margin = round(len(data)*0.7)-1\n",
    "    data['flag'] = data['new_index'].apply(lambda x: 'train' if x<= margin else 'test')\n",
    "    empty = pd.concat([empty, data])\n",
    "    \n",
    "splitting = pd.concat([chunk_2, chunk_3, chunk_3, chunk_4, chunk_5, empty])\n",
    "splitting.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "643288ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5062, 8)\n",
      "(3065, 8)\n"
     ]
    }
   ],
   "source": [
    "#Train & Test shape comparison\n",
    "train_labels = splitting.loc[splitting.flag=='train']\n",
    "test_labels = splitting.loc[splitting.flag=='test']\n",
    "\n",
    "print(train_labels.shape)\n",
    "print(test_labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "06eeea9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5689\n"
     ]
    }
   ],
   "source": [
    "#Ideal Train length:\n",
    "train_len = round(len(splitting)*0.7)\n",
    "print(train_len)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ad33705",
   "metadata": {},
   "source": [
    "Как мы видим, деление на Train & Test на текущий момент не сбалансировано (примерно 60/40). Деление на Train & Test было бы более пропорциональным, если бы длина Train достигала 5689 рядов. Выделим случайным способом недостающие ряды из Test и присоединим к Train."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "4afb3b25",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_len = train_len - len(train_labels)\n",
    "add_labels = test_labels.sample(add_len)\n",
    "\n",
    "#Final concatenation\n",
    "train_labels = pd.concat([train_labels, add_labels])\n",
    "train_labels['flag'] = 'train'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d127f4c2",
   "metadata": {},
   "source": [
    "Фактически мы сейчас разделили на Train & Test только те события, которые относятся к транзакциям, то есть к покупкам. Однако для построения рекомендательной системы нам нужно будет в Train исследовать и остальные события, поскольку по ним мы сможем восстановить поведение покупателя. Поэтому сейчас мы выделим дату каждой последней покупки для каждого пользователя в Train по которой в дальнейшем будем проводить окончательную разбивку целого датасета."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "25bd4bda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "      <th>label_date_train</th>\n",
       "      <th>dif</th>\n",
       "      <th>line</th>\n",
       "      <th>sign</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-06-02 05:36:30.388</td>\n",
       "      <td>-1 days +23:39:16.957000</td>\n",
       "      <td>-1 days +23:39:16.957000</td>\n",
       "      <td>-</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2015-06-02 06:19:17.782</td>\n",
       "      <td>-1 days +23:38:06.856000</td>\n",
       "      <td>-1 days +23:38:06.856000</td>\n",
       "      <td>-</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2015-06-02 05:36:30.388</td>\n",
       "      <td>-1 days +23:22:13.258000</td>\n",
       "      <td>-1 days +23:22:13.258000</td>\n",
       "      <td>-</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>2015-06-01 21:31:56.927</td>\n",
       "      <td>-1 days +23:46:58.959000</td>\n",
       "      <td>-1 days +23:46:58.959000</td>\n",
       "      <td>-</td>\n",
       "      <td>train</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433194177067</td>\n",
       "      <td>1185234</td>\n",
       "      <td>view</td>\n",
       "      <td>154912</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:29:37.067</td>\n",
       "      <td>2015-06-01 21:29:37.067</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>2015-05-15 23:02:18.926</td>\n",
       "      <td>16 days 22:27:18.141000</td>\n",
       "      <td>16 days 22:27:18.141000</td>\n",
       "      <td>1</td>\n",
       "      <td>drop</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp  visitorid event  itemid  transactionid  \\\n",
       "0  1433222147345    1076270  view  262799            0.0   \n",
       "1  1433224644638     361387  view   43485            0.0   \n",
       "2  1433221123646    1076270  view  269430            0.0   \n",
       "3  1433193535886     820159  view  369447            0.0   \n",
       "4  1433194177067    1185234  view  154912            0.0   \n",
       "\n",
       "                     date             format_date  month  day_week  hour  \\\n",
       "0 2015-06-02 05:15:47.345 2015-06-02 05:15:47.345      6         1     5   \n",
       "1 2015-06-02 05:57:24.638 2015-06-02 05:57:24.638      6         1     5   \n",
       "2 2015-06-02 04:58:43.646 2015-06-02 04:58:43.646      6         1     4   \n",
       "3 2015-06-01 21:18:55.886 2015-06-01 21:18:55.886      6         0    21   \n",
       "4 2015-06-01 21:29:37.067 2015-06-01 21:29:37.067      6         0    21   \n",
       "\n",
       "         label_date_train                      dif                      line  \\\n",
       "0 2015-06-02 05:36:30.388 -1 days +23:39:16.957000  -1 days +23:39:16.957000   \n",
       "1 2015-06-02 06:19:17.782 -1 days +23:38:06.856000  -1 days +23:38:06.856000   \n",
       "2 2015-06-02 05:36:30.388 -1 days +23:22:13.258000  -1 days +23:22:13.258000   \n",
       "3 2015-06-01 21:31:56.927 -1 days +23:46:58.959000  -1 days +23:46:58.959000   \n",
       "4 2015-05-15 23:02:18.926  16 days 22:27:18.141000   16 days 22:27:18.141000   \n",
       "\n",
       "  sign  label  \n",
       "0    -  train  \n",
       "1    -  train  \n",
       "2    -  train  \n",
       "3    -  train  \n",
       "4    1   drop  "
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Making time labels for every user\n",
    "user_time = train_labels.groupby('visitorid')\n",
    "\n",
    "#Time label\n",
    "label_date = user_time.max()['date'].to_frame().reset_index()\n",
    "label_date = label_date.rename(columns={'date':'label_date_train'}) \n",
    "\n",
    "df_1 = df_1.merge(label_date, on='visitorid', how='left')\n",
    "\n",
    "#Date difference\n",
    "df_1['dif'] = df_1['format_date']-df_1['label_date_train']\n",
    "\n",
    "#Вetermine the sign of the time delta\n",
    "df_1['line'] = df_1['dif'].astype('str')\n",
    "df_1['sign'] = df_1['line'].apply(lambda x: x[0])\n",
    "df_1['label'] = df_1['sign'].apply(lambda x: 'train' if (x=='-' or x=='0') else 'drop')\n",
    "\n",
    "df_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "d706298f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1433193703544</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>261793</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       timestamp  visitorid event  itemid  transactionid  \\\n",
       "0  1433222147345    1076270  view  262799            0.0   \n",
       "1  1433224644638     361387  view   43485            0.0   \n",
       "2  1433221123646    1076270  view  269430            0.0   \n",
       "3  1433193535886     820159  view  369447            0.0   \n",
       "5  1433193703544     820159  view  261793            0.0   \n",
       "\n",
       "                     date             format_date  \n",
       "0 2015-06-02 05:15:47.345 2015-06-02 05:15:47.345  \n",
       "1 2015-06-02 05:57:24.638 2015-06-02 05:57:24.638  \n",
       "2 2015-06-02 04:58:43.646 2015-06-02 04:58:43.646  \n",
       "3 2015-06-01 21:18:55.886 2015-06-01 21:18:55.886  \n",
       "5 2015-06-01 21:21:43.544 2015-06-01 21:21:43.544  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>172</td>\n",
       "      <td>transaction</td>\n",
       "      <td>10034</td>\n",
       "      <td>1439602141686</td>\n",
       "      <td>2015-08-15 01:29:01.686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>264</td>\n",
       "      <td>transaction</td>\n",
       "      <td>161949</td>\n",
       "      <td>1441647285708</td>\n",
       "      <td>2015-09-07 17:34:45.708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2019</td>\n",
       "      <td>transaction</td>\n",
       "      <td>445559</td>\n",
       "      <td>1433368510965</td>\n",
       "      <td>2015-06-03 21:55:10.965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3104</td>\n",
       "      <td>transaction</td>\n",
       "      <td>346661</td>\n",
       "      <td>1432273992770</td>\n",
       "      <td>2015-05-22 05:53:12.770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3258</td>\n",
       "      <td>transaction</td>\n",
       "      <td>19278</td>\n",
       "      <td>1434999874325</td>\n",
       "      <td>2015-06-22 19:04:34.325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   visitorid        event  itemid      timestamp                    date\n",
       "1        172  transaction   10034  1439602141686 2015-08-15 01:29:01.686\n",
       "3        264  transaction  161949  1441647285708 2015-09-07 17:34:45.708\n",
       "5       2019  transaction  445559  1433368510965 2015-06-03 21:55:10.965\n",
       "7       3104  transaction  346661  1432273992770 2015-05-22 05:53:12.770\n",
       "9       3258  transaction   19278  1434999874325 2015-06-22 19:04:34.325"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Test\n",
    "test = test_labels\n",
    "cols = test.columns[:5]\n",
    "test = test[cols]\n",
    "test = test.drop_duplicates()\n",
    "\n",
    "#Train\n",
    "train = df_1.loc[df_1.label=='train']\n",
    "col = train.columns[:7]\n",
    "train = train[col]\n",
    "\n",
    "display(train.head())\n",
    "display(test.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44c424b5",
   "metadata": {},
   "source": [
    "# 8. Feature engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "948f179c",
   "metadata": {},
   "source": [
    "### Features Visitors\n",
    "\n",
    "#### Time Features / Временные признаки\n",
    "\n",
    "1.1. month / месяц\n",
    "\n",
    "1.2. day_week / день недели\n",
    "\n",
    "1.3. hour / час дня\n",
    "\n",
    "#### Events Features / Признаки действий\n",
    "\n",
    "2.1. add_visitor / суммарное количество добавлений в корзину у пользователя\n",
    "\n",
    "2.2. trans_visitor / суммарное количество покупок у пользователя\n",
    "\n",
    "2.3. view_visitor / суммарное количество просмотров у пользователя\n",
    "\n",
    "2.4. all_events_vis / общее количество всех действий пользователя (сумма)\n",
    "\n",
    "2.5. buy_% / доля покупок по отношению к общему количеству всех действий (% от всех действий) пользователя\n",
    "\n",
    "2.6. view_trans_vis / среднее количество просмотров по отношению к покупке (сколько в среднем просмотров приходится на одну покупку) пользователя\n",
    "\n",
    "2.7. add_trans_vis / среднее количество добавлений в корзину по отношению к покупке (сколько в среднем добавлений приходится на одну покупку) пользователя\n",
    "\n",
    "2.8. view_purch_vis / количество просмотров при покупке данного айтема у пользователя (история покупок прослеживается по конкретному айтему)\n",
    "\n",
    "2.9. add_purch_vis / количество добавлений в корзину при покупке данного айтема у пользователя (история покупок прослеживается по конкретному айтему)\n",
    "\n",
    "#### Purchases Frequency Features / Признаки частотности покупок\n",
    "\n",
    "3.1. items_per_trans / сколько айтемов было куплено в одном чеке (комплексность)\n",
    "\n",
    "3.2. repeat_count / количество повторных покупок\n",
    "\n",
    "#### Bestsellers Features / Признаки бестселлеров\n",
    "\n",
    "4.1. top_20_purch / количество купленных пользователем товаров из списка ТОП-20 (20 наиболее часто продававшихся товаров)\n",
    "\n",
    "4.2. month_top_purch /количество купленных пользователем товаров из списка бестселлеров месяца (10 наиболее часто продававшихся товаров, общий список уникальных артикулов для каждого месяца из периода наблюдений в датасете)\n",
    "\n",
    "#### Activity Features / Признаки периодов наибольшей активности пользователя\n",
    "\n",
    "5.1. activity_duration_vis / длительность периода активности (исчисляется в днях, от первого до последнего дня активности в системе)\n",
    "\n",
    "5.2. month_vis / месяц совершения наибольшего числа покупок\n",
    "\n",
    "5.3. day_vis / день недели, в который пользователь совершает наибольшее количество покупок\n",
    "\n",
    "5.4. hour_vis / час дня, в который пользователь совершает наибольшее количество покупок\n",
    "\n",
    "5.5. activity_vis_days / количество дней, в которые покупатель совершил покупку (например, покупатель был активен 5 дней, но покупал только 2 дня из них, 2 дня относятся к этому признаку)\n",
    "\n",
    "5.6. usedays% / доля результативных дней, в которые совершались покупки, по отношению ко всему периоду активности (например, покупатель был активен 5 дней, но покупал только 2 дня из них, 2/5*100% - 40% были результативными для системы)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "7350f1ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "user_features = train.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "2715b5d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "user_features['month'] = pd.DatetimeIndex(user_features['format_date']).month\n",
    "user_features['day_week'] = pd.DatetimeIndex(user_features['format_date']).dayofweek\n",
    "user_features['hour'] = pd.DatetimeIndex(user_features['format_date']).hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "cd1f1f32",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-149-ad76937c0e01>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  user_events['count'] = 1\n"
     ]
    }
   ],
   "source": [
    "#Pivoting\n",
    "cols = ['visitorid', 'event']\n",
    "user_events = train[cols]\n",
    "user_events['count'] = 1\n",
    "\n",
    "user_events = pd.pivot_table(user_events,\n",
    "                            values='count', \n",
    "                            index=['visitorid'],\n",
    "                            columns=['event'], aggfunc=np.sum, fill_value=0)\n",
    "#Adding features\n",
    "user_events = user_events.reset_index()\n",
    "user_events['all_events_vis'] = user_events['addtocart']+user_events['transaction']+user_events['view']\n",
    "user_events['buy_%'] = round((user_events['transaction']/user_events['all_events_vis']*100))\n",
    "\n",
    "user_events = user_events.rename(columns={'addtocart': 'add_visitor',\n",
    "                                        'transaction': 'trans_visitor',\n",
    "                                        'view': 'view_visitor'})\n",
    "\n",
    "\n",
    "user_events['view_trans_vis'] = round((user_events['view_visitor']/user_events['trans_visitor']),2)\n",
    "user_events['add_trans_vis'] = round((user_events['add_visitor']/user_events['trans_visitor']),2)\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(user_events, on='visitorid', how='left')\n",
    "\n",
    "#Purchases statistic\n",
    "cols = ['visitorid', 'itemid', 'event']\n",
    "user_purchases = train[cols]\n",
    "purch_items = user_purchases.loc[user_purchases.event=='transaction']['itemid'].tolist()\n",
    "user_purchases = user_purchases.loc[user_purchases.itemid.isin(purch_items)]  \n",
    "user_purchases['count'] = 1\n",
    "\n",
    "#Pivoting\n",
    "user_purchases = pd.pivot_table(user_purchases,\n",
    "                            values='count', \n",
    "                            index=['visitorid'],\n",
    "                            columns=['event'], aggfunc=np.sum, fill_value=0)\n",
    "\n",
    "\n",
    "user_purchases['view_purch_vis'] = round((user_purchases['view']/user_purchases['transaction']),2)\n",
    "user_purchases['add_purch_vis'] = round((user_purchases['addtocart']/user_purchases['transaction']),2)\n",
    "\n",
    "cols = ['view_purch_vis', 'add_purch_vis']\n",
    "user_purchases = user_purchases[cols].reset_index()\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(user_purchases, on='visitorid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "75016556",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Items per Transaction\n",
    "cols = ['visitorid', 'transactionid']\n",
    "\n",
    "prod_features_df = train.loc[train.event=='transaction'][cols]\n",
    "prod_features_df['items_per_trans'] = 1\n",
    "\n",
    "#Pivoting\n",
    "prod_features_df = prod_features_df.groupby(by=['visitorid', 'transactionid']).sum()\n",
    "\n",
    "prod_features_df = prod_features_df.groupby(by=['visitorid']).mean()\n",
    "prod_features_df['items_per_trans'] = round(prod_features_df['items_per_trans'],2)\n",
    "prod_features_df = prod_features_df.reset_index()\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(prod_features_df, on='visitorid', how='left')\n",
    "\n",
    "#Repeat purchasing\n",
    "cols = ['visitorid', 'itemid']\n",
    "repeat_purch = user_features.loc[user_features.event=='transaction'][cols]\n",
    "repeat_purch['items_count'] = 1\n",
    "repeat_purch = repeat_purch.groupby(['visitorid', 'itemid']).sum()\n",
    "repeat_purch = repeat_purch.loc[repeat_purch['items_count']>1]\n",
    "repeat_purch['repeat_count'] = 1\n",
    "repeat_purch = repeat_purch.groupby(by='visitorid').sum().reset_index()\n",
    "repeat_purch = repeat_purch[['visitorid', 'repeat_count']]\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(repeat_purch, on='visitorid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "5436ac84",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-151-7af518b765f4>:3: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_20_items = train.loc[train.event=='transaction']['itemid'].value_counts()[:20].index.tolist()\n",
      "<ipython-input-151-7af518b765f4>:19: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_10_5 = user_features.loc[(user_features.event=='transaction')&(user_features.month==5)]['itemid'].value_counts()[:10].index.tolist()\n",
      "<ipython-input-151-7af518b765f4>:20: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_10_6 = user_features.loc[(user_features.event=='transaction')&(user_features.month==6)]['itemid'].value_counts()[:10].index.tolist()\n",
      "<ipython-input-151-7af518b765f4>:21: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_10_7 = user_features.loc[(user_features.event=='transaction')&(user_features.month==7)]['itemid'].value_counts()[:10].index.tolist()\n",
      "<ipython-input-151-7af518b765f4>:22: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_10_8 = user_features.loc[(user_features.event=='transaction')&(user_features.month==8)]['itemid'].value_counts()[:10].index.tolist()\n",
      "<ipython-input-151-7af518b765f4>:23: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_10_9 = user_features.loc[(user_features.event=='transaction')&(user_features.month==8)]['itemid'].value_counts()[:10].index.tolist()\n"
     ]
    }
   ],
   "source": [
    "#Top_20 (frequency)\n",
    "### Top_20 Products\n",
    "top_20_items = train.loc[train.event=='transaction']['itemid'].value_counts()[:20].index.tolist()\n",
    "\n",
    "cols = ['visitorid', 'itemid']\n",
    "bestsellers_purchase = user_features.loc[user_features.event=='transaction'][cols]\n",
    "bestsellers_purchase = bestsellers_purchase.loc[bestsellers_purchase.itemid.isin(top_20_items)]\n",
    "bestsellers_purchase['top_20_purch'] = 1\n",
    "bestsellers_purchase = bestsellers_purchase.groupby(by='visitorid').sum().reset_index()\n",
    "bestsellers_purchase = bestsellers_purchase[['visitorid', 'top_20_purch']]\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(bestsellers_purchase, on='visitorid', how='left')\n",
    "\n",
    "#Monthly_top (10 items frequency)\n",
    "#Selecting the most popular items for every month\n",
    "month_list = user_features.month.unique().tolist()\n",
    "\n",
    "top_10_5 = user_features.loc[(user_features.event=='transaction')&(user_features.month==5)]['itemid'].value_counts()[:10].index.tolist()\n",
    "top_10_6 = user_features.loc[(user_features.event=='transaction')&(user_features.month==6)]['itemid'].value_counts()[:10].index.tolist()\n",
    "top_10_7 = user_features.loc[(user_features.event=='transaction')&(user_features.month==7)]['itemid'].value_counts()[:10].index.tolist()\n",
    "top_10_8 = user_features.loc[(user_features.event=='transaction')&(user_features.month==8)]['itemid'].value_counts()[:10].index.tolist()\n",
    "top_10_9 = user_features.loc[(user_features.event=='transaction')&(user_features.month==8)]['itemid'].value_counts()[:10].index.tolist()\n",
    "\n",
    "full_month_top = list(set(top_10_5+top_10_6+top_10_7+top_10_8+top_10_9))\n",
    "\n",
    "cols = ['visitorid', 'itemid']\n",
    "month_top_purchase = user_features.loc[user_features.event=='transaction'][cols]\n",
    "month_top_purchase = month_top_purchase.loc[month_top_purchase.itemid.isin(full_month_top)]\n",
    "month_top_purchase['month_top_purch'] = 1\n",
    "month_top_purchase = month_top_purchase.groupby(by='visitorid').sum().reset_index()\n",
    "month_top_purchase = month_top_purchase[['visitorid', 'month_top_purch']]\n",
    "\n",
    "#Adding to frame\n",
    "user_features = user_features.merge(month_top_purchase, on='visitorid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "f6957286",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-152-03e9eddfae0e>:49: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  active_days['date'] = active_days['format_date'].dt.date\n",
      "<ipython-input-152-03e9eddfae0e>:50: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
      "  active_days = active_days.groupby(by=['visitorid', 'date']).sum()\n"
     ]
    }
   ],
   "source": [
    "#Activity duration\n",
    "cols = ['visitorid', 'format_date', 'month', 'day_week', 'hour']\n",
    "user_time = user_features[cols]\n",
    "\n",
    "user_time = user_time.groupby('visitorid')\n",
    "\n",
    "#Avtivity period\n",
    "first_date = user_time.min().format_date.to_frame().reset_index()\n",
    "first_date = first_date.rename(columns={'format_date':'first_date_vis'})\n",
    "last_date = user_time.max().format_date.to_frame().reset_index()\n",
    "last_date = last_date.rename(columns={'format_date':'last_date_vis'}) \n",
    "\n",
    "#Adding to data\n",
    "user_features = user_features.merge(first_date, how='left', on='visitorid')\n",
    "user_features = user_features.merge(last_date, how='left', on='visitorid')\n",
    "\n",
    "#Counting time delta\n",
    "user_features['activity_duration_vis'] = user_features['last_date_vis'] - user_features['first_date_vis']\n",
    "\n",
    "#Preferred months, days and hours\n",
    "#Purchases filtration (event == 'transaction')\n",
    "cols = ['visitorid', 'event', 'format_date', 'month', 'day_week', 'hour']\n",
    "user_time = user_features[cols]\n",
    "user_time = user_time.loc[user_time.event=='transaction']\n",
    "user_time = user_time.groupby('visitorid')\n",
    "\n",
    "month_pref = user_time.month.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "month_pref = month_pref.rename(columns={'month':'month_vis'})\n",
    "\n",
    "day_pref = user_time.day_week.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "day_pref = day_pref.rename(columns={'day_week':'day_vis'})\n",
    "\n",
    "hour_pref = user_time.hour.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "hour_pref = hour_pref.rename(columns={'hour':'hour_vis'})\n",
    "\n",
    "#Adding to data\n",
    "user_features = user_features.merge(month_pref, how='left', on='visitorid')\n",
    "user_features = user_features.merge(day_pref, how='left', on='visitorid')\n",
    "user_features = user_features.merge(hour_pref, how='left', on='visitorid')\n",
    "\n",
    "user_features['activity_vis_days'] = user_features['activity_duration_vis'].dt.days\n",
    "\n",
    "#We count as activity even only one day with the same date (where timedelta is 0)\n",
    "user_features['activity_vis_days'] = user_features['activity_vis_days']+1\n",
    "\n",
    "#Number of active days\n",
    "cols = ['visitorid', 'format_date']\n",
    "active_days = user_features[cols]\n",
    "active_days['date'] = active_days['format_date'].dt.date\n",
    "active_days = active_days.groupby(by=['visitorid', 'date']).sum()\n",
    "active_days['use_days'] = 1\n",
    "active_days = active_days.groupby(by='visitorid').sum().reset_index()\n",
    "\n",
    "#Adding to data\n",
    "user_features = user_features.merge(active_days, how='left', on='visitorid')\n",
    "\n",
    "#Activity days proportion\n",
    "user_features['use_days_%'] = round((user_features['use_days']/user_features['activity_vis_days']),2)\n",
    "\n",
    "user_features['correction'] = user_features['use_days_%'].apply(lambda x: x if x!=2 else 1)\n",
    "user_features.drop(columns=['use_days_%'], axis=1, inplace=True)\n",
    "user_features = user_features.rename(columns={'correction': 'use_days_%'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "dfd5ebc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "      <th>...</th>\n",
       "      <th>month_top_purch</th>\n",
       "      <th>first_date_vis</th>\n",
       "      <th>last_date_vis</th>\n",
       "      <th>activity_duration_vis</th>\n",
       "      <th>month_vis</th>\n",
       "      <th>day_vis</th>\n",
       "      <th>hour_vis</th>\n",
       "      <th>activity_vis_days</th>\n",
       "      <th>use_days</th>\n",
       "      <th>use_days_%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 05:36:30.388</td>\n",
       "      <td>0 days 00:37:46.742000</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-06-02 05:47:48.625</td>\n",
       "      <td>2015-06-03 00:51:57.627</td>\n",
       "      <td>0 days 19:04:09.002000</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 05:36:30.388</td>\n",
       "      <td>0 days 00:37:46.742000</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-06-01 15:06:11.829</td>\n",
       "      <td>2015-06-01 23:53:08.608</td>\n",
       "      <td>0 days 08:46:56.779000</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433193703544</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>261793</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-06-01 15:06:11.829</td>\n",
       "      <td>2015-06-01 23:53:08.608</td>\n",
       "      <td>0 days 08:46:56.779000</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57039</th>\n",
       "      <td>1438357544346</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>430566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-05-25 19:19:55.766</td>\n",
       "      <td>2015-08-26 22:12:46.035</td>\n",
       "      <td>93 days 02:52:50.269000</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>94</td>\n",
       "      <td>15</td>\n",
       "      <td>0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57040</th>\n",
       "      <td>1438358117670</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>194328</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-05-25 19:19:55.766</td>\n",
       "      <td>2015-08-26 22:12:46.035</td>\n",
       "      <td>93 days 02:52:50.269000</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "      <td>17</td>\n",
       "      <td>94</td>\n",
       "      <td>15</td>\n",
       "      <td>0.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57041</th>\n",
       "      <td>1438360037777</td>\n",
       "      <td>572806</td>\n",
       "      <td>view</td>\n",
       "      <td>104781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-07-14 21:47:35.506</td>\n",
       "      <td>2015-08-18 21:43:10.814</td>\n",
       "      <td>34 days 23:55:35.308000</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>18</td>\n",
       "      <td>35</td>\n",
       "      <td>5</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57042</th>\n",
       "      <td>1438406444601</td>\n",
       "      <td>115257</td>\n",
       "      <td>view</td>\n",
       "      <td>443791</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-07-24 13:53:20.746</td>\n",
       "      <td>2015-08-08 05:02:02.153</td>\n",
       "      <td>14 days 15:08:41.407000</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>15</td>\n",
       "      <td>8</td>\n",
       "      <td>0.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57043</th>\n",
       "      <td>1438402186555</td>\n",
       "      <td>175890</td>\n",
       "      <td>view</td>\n",
       "      <td>396732</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2015-05-04 05:17:07.830</td>\n",
       "      <td>2015-09-10 01:56:34.313</td>\n",
       "      <td>128 days 20:39:26.483000</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>129</td>\n",
       "      <td>7</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57044 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           timestamp  visitorid      event  itemid  transactionid  \\\n",
       "0      1433222147345    1076270       view  262799            0.0   \n",
       "1      1433224644638     361387       view   43485            0.0   \n",
       "2      1433221123646    1076270       view  269430            0.0   \n",
       "3      1433193535886     820159       view  369447            0.0   \n",
       "4      1433193703544     820159       view  261793            0.0   \n",
       "...              ...        ...        ...     ...            ...   \n",
       "57039  1438357544346    1188952  addtocart  430566            0.0   \n",
       "57040  1438358117670    1188952  addtocart  194328            0.0   \n",
       "57041  1438360037777     572806       view  104781            0.0   \n",
       "57042  1438406444601     115257       view  443791            0.0   \n",
       "57043  1438402186555     175890       view  396732            0.0   \n",
       "\n",
       "                         date             format_date  month  day_week  hour  \\\n",
       "0     2015-06-02 05:15:47.345 2015-06-02 05:15:47.345      6         1     5   \n",
       "1     2015-06-02 05:57:24.638 2015-06-02 05:57:24.638      6         1     5   \n",
       "2     2015-06-02 04:58:43.646 2015-06-02 04:58:43.646      6         1     4   \n",
       "3     2015-06-01 21:18:55.886 2015-06-01 21:18:55.886      6         0    21   \n",
       "4     2015-06-01 21:21:43.544 2015-06-01 21:21:43.544      6         0    21   \n",
       "...                       ...                     ...    ...       ...   ...   \n",
       "57039 2015-07-31 15:45:44.346 2015-07-31 15:45:44.346      7         4    15   \n",
       "57040 2015-07-31 15:55:17.670 2015-07-31 15:55:17.670      7         4    15   \n",
       "57041 2015-07-31 16:27:17.777 2015-07-31 16:27:17.777      7         4    16   \n",
       "57042 2015-08-01 05:20:44.601 2015-08-01 05:20:44.601      8         5     5   \n",
       "57043 2015-08-01 04:09:46.555 2015-08-01 04:09:46.555      8         5     4   \n",
       "\n",
       "       ...  month_top_purch          first_date_vis           last_date_vis  \\\n",
       "0      ...              NaN 2015-06-02 04:58:43.646 2015-06-02 05:36:30.388   \n",
       "1      ...              NaN 2015-06-02 05:47:48.625 2015-06-03 00:51:57.627   \n",
       "2      ...              NaN 2015-06-02 04:58:43.646 2015-06-02 05:36:30.388   \n",
       "3      ...              NaN 2015-06-01 15:06:11.829 2015-06-01 23:53:08.608   \n",
       "4      ...              NaN 2015-06-01 15:06:11.829 2015-06-01 23:53:08.608   \n",
       "...    ...              ...                     ...                     ...   \n",
       "57039  ...              NaN 2015-05-25 19:19:55.766 2015-08-26 22:12:46.035   \n",
       "57040  ...              NaN 2015-05-25 19:19:55.766 2015-08-26 22:12:46.035   \n",
       "57041  ...              NaN 2015-07-14 21:47:35.506 2015-08-18 21:43:10.814   \n",
       "57042  ...              NaN 2015-07-24 13:53:20.746 2015-08-08 05:02:02.153   \n",
       "57043  ...              NaN 2015-05-04 05:17:07.830 2015-09-10 01:56:34.313   \n",
       "\n",
       "         activity_duration_vis  month_vis  day_vis  hour_vis  \\\n",
       "0       0 days 00:37:46.742000          6        1         5   \n",
       "1       0 days 19:04:09.002000          6        1         6   \n",
       "2       0 days 00:37:46.742000          6        1         5   \n",
       "3       0 days 08:46:56.779000          6        0        17   \n",
       "4       0 days 08:46:56.779000          6        0        17   \n",
       "...                        ...        ...      ...       ...   \n",
       "57039  93 days 02:52:50.269000          8        2        17   \n",
       "57040  93 days 02:52:50.269000          8        2        17   \n",
       "57041  34 days 23:55:35.308000          7        1        18   \n",
       "57042  14 days 15:08:41.407000          8        4         7   \n",
       "57043 128 days 20:39:26.483000          9        3         1   \n",
       "\n",
       "       activity_vis_days  use_days  use_days_%  \n",
       "0                      1         1        1.00  \n",
       "1                      1         2        1.00  \n",
       "2                      1         1        1.00  \n",
       "3                      1         1        1.00  \n",
       "4                      1         1        1.00  \n",
       "...                  ...       ...         ...  \n",
       "57039                 94        15        0.16  \n",
       "57040                 94        15        0.16  \n",
       "57041                 35         5        0.14  \n",
       "57042                 15         8        0.53  \n",
       "57043                129         7        0.05  \n",
       "\n",
       "[57044 rows x 32 columns]"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "1d56c894",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Features\n",
    "feat_list = ['buy_%',\n",
    "             'view_trans_vis',\n",
    "             'add_trans_vis',\n",
    "             'view_purch_vis',\n",
    "             'add_purch_vis',\n",
    "             'items_per_trans',\n",
    "             'repeat_count',\n",
    "             'top_20_purch',\n",
    "             'month_top_purch',\n",
    "             'month_vis',\n",
    "             'day_vis',\n",
    "             'hour_vis',\n",
    "             'activity_vis_days',\n",
    "             'use_days',\n",
    "             'use_days_%']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "993383d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualization\n",
    "#Colors\n",
    "clr_list = ['#5E69F2', '#A355F9', '#5FC8DE']\n",
    "\n",
    "def feature_distribution(df, feat, clr):\n",
    "    fig, axs = plt.subplots(1, 2, figsize=(18, 3))\n",
    "    axs[0].hist(df[feat], bins=20, histtype='bar', orientation='vertical', color=clr)\n",
    "    axs[0].set_title(feat, fontsize=15)\n",
    "    axs[1].boxplot(df[feat], vert=False)\n",
    "    fig.show()\n",
    "    \n",
    "df_list = [user_features]\n",
    "for df,feat,clr in zip(cycle(df_list), feat_list, cycle(clr_list)):\n",
    "    feature_distribution(df, feat, clr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfe97ae5",
   "metadata": {},
   "source": [
    "Судя по большому количеству близких к единичным покупок (от 2), малому количеству повторяющихся покупок, сравнительно малому времени, которое пользователи уделяют просмотру товаров перед покупкой, а также большой доле дней, во время которых совершалась покупка и эта же покупка была единственной во всем периоде активности (use_days_% = 1), существенная доля всех пользователей приходила в систему для того, чтобы купить заранее намеченные хиты. Похожую картину мы видели выше, когда проводили полный обзор датасета до разделения на Train & Test. Иными словами, общий тренд - единичные покупки хитов."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11acd0df",
   "metadata": {},
   "source": [
    "### ITEM features\n",
    "\n",
    "#### 1. Time Features / Временные признаки\n",
    "1.1. month / месяц\n",
    "\n",
    "1.2. day_week / день недели\n",
    "\n",
    "1.3. hour / час дня\n",
    "\n",
    "#### 2. Events Features / Признаки действий\n",
    "2.1. add_item / суммарное количество добавлений артикула (товара) в корзину\n",
    "\n",
    "2.2. trans_item / суммарное количество покупок артикула\n",
    "\n",
    "2.3. view_item / суммарное количество просмотров артикула\n",
    "\n",
    "2.4. all_events_itm / общее количество всех действий по отношению к артикулу (сумма)\n",
    "\n",
    "2.5. sale_% / доля продаж по отношению к общему количеству всех действий с товаром\n",
    "\n",
    "#### 3. Sales Frequency Features / Признаки частотности продаж\n",
    "3.1. repeat_count / количество повторных покупок артикула\n",
    "\n",
    "#### 4. Bestsellers Features / Признаки бестселлеров\n",
    "4.1. top_20_sale / входит ли артикул в ТОП-20 (20 наиболее часто продававшихся товаров)\n",
    "\n",
    "4.2. top_month_sale /входит ли артикул в общий список бестселлеров месяца (10 наиболее часто продававшихся товаров, общий список уникальных артикулов для каждого месяца из периода наблюдений в датасете)\n",
    "\n",
    "#### 5. Activity Features / Признаки периодов наиболее активного взаимодействия пользователя с товарами\n",
    "5.1. activity_duration_itm / длительность периода активности (исчисляется в днях, от первого до последнего дня взаимодействия пользователя с товаром в системе)\n",
    "\n",
    "5.2. month_itm / месяц наиболее частых продаж артикула\n",
    "\n",
    "5.3. day_itm / день недели, в который артикул чаще всего продавался\n",
    "\n",
    "5.4. hour_itm / час дня, в который артикул чаще всего продавался\n",
    "\n",
    "5.5. sale_days / количество дней, в которые совершалась продажа артикула\n",
    "\n",
    "5.6. sale_day_s% / доля результативных дней, в которые совершались продажи артикула, по отношению ко всему периоду активности (например, покупатели просматривали артикул в течение 5 дней, но покупали только 2 дня из них, 2/5*100% - 40% были результативными для системы)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "2c132da5",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_features = train.copy()\n",
    "item_features['month'] = pd.DatetimeIndex(item_features['format_date']).month\n",
    "item_features['day_week'] = pd.DatetimeIndex(item_features['format_date']).dayofweek\n",
    "item_features['hour'] = pd.DatetimeIndex(item_features['format_date']).hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "3e52f872",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-156-fe4e742ae582>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  item_events['count'] = 1\n"
     ]
    }
   ],
   "source": [
    "#Pivoting\n",
    "cols = ['itemid', 'event']\n",
    "item_events = train[cols]\n",
    "item_events['count'] = 1\n",
    "\n",
    "item_events = pd.pivot_table(item_events,\n",
    "                            values='count', \n",
    "                            index=['itemid'],\n",
    "                            columns=['event'], aggfunc=np.sum, fill_value=0)\n",
    "#Adding features\n",
    "item_events = item_events.reset_index()\n",
    "item_events['all_events_itm'] = item_events['addtocart']+item_events['transaction']+item_events['view']\n",
    "item_events['sale_%'] = round((item_events['transaction']/item_events['all_events_itm']*100))\n",
    "\n",
    "item_events = item_events.rename(columns={'addtocart': 'add_item',\n",
    "                                        'transaction': 'trans_item',\n",
    "                                        'view': 'view_item'})\n",
    "\n",
    "#Adding to frame\n",
    "item_features = item_features.merge(item_events, on='itemid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "79dc5771",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Repeat sale\n",
    "cols = ['visitorid', 'itemid']\n",
    "repeat_sale = item_features.loc[user_features.event=='transaction'][cols]\n",
    "repeat_sale['items_count'] = 1\n",
    "repeat_sale = repeat_sale.groupby(['itemid', 'visitorid']).sum()\n",
    "repeat_sale = repeat_sale.loc[repeat_sale['items_count']>1]\n",
    "repeat_sale['repeat_count'] = 1\n",
    "repeat_sale = repeat_sale.groupby(by='itemid').sum().reset_index()\n",
    "repeat_sale = repeat_sale[['itemid', 'repeat_count']]\n",
    "\n",
    "#Adding to frame\n",
    "item_features = item_features.merge(repeat_sale, on='itemid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "6003c2e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-158-7e6e2a48d773>:3: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  top_20_items = train.loc[train.event=='transaction']['itemid'].value_counts()[:20].index.tolist()\n"
     ]
    }
   ],
   "source": [
    "#Top_20 (frequency)\n",
    "### Top_20 Products\n",
    "top_20_items = train.loc[train.event=='transaction']['itemid'].value_counts()[:20].index.tolist()\n",
    "### Make a flag for top-20 products\n",
    "cols = ['visitorid', 'itemid']\n",
    "bestsellers_20 = item_features[cols].drop_duplicates().reset_index(drop=True)\n",
    "bestsellers_20 = bestsellers_20.loc[bestsellers_20.itemid.isin(top_20_items)]\n",
    "bestsellers_20['top_20_sale'] = 1\n",
    "\n",
    "bestsellers_20.drop('visitorid', axis=1,inplace=True)\n",
    "bestsellers_20 = bestsellers_20.drop_duplicates()\n",
    "\n",
    "#Adding to the frame\n",
    "item_features = item_features.merge(bestsellers_20, on='itemid', how='left')\n",
    "\n",
    "#Monthly_top (10 items frequency)\n",
    "cols = ['visitorid', 'itemid']\n",
    "month_bestsellers = item_features[cols].drop_duplicates().reset_index(drop=True)\n",
    "month_bestsellers = month_bestsellers.loc[month_bestsellers.itemid.isin(full_month_top)]\n",
    "month_bestsellers['top_month_sale'] = 1\n",
    "\n",
    "month_bestsellers.drop('visitorid', axis=1,inplace=True)\n",
    "month_bestsellers = month_bestsellers.drop_duplicates()\n",
    "\n",
    "#Adding to the frame\n",
    "item_features = item_features.merge(month_bestsellers, on='itemid', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "97c3a12a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-159-ad7cb939d12e>:49: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  active_days['date'] = active_days['format_date'].dt.date\n",
      "<ipython-input-159-ad7cb939d12e>:50: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
      "  active_days = active_days.groupby(by=['itemid', 'date']).sum()\n"
     ]
    }
   ],
   "source": [
    "#Activity duration\n",
    "cols = ['itemid', 'format_date', 'month', 'day_week', 'hour']\n",
    "item_time = item_features[cols]\n",
    "\n",
    "item_time = item_time.groupby('itemid')\n",
    "\n",
    "#Avtivity period\n",
    "first_date = item_time.min().format_date.to_frame().reset_index()\n",
    "first_date = first_date.rename(columns={'format_date':'first_date_itm'})\n",
    "last_date = item_time.max().format_date.to_frame().reset_index()\n",
    "last_date = last_date.rename(columns={'format_date':'last_date_itm'}) \n",
    "\n",
    "#Adding to data\n",
    "item_features = item_features.merge(first_date, how='left', on='itemid')\n",
    "item_features = item_features.merge(last_date, how='left', on='itemid')\n",
    "\n",
    "#Counting time delta\n",
    "item_features['activity_duration_itm'] = item_features['last_date_itm'] - item_features['first_date_itm']\n",
    "\n",
    "###Preferred months, days and hours\n",
    "#Sales filtration (event == 'transaction')\n",
    "cols = ['itemid', 'event', 'format_date', 'month', 'day_week', 'hour']\n",
    "item_time = item_features[cols]\n",
    "item_time = item_time.loc[item_time.event=='transaction']\n",
    "item_time = item_time.groupby('itemid')\n",
    "\n",
    "month_pref = item_time.month.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "month_pref = month_pref.rename(columns={'month':'month_itm'})\n",
    "\n",
    "day_pref = item_time.day_week.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "day_pref = day_pref.rename(columns={'day_week':'day_itm'})\n",
    "\n",
    "hour_pref = item_time.hour.agg(lambda x: pd.Series.mode(x)[0]).reset_index()\n",
    "hour_pref = hour_pref.rename(columns={'hour':'hour_itm'})\n",
    "\n",
    "#Adding to data\n",
    "item_features = item_features.merge(month_pref, how='left', on='itemid')\n",
    "item_features = item_features.merge(day_pref, how='left', on='itemid')\n",
    "item_features = item_features.merge(hour_pref, how='left', on='itemid')\n",
    "\n",
    "item_features['activity_itm_days'] = item_features['activity_duration_itm'].dt.days\n",
    "\n",
    "#We count as activity even only one day with the same date (where timedelta is 0)\n",
    "item_features['activity_itm_days'] = item_features['activity_itm_days']+1\n",
    "\n",
    "#Number of active sale days\n",
    "cols = ['itemid', 'format_date']\n",
    "active_days = item_features[cols]\n",
    "active_days['date'] = active_days['format_date'].dt.date\n",
    "active_days = active_days.groupby(by=['itemid', 'date']).sum()\n",
    "active_days['sale_days'] = 1\n",
    "active_days = active_days.groupby(by='itemid').sum().reset_index()\n",
    "\n",
    "#Adding to data\n",
    "item_features = item_features.merge(active_days, how='left', on='itemid')\n",
    "\n",
    "#Activity days proportion\n",
    "item_features['sale_days_%'] = round((item_features['sale_days']/item_features['activity_itm_days']),2)\n",
    "\n",
    "item_features['correction'] = item_features['sale_days_%'].apply(lambda x: x if x!=2 else 1)\n",
    "item_features.drop(columns=['sale_days_%'], axis=1, inplace=True)\n",
    "item_features = item_features.rename(columns={'correction': 'sale_days_%'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "637acc59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "      <th>...</th>\n",
       "      <th>activity_duration_itm</th>\n",
       "      <th>month_itm</th>\n",
       "      <th>day_itm</th>\n",
       "      <th>hour_itm</th>\n",
       "      <th>activity_itm_days</th>\n",
       "      <th>sale_days</th>\n",
       "      <th>sale_days_%</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>14 days 16:47:52.539000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>0.13</td>\n",
       "      <td>{897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...</td>\n",
       "      <td>{1285872, n78000.000, 557711, n81120.000, 1116...</td>\n",
       "      <td>{1028.0, 145.0, 1181.0, 1313.0, 33.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>21 days 07:05:17.274000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>0.14</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:22:05.453000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...</td>\n",
       "      <td>{1285872, n74400.000, 1164943 1093697 986387, ...</td>\n",
       "      <td>{1028.0, 145.0, 1181.0, 33.0, 1313.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>60 days 16:15:08.907000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>61</td>\n",
       "      <td>14</td>\n",
       "      <td>0.23</td>\n",
       "      <td>{771, 776, 1036, 400, 529, 785, 917, 790, 663,...</td>\n",
       "      <td>{1285872, 992862 1138995, 992862, 950107, 9928...</td>\n",
       "      <td>{0.0, 1028.0, 1157.0, 8.0, 520.0, 395.0, 1420....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433193703544</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>261793</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 268, 917, 790, 538, 283, 542, 159, 92...</td>\n",
       "      <td>{1285872, 519769, 589233, n2772.000, 679677, n...</td>\n",
       "      <td>{1028.0, 138.0, 1420.0, 20.0, 1057.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57039</th>\n",
       "      <td>1438357544346</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>430566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:15.426000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 917, 790, 283, 28, 542, 159, 928, 678...</td>\n",
       "      <td>{1285872, n5040.000, n6480.000, 1289474, 51976...</td>\n",
       "      <td>{1028.0, 20.0, 33.0, 933.0, 1579.0, 1604.0, 71...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57040</th>\n",
       "      <td>1438358117670</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>194328</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>1 days 00:31:02.705000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 785, 917, 790, 283, 159, 544, 35, 678...</td>\n",
       "      <td>{1285872, n364080.000, 992862, n6000.000 11871...</td>\n",
       "      <td>{1028.0, 8.0, 781.0, 1168.0, 145.0, 20.0, 663....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57041</th>\n",
       "      <td>1438360037777</td>\n",
       "      <td>572806</td>\n",
       "      <td>view</td>\n",
       "      <td>104781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>22 days 00:12:23.987000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0.17</td>\n",
       "      <td>{6, 776, 917, 790, 283, 159, 33, 678, 689, 186...</td>\n",
       "      <td>{1285872, n14280.000, 1300730, 1116693, 519769...</td>\n",
       "      <td>{1028.0, 33.0, 933.0, 1579.0, 1326.0, 711.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57042</th>\n",
       "      <td>1438406444601</td>\n",
       "      <td>115257</td>\n",
       "      <td>view</td>\n",
       "      <td>443791</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 521, 19, 917, 790, 283, 28, 159, 928,...</td>\n",
       "      <td>{887751 993028 162354, n13200.000, 1285872, 96...</td>\n",
       "      <td>{1028.0, 654.0, 20.0, 540.0, 33.0, 933.0, 1579...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57043</th>\n",
       "      <td>1438402186555</td>\n",
       "      <td>175890</td>\n",
       "      <td>view</td>\n",
       "      <td>396732</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>124 days 11:45:47.510000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>125</td>\n",
       "      <td>6</td>\n",
       "      <td>0.05</td>\n",
       "      <td>{227, 6, 839, 776, 678, 202, 713, 1036, 364, 1...</td>\n",
       "      <td>{1285872, n102240.000, 519769, 418242, n8016.0...</td>\n",
       "      <td>{33.0, 866.0, 1251.0, 1028.0, 933.0, 711.0, 25...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57044 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           timestamp  visitorid      event  itemid  transactionid  \\\n",
       "0      1433222147345    1076270       view  262799            0.0   \n",
       "1      1433224644638     361387       view   43485            0.0   \n",
       "2      1433221123646    1076270       view  269430            0.0   \n",
       "3      1433193535886     820159       view  369447            0.0   \n",
       "4      1433193703544     820159       view  261793            0.0   \n",
       "...              ...        ...        ...     ...            ...   \n",
       "57039  1438357544346    1188952  addtocart  430566            0.0   \n",
       "57040  1438358117670    1188952  addtocart  194328            0.0   \n",
       "57041  1438360037777     572806       view  104781            0.0   \n",
       "57042  1438406444601     115257       view  443791            0.0   \n",
       "57043  1438402186555     175890       view  396732            0.0   \n",
       "\n",
       "                         date             format_date  month  day_week  hour  \\\n",
       "0     2015-06-02 05:15:47.345 2015-06-02 05:15:47.345      6         1     5   \n",
       "1     2015-06-02 05:57:24.638 2015-06-02 05:57:24.638      6         1     5   \n",
       "2     2015-06-02 04:58:43.646 2015-06-02 04:58:43.646      6         1     4   \n",
       "3     2015-06-01 21:18:55.886 2015-06-01 21:18:55.886      6         0    21   \n",
       "4     2015-06-01 21:21:43.544 2015-06-01 21:21:43.544      6         0    21   \n",
       "...                       ...                     ...    ...       ...   ...   \n",
       "57039 2015-07-31 15:45:44.346 2015-07-31 15:45:44.346      7         4    15   \n",
       "57040 2015-07-31 15:55:17.670 2015-07-31 15:55:17.670      7         4    15   \n",
       "57041 2015-07-31 16:27:17.777 2015-07-31 16:27:17.777      7         4    16   \n",
       "57042 2015-08-01 05:20:44.601 2015-08-01 05:20:44.601      8         5     5   \n",
       "57043 2015-08-01 04:09:46.555 2015-08-01 04:09:46.555      8         5     4   \n",
       "\n",
       "       ...    activity_duration_itm  month_itm  day_itm  hour_itm  \\\n",
       "0      ...  14 days 16:47:52.539000        6.0      1.0       5.0   \n",
       "1      ...  21 days 07:05:17.274000        6.0      1.0       6.0   \n",
       "2      ...   0 days 00:22:05.453000        NaN      NaN       NaN   \n",
       "3      ...  60 days 16:15:08.907000        5.0      0.0      20.0   \n",
       "4      ...          0 days 00:00:00        NaN      NaN       NaN   \n",
       "...    ...                      ...        ...      ...       ...   \n",
       "57039  ...   0 days 00:00:15.426000        NaN      NaN       NaN   \n",
       "57040  ...   1 days 00:31:02.705000        NaN      NaN       NaN   \n",
       "57041  ...  22 days 00:12:23.987000        7.0      3.0      16.0   \n",
       "57042  ...          0 days 00:00:00        NaN      NaN       NaN   \n",
       "57043  ... 124 days 11:45:47.510000        9.0      3.0       1.0   \n",
       "\n",
       "       activity_itm_days  sale_days  sale_days_%  \\\n",
       "0                     15          2         0.13   \n",
       "1                     22          3         0.14   \n",
       "2                      1          1         1.00   \n",
       "3                     61         14         0.23   \n",
       "4                      1          1         1.00   \n",
       "...                  ...        ...          ...   \n",
       "57039                  1          1         1.00   \n",
       "57040                  2          2         1.00   \n",
       "57041                 23          4         0.17   \n",
       "57042                  1          1         1.00   \n",
       "57043                125          6         0.05   \n",
       "\n",
       "                                                property  \\\n",
       "0      {897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...   \n",
       "1                                                     {}   \n",
       "2      {897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...   \n",
       "3      {771, 776, 1036, 400, 529, 785, 917, 790, 663,...   \n",
       "4      {6, 776, 268, 917, 790, 538, 283, 542, 159, 92...   \n",
       "...                                                  ...   \n",
       "57039  {6, 776, 917, 790, 283, 28, 542, 159, 928, 678...   \n",
       "57040  {6, 776, 785, 917, 790, 283, 159, 544, 35, 678...   \n",
       "57041  {6, 776, 917, 790, 283, 159, 33, 678, 689, 186...   \n",
       "57042  {6, 776, 521, 19, 917, 790, 283, 28, 159, 928,...   \n",
       "57043  {227, 6, 839, 776, 678, 202, 713, 1036, 364, 1...   \n",
       "\n",
       "                                                   value  \\\n",
       "0      {1285872, n78000.000, 557711, n81120.000, 1116...   \n",
       "1                                                     {}   \n",
       "2      {1285872, n74400.000, 1164943 1093697 986387, ...   \n",
       "3      {1285872, 992862 1138995, 992862, 950107, 9928...   \n",
       "4      {1285872, 519769, 589233, n2772.000, 679677, n...   \n",
       "...                                                  ...   \n",
       "57039  {1285872, n5040.000, n6480.000, 1289474, 51976...   \n",
       "57040  {1285872, n364080.000, 992862, n6000.000 11871...   \n",
       "57041  {1285872, n14280.000, 1300730, 1116693, 519769...   \n",
       "57042  {887751 993028 162354, n13200.000, 1285872, 96...   \n",
       "57043  {1285872, n102240.000, 519769, 418242, n8016.0...   \n",
       "\n",
       "                                                parentid  \n",
       "0      {1028.0, 145.0, 1181.0, 1313.0, 33.0, 933.0, 1...  \n",
       "1                                                     {}  \n",
       "2      {1028.0, 145.0, 1181.0, 33.0, 1313.0, 933.0, 1...  \n",
       "3      {0.0, 1028.0, 1157.0, 8.0, 520.0, 395.0, 1420....  \n",
       "4      {1028.0, 138.0, 1420.0, 20.0, 1057.0, 933.0, 1...  \n",
       "...                                                  ...  \n",
       "57039  {1028.0, 20.0, 33.0, 933.0, 1579.0, 1604.0, 71...  \n",
       "57040  {1028.0, 8.0, 781.0, 1168.0, 145.0, 20.0, 663....  \n",
       "57041  {1028.0, 33.0, 933.0, 1579.0, 1326.0, 711.0, 1...  \n",
       "57042  {1028.0, 654.0, 20.0, 540.0, 33.0, 933.0, 1579...  \n",
       "57043  {33.0, 866.0, 1251.0, 1028.0, 933.0, 711.0, 25...  \n",
       "\n",
       "[57044 rows x 30 columns]"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "75c33d86",
   "metadata": {},
   "outputs": [],
   "source": [
    "item_feat_list = ['add_item',\n",
    "                  'trans_item',\n",
    "                  'view_item',\n",
    "                  'all_events_itm',\n",
    "                  'sale_%',\n",
    "                  'repeat_count',\n",
    "                  'month_itm',\n",
    "                  'day_itm',\n",
    "                  'hour_itm',\n",
    "                  'activity_itm_days',\n",
    "                  'sale_days',\n",
    "                  'sale_days_%']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "efb5a2e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>add_item</th>\n",
       "      <th>trans_item</th>\n",
       "      <th>view_item</th>\n",
       "      <th>all_events_itm</th>\n",
       "      <th>sale_%</th>\n",
       "      <th>repeat_count</th>\n",
       "      <th>month_itm</th>\n",
       "      <th>day_itm</th>\n",
       "      <th>hour_itm</th>\n",
       "      <th>activity_itm_days</th>\n",
       "      <th>sale_days</th>\n",
       "      <th>sale_days_%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>0.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>34</td>\n",
       "      <td>44</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>61</td>\n",
       "      <td>14</td>\n",
       "      <td>0.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57039</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57040</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57041</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57042</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57043</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>125</td>\n",
       "      <td>6</td>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57044 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       add_item  trans_item  view_item  all_events_itm  sale_%  repeat_count  \\\n",
       "0             1           1          5               7    14.0           0.0   \n",
       "1             0           2         11              13    15.0           1.0   \n",
       "2             1           0          4               5     0.0           0.0   \n",
       "3             5           5         34              44    11.0           0.0   \n",
       "4             0           0          1               1     0.0           0.0   \n",
       "...         ...         ...        ...             ...     ...           ...   \n",
       "57039         2           0          0               2     0.0           0.0   \n",
       "57040         2           0          2               4     0.0           0.0   \n",
       "57041         3           1          7              11     9.0           0.0   \n",
       "57042         0           0          1               1     0.0           0.0   \n",
       "57043         0           1          8               9    11.0           0.0   \n",
       "\n",
       "       month_itm  day_itm  hour_itm  activity_itm_days  sale_days  sale_days_%  \n",
       "0            6.0      1.0       5.0                 15          2         0.13  \n",
       "1            6.0      1.0       6.0                 22          3         0.14  \n",
       "2            0.0      0.0       0.0                  1          1         1.00  \n",
       "3            5.0      0.0      20.0                 61         14         0.23  \n",
       "4            0.0      0.0       0.0                  1          1         1.00  \n",
       "...          ...      ...       ...                ...        ...          ...  \n",
       "57039        0.0      0.0       0.0                  1          1         1.00  \n",
       "57040        0.0      0.0       0.0                  2          2         1.00  \n",
       "57041        7.0      3.0      16.0                 23          4         0.17  \n",
       "57042        0.0      0.0       0.0                  1          1         1.00  \n",
       "57043        9.0      3.0       1.0                125          6         0.05  \n",
       "\n",
       "[57044 rows x 12 columns]"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_features[item_feat_list].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "902ff1df",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n",
      "<ipython-input-154-c36fe41e9204>:10: UserWarning: Matplotlib is currently using module://ipykernel.pylab.backend_inline, which is a non-GUI backend, so cannot show the figure.\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "clr_list = ['#5E69F2', '#A355F9', '#5FC8DE']\n",
    "    \n",
    "df_list = [item_features]\n",
    "for df,feat,clr in zip(cycle(df_list), item_feat_list, cycle(clr_list)):\n",
    "    feature_distribution(df, feat, clr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "729d72c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>321158</th>\n",
       "      <td>15</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267222</th>\n",
       "      <td>15</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212405</th>\n",
       "      <td>17</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452877</th>\n",
       "      <td>19</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316453</th>\n",
       "      <td>25</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314317</th>\n",
       "      <td>466736</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>211331</th>\n",
       "      <td>466747</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283041</th>\n",
       "      <td>466759</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2489</th>\n",
       "      <td>466796</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>543809</th>\n",
       "      <td>466796</td>\n",
       "      <td>available</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12646 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        itemid   property value\n",
       "321158      15  available     0\n",
       "267222      15  available     0\n",
       "212405      17  available     0\n",
       "452877      19  available     0\n",
       "316453      25  available     0\n",
       "...        ...        ...   ...\n",
       "314317  466736  available     0\n",
       "211331  466747  available     0\n",
       "283041  466759  available     0\n",
       "2489    466796  available     0\n",
       "543809  466796  available     0\n",
       "\n",
       "[12646 rows x 3 columns]"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Preprocessing\n",
    "#Items list\n",
    "items_list = item_features.itemid.unique().tolist()\n",
    "\n",
    "#Selecting properties\n",
    "items_1 = items_1.loc[items_1.itemid.isin(items_list)]\n",
    "items_2 = items_2.loc[items_2.itemid.isin(items_list)]\n",
    "\n",
    "#Concatenating all selected\n",
    "items_full = pd.concat([items_1, items_2]).reset_index(drop=True).sort_values(by='itemid')\n",
    "\n",
    "#Let's check the null values\n",
    "items_full.loc[items_full.value=='0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "2f87c444",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Skip 'available' value\n",
    "items_full = items_full.loc[items_full.value!='0']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "ad63b7df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32887</th>\n",
       "      <td>15</td>\n",
       "      <td>839</td>\n",
       "      <td>245772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>328281</th>\n",
       "      <td>15</td>\n",
       "      <td>available</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>444451</th>\n",
       "      <td>15</td>\n",
       "      <td>202</td>\n",
       "      <td>789221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149153</th>\n",
       "      <td>15</td>\n",
       "      <td>364</td>\n",
       "      <td>1047026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>404339</th>\n",
       "      <td>15</td>\n",
       "      <td>915</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66972</th>\n",
       "      <td>466843</td>\n",
       "      <td>588</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>253475</th>\n",
       "      <td>466843</td>\n",
       "      <td>283</td>\n",
       "      <td>119273 820477 437265 621217 1130905 n96.000 27...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>295116</th>\n",
       "      <td>466843</td>\n",
       "      <td>159</td>\n",
       "      <td>519769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>231064</th>\n",
       "      <td>466843</td>\n",
       "      <td>956</td>\n",
       "      <td>892975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136578</th>\n",
       "      <td>466843</td>\n",
       "      <td>501</td>\n",
       "      <td>769062</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>562689 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        itemid   property                                              value\n",
       "32887       15        839                                             245772\n",
       "328281      15  available                                                  1\n",
       "444451      15        202                                             789221\n",
       "149153      15        364                                            1047026\n",
       "404339      15        915                                             769062\n",
       "...        ...        ...                                                ...\n",
       "66972   466843        588                                             769062\n",
       "253475  466843        283  119273 820477 437265 621217 1130905 n96.000 27...\n",
       "295116  466843        159                                             519769\n",
       "231064  466843        956                                             892975\n",
       "136578  466843        501                                             769062\n",
       "\n",
       "[562689 rows x 3 columns]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "items_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "b0d63584",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>categoryid</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1660</th>\n",
       "      <td>112.0</td>\n",
       "      <td>381.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      categoryid  parentid\n",
       "1660       112.0     381.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(tree[tree.categoryid==112])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "58e1fb43",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-167-cc0e98774a6b>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  items_full['property'] = pd.to_numeric(items_full['property'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>527636</th>\n",
       "      <td>466843</td>\n",
       "      <td>852</td>\n",
       "      <td>1116693</td>\n",
       "      <td>1606.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527637</th>\n",
       "      <td>466843</td>\n",
       "      <td>771</td>\n",
       "      <td>1178208 n15.600 190776</td>\n",
       "      <td>1251.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527638</th>\n",
       "      <td>466843</td>\n",
       "      <td>962</td>\n",
       "      <td>769062</td>\n",
       "      <td>945.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527639</th>\n",
       "      <td>466843</td>\n",
       "      <td>1036</td>\n",
       "      <td>726612</td>\n",
       "      <td>1420.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527640</th>\n",
       "      <td>466843</td>\n",
       "      <td>202</td>\n",
       "      <td>437265 621217 1130905 n96.000 27725 3252 558443</td>\n",
       "      <td>1008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527641</th>\n",
       "      <td>466843</td>\n",
       "      <td>588</td>\n",
       "      <td>769062</td>\n",
       "      <td>1396.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527642</th>\n",
       "      <td>466843</td>\n",
       "      <td>283</td>\n",
       "      <td>119273 820477 437265 621217 1130905 n96.000 27...</td>\n",
       "      <td>1579.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527643</th>\n",
       "      <td>466843</td>\n",
       "      <td>159</td>\n",
       "      <td>519769</td>\n",
       "      <td>1028.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527644</th>\n",
       "      <td>466843</td>\n",
       "      <td>956</td>\n",
       "      <td>892975</td>\n",
       "      <td>879.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>527645</th>\n",
       "      <td>466843</td>\n",
       "      <td>501</td>\n",
       "      <td>769062</td>\n",
       "      <td>1009.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        itemid  property                                              value  \\\n",
       "527636  466843       852                                            1116693   \n",
       "527637  466843       771                             1178208 n15.600 190776   \n",
       "527638  466843       962                                             769062   \n",
       "527639  466843      1036                                             726612   \n",
       "527640  466843       202    437265 621217 1130905 n96.000 27725 3252 558443   \n",
       "527641  466843       588                                             769062   \n",
       "527642  466843       283  119273 820477 437265 621217 1130905 n96.000 27...   \n",
       "527643  466843       159                                             519769   \n",
       "527644  466843       956                                             892975   \n",
       "527645  466843       501                                             769062   \n",
       "\n",
       "        parentid  \n",
       "527636    1606.0  \n",
       "527637    1251.0  \n",
       "527638     945.0  \n",
       "527639    1420.0  \n",
       "527640    1008.0  \n",
       "527641    1396.0  \n",
       "527642    1579.0  \n",
       "527643    1028.0  \n",
       "527644     879.0  \n",
       "527645    1009.0  "
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Properties concatenation\n",
    "tree = tree.rename(columns={'categoryid': 'property'})\n",
    "items_full = items_full.loc[(items_full.property!='categoryid')&(items_full.property!='available')]\n",
    "items_full['property'] = pd.to_numeric(items_full['property'])\n",
    "items = items_full.merge(tree, how='left', on='property').fillna(0)\n",
    "items.tail(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "4701edc1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>itemid</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15</td>\n",
       "      <td>839</td>\n",
       "      <td>245772</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>15</td>\n",
       "      <td>790</td>\n",
       "      <td>n0.000</td>\n",
       "      <td>1492.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>15</td>\n",
       "      <td>790</td>\n",
       "      <td>n8160.000</td>\n",
       "      <td>1492.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>15</td>\n",
       "      <td>616</td>\n",
       "      <td>769062</td>\n",
       "      <td>573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>15</td>\n",
       "      <td>790</td>\n",
       "      <td>n9000.000</td>\n",
       "      <td>1492.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>15</td>\n",
       "      <td>790</td>\n",
       "      <td>n8400.000</td>\n",
       "      <td>1492.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>15</td>\n",
       "      <td>227</td>\n",
       "      <td>433564</td>\n",
       "      <td>602.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>15</td>\n",
       "      <td>698</td>\n",
       "      <td>433564</td>\n",
       "      <td>1251.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>15</td>\n",
       "      <td>888</td>\n",
       "      <td>789221</td>\n",
       "      <td>866.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>693</td>\n",
       "      <td>769062</td>\n",
       "      <td>1630.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    itemid  property      value  parentid\n",
       "0       15       839     245772      33.0\n",
       "23      15       790     n0.000    1492.0\n",
       "22      15       790  n8160.000    1492.0\n",
       "21      15       616     769062     573.0\n",
       "20      15       790  n9000.000    1492.0\n",
       "19      15       790  n8400.000    1492.0\n",
       "18      15       227     433564     602.0\n",
       "17      15       698     433564    1251.0\n",
       "16      15       888     789221     866.0\n",
       "14      15       693     769062    1630.0"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Skip duplicates\n",
    "items = items.drop_duplicates()\n",
    "\n",
    "###Adding properties to all features\n",
    "items.sort_values(by='itemid').head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98c77e17",
   "metadata": {},
   "source": [
    "Как можно видеть, одному itemid может соответствовать несколько неповторяющихся признаков. Чтобы придать признакам уникальность, их можно объеднинить единый строковой объект, который затем обработать при помощи NLP. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "27a6a937",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Selecting unique item IDs\n",
    "items_df = items.loc[items.itemid.isin(items_list)]\n",
    "\n",
    "#Category values\n",
    "def get_property(item):\n",
    "    value = set(items_df.loc[items_df.itemid==item]['property'].to_list())\n",
    "    return value\n",
    "\n",
    "def get_value(item):\n",
    "    value = set(items_df.loc[items_df.itemid==item]['value'].to_list())\n",
    "    return value\n",
    "\n",
    "def get_parentid(item):\n",
    "    value = set(items_df.loc[items_df.itemid==item]['parentid'].to_list())\n",
    "    return value\n",
    "\n",
    "#Making string features\n",
    "item_features['property'] = item_features['itemid'].map(get_property)\n",
    "item_features['value'] = item_features['itemid'].map(get_value)\n",
    "item_features['parentid'] = item_features['itemid'].map(get_parentid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "f80424bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>visitorid</th>\n",
       "      <th>event</th>\n",
       "      <th>itemid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>date</th>\n",
       "      <th>format_date</th>\n",
       "      <th>month</th>\n",
       "      <th>day_week</th>\n",
       "      <th>hour</th>\n",
       "      <th>...</th>\n",
       "      <th>activity_duration_itm</th>\n",
       "      <th>month_itm</th>\n",
       "      <th>day_itm</th>\n",
       "      <th>hour_itm</th>\n",
       "      <th>activity_itm_days</th>\n",
       "      <th>sale_days</th>\n",
       "      <th>sale_days_%</th>\n",
       "      <th>property</th>\n",
       "      <th>value</th>\n",
       "      <th>parentid</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1433222147345</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>262799</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>2015-06-02 05:15:47.345</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>14 days 16:47:52.539000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>0.13</td>\n",
       "      <td>{897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...</td>\n",
       "      <td>{1285872, n78000.000, 557711, n81120.000, 1116...</td>\n",
       "      <td>{1028.0, 145.0, 1181.0, 1313.0, 33.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1433224644638</td>\n",
       "      <td>361387</td>\n",
       "      <td>view</td>\n",
       "      <td>43485</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>2015-06-02 05:57:24.638</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>21 days 07:05:17.274000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>0.14</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "      <td>{}</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1433221123646</td>\n",
       "      <td>1076270</td>\n",
       "      <td>view</td>\n",
       "      <td>269430</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>2015-06-02 04:58:43.646</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:22:05.453000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...</td>\n",
       "      <td>{1285872, n74400.000, 1164943 1093697 986387, ...</td>\n",
       "      <td>{1028.0, 145.0, 1181.0, 33.0, 1313.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1433193535886</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>369447</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>2015-06-01 21:18:55.886</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>60 days 16:15:08.907000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>61</td>\n",
       "      <td>14</td>\n",
       "      <td>0.23</td>\n",
       "      <td>{771, 776, 1036, 400, 529, 785, 917, 790, 663,...</td>\n",
       "      <td>{1285872, 992862 1138995, 992862, 950107, 9928...</td>\n",
       "      <td>{0.0, 1028.0, 1157.0, 8.0, 520.0, 395.0, 1420....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1433193703544</td>\n",
       "      <td>820159</td>\n",
       "      <td>view</td>\n",
       "      <td>261793</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>2015-06-01 21:21:43.544</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 268, 917, 790, 538, 283, 542, 159, 92...</td>\n",
       "      <td>{1285872, 519769, 589233, n2772.000, 679677, n...</td>\n",
       "      <td>{1028.0, 138.0, 1420.0, 20.0, 1057.0, 933.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57039</th>\n",
       "      <td>1438357544346</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>430566</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>2015-07-31 15:45:44.346</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:15.426000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 917, 790, 283, 28, 542, 159, 928, 678...</td>\n",
       "      <td>{1285872, n5040.000, n6480.000, 1289474, 51976...</td>\n",
       "      <td>{1028.0, 20.0, 33.0, 933.0, 1579.0, 1604.0, 71...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57040</th>\n",
       "      <td>1438358117670</td>\n",
       "      <td>1188952</td>\n",
       "      <td>addtocart</td>\n",
       "      <td>194328</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>2015-07-31 15:55:17.670</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>1 days 00:31:02.705000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 785, 917, 790, 283, 159, 544, 35, 678...</td>\n",
       "      <td>{1285872, n364080.000, 992862, n6000.000 11871...</td>\n",
       "      <td>{1028.0, 8.0, 781.0, 1168.0, 145.0, 20.0, 663....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57041</th>\n",
       "      <td>1438360037777</td>\n",
       "      <td>572806</td>\n",
       "      <td>view</td>\n",
       "      <td>104781</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>2015-07-31 16:27:17.777</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>22 days 00:12:23.987000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>23</td>\n",
       "      <td>4</td>\n",
       "      <td>0.17</td>\n",
       "      <td>{6, 776, 917, 790, 283, 159, 33, 678, 689, 186...</td>\n",
       "      <td>{1285872, n14280.000, 1300730, 1116693, 519769...</td>\n",
       "      <td>{1028.0, 33.0, 933.0, 1579.0, 1326.0, 711.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57042</th>\n",
       "      <td>1438406444601</td>\n",
       "      <td>115257</td>\n",
       "      <td>view</td>\n",
       "      <td>443791</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>2015-08-01 05:20:44.601</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0 days 00:00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>{6, 776, 521, 19, 917, 790, 283, 28, 159, 928,...</td>\n",
       "      <td>{887751 993028 162354, n13200.000, 1285872, 96...</td>\n",
       "      <td>{1028.0, 654.0, 20.0, 540.0, 33.0, 933.0, 1579...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57043</th>\n",
       "      <td>1438402186555</td>\n",
       "      <td>175890</td>\n",
       "      <td>view</td>\n",
       "      <td>396732</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>2015-08-01 04:09:46.555</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>124 days 11:45:47.510000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>125</td>\n",
       "      <td>6</td>\n",
       "      <td>0.05</td>\n",
       "      <td>{227, 6, 839, 776, 678, 202, 713, 1036, 364, 1...</td>\n",
       "      <td>{1285872, n102240.000, 519769, 418242, n8016.0...</td>\n",
       "      <td>{33.0, 866.0, 1251.0, 1028.0, 933.0, 711.0, 25...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>57044 rows × 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           timestamp  visitorid      event  itemid  transactionid  \\\n",
       "0      1433222147345    1076270       view  262799            0.0   \n",
       "1      1433224644638     361387       view   43485            0.0   \n",
       "2      1433221123646    1076270       view  269430            0.0   \n",
       "3      1433193535886     820159       view  369447            0.0   \n",
       "4      1433193703544     820159       view  261793            0.0   \n",
       "...              ...        ...        ...     ...            ...   \n",
       "57039  1438357544346    1188952  addtocart  430566            0.0   \n",
       "57040  1438358117670    1188952  addtocart  194328            0.0   \n",
       "57041  1438360037777     572806       view  104781            0.0   \n",
       "57042  1438406444601     115257       view  443791            0.0   \n",
       "57043  1438402186555     175890       view  396732            0.0   \n",
       "\n",
       "                         date             format_date  month  day_week  hour  \\\n",
       "0     2015-06-02 05:15:47.345 2015-06-02 05:15:47.345      6         1     5   \n",
       "1     2015-06-02 05:57:24.638 2015-06-02 05:57:24.638      6         1     5   \n",
       "2     2015-06-02 04:58:43.646 2015-06-02 04:58:43.646      6         1     4   \n",
       "3     2015-06-01 21:18:55.886 2015-06-01 21:18:55.886      6         0    21   \n",
       "4     2015-06-01 21:21:43.544 2015-06-01 21:21:43.544      6         0    21   \n",
       "...                       ...                     ...    ...       ...   ...   \n",
       "57039 2015-07-31 15:45:44.346 2015-07-31 15:45:44.346      7         4    15   \n",
       "57040 2015-07-31 15:55:17.670 2015-07-31 15:55:17.670      7         4    15   \n",
       "57041 2015-07-31 16:27:17.777 2015-07-31 16:27:17.777      7         4    16   \n",
       "57042 2015-08-01 05:20:44.601 2015-08-01 05:20:44.601      8         5     5   \n",
       "57043 2015-08-01 04:09:46.555 2015-08-01 04:09:46.555      8         5     4   \n",
       "\n",
       "       ...    activity_duration_itm  month_itm  day_itm  hour_itm  \\\n",
       "0      ...  14 days 16:47:52.539000        6.0      1.0       5.0   \n",
       "1      ...  21 days 07:05:17.274000        6.0      1.0       6.0   \n",
       "2      ...   0 days 00:22:05.453000        NaN      NaN       NaN   \n",
       "3      ...  60 days 16:15:08.907000        5.0      0.0      20.0   \n",
       "4      ...          0 days 00:00:00        NaN      NaN       NaN   \n",
       "...    ...                      ...        ...      ...       ...   \n",
       "57039  ...   0 days 00:00:15.426000        NaN      NaN       NaN   \n",
       "57040  ...   1 days 00:31:02.705000        NaN      NaN       NaN   \n",
       "57041  ...  22 days 00:12:23.987000        7.0      3.0      16.0   \n",
       "57042  ...          0 days 00:00:00        NaN      NaN       NaN   \n",
       "57043  ... 124 days 11:45:47.510000        9.0      3.0       1.0   \n",
       "\n",
       "       activity_itm_days  sale_days  sale_days_%  \\\n",
       "0                     15          2         0.13   \n",
       "1                     22          3         0.14   \n",
       "2                      1          1         1.00   \n",
       "3                     61         14         0.23   \n",
       "4                      1          1         1.00   \n",
       "...                  ...        ...          ...   \n",
       "57039                  1          1         1.00   \n",
       "57040                  2          2         1.00   \n",
       "57041                 23          4         0.17   \n",
       "57042                  1          1         1.00   \n",
       "57043                125          6         0.05   \n",
       "\n",
       "                                                property  \\\n",
       "0      {897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...   \n",
       "1                                                     {}   \n",
       "2      {897, 645, 6, 776, 1041, 917, 790, 283, 159, 3...   \n",
       "3      {771, 776, 1036, 400, 529, 785, 917, 790, 663,...   \n",
       "4      {6, 776, 268, 917, 790, 538, 283, 542, 159, 92...   \n",
       "...                                                  ...   \n",
       "57039  {6, 776, 917, 790, 283, 28, 542, 159, 928, 678...   \n",
       "57040  {6, 776, 785, 917, 790, 283, 159, 544, 35, 678...   \n",
       "57041  {6, 776, 917, 790, 283, 159, 33, 678, 689, 186...   \n",
       "57042  {6, 776, 521, 19, 917, 790, 283, 28, 159, 928,...   \n",
       "57043  {227, 6, 839, 776, 678, 202, 713, 1036, 364, 1...   \n",
       "\n",
       "                                                   value  \\\n",
       "0      {1285872, n78000.000, 557711, n81120.000, 1116...   \n",
       "1                                                     {}   \n",
       "2      {1285872, n74400.000, 1164943 1093697 986387, ...   \n",
       "3      {1285872, 992862 1138995, 992862, 950107, 9928...   \n",
       "4      {1285872, 519769, 589233, n2772.000, 679677, n...   \n",
       "...                                                  ...   \n",
       "57039  {1285872, n5040.000, n6480.000, 1289474, 51976...   \n",
       "57040  {1285872, n364080.000, 992862, n6000.000 11871...   \n",
       "57041  {1285872, n14280.000, 1300730, 1116693, 519769...   \n",
       "57042  {887751 993028 162354, n13200.000, 1285872, 96...   \n",
       "57043  {1285872, n102240.000, 519769, 418242, n8016.0...   \n",
       "\n",
       "                                                parentid  \n",
       "0      {1028.0, 145.0, 1181.0, 1313.0, 33.0, 933.0, 1...  \n",
       "1                                                     {}  \n",
       "2      {1028.0, 145.0, 1181.0, 33.0, 1313.0, 933.0, 1...  \n",
       "3      {0.0, 1028.0, 1157.0, 8.0, 520.0, 395.0, 1420....  \n",
       "4      {1028.0, 138.0, 1420.0, 20.0, 1057.0, 933.0, 1...  \n",
       "...                                                  ...  \n",
       "57039  {1028.0, 20.0, 33.0, 933.0, 1579.0, 1604.0, 71...  \n",
       "57040  {1028.0, 8.0, 781.0, 1168.0, 145.0, 20.0, 663....  \n",
       "57041  {1028.0, 33.0, 933.0, 1579.0, 1326.0, 711.0, 1...  \n",
       "57042  {1028.0, 654.0, 20.0, 540.0, 33.0, 933.0, 1579...  \n",
       "57043  {33.0, 866.0, 1251.0, 1028.0, 933.0, 711.0, 25...  \n",
       "\n",
       "[57044 rows x 30 columns]"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bbbe82d8",
   "metadata": {},
   "source": [
    "# 10. Description of Experiments concept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "47224a2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Primary experiment users (1,2,3,4,5 items resp)\n",
    "pr_exp_users = [291283, 322407, 1214988, 566009, 273406]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "98cf81d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Random 25 users\n",
    "random_25_users = test.visitorid.unique().tolist()\n",
    "random_25_users = random.choices(random_25_users, k=25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "044480a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[125769,\n",
       " 446931,\n",
       " 597416,\n",
       " 491908,\n",
       " 746939,\n",
       " 272883,\n",
       " 943950,\n",
       " 5703,\n",
       " 1014701,\n",
       " 258317,\n",
       " 929045,\n",
       " 157419,\n",
       " 226445,\n",
       " 387388,\n",
       " 144849,\n",
       " 471929,\n",
       " 166590,\n",
       " 1220556,\n",
       " 164995,\n",
       " 676700,\n",
       " 939751,\n",
       " 1000593,\n",
       " 1172980,\n",
       " 413758,\n",
       " 1164596]"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_25_users"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "295501a2",
   "metadata": {},
   "source": [
    "# 11. Baseline (Experiment 0)\n",
    "\n",
    "Предлагаем каждому пользователю 3 самых популярных товара из списка топ-20 (товары, которые чаще всего покупались большинством пользователей)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "cda52827",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-215-28a5c28d5f89>:9: FutureWarning: The behavior of `series[i:j]` with an integer-dtype index is deprecated. In a future version, this will be treated as *label-based* indexing, consistent with e.g. `series[i]` lookups. To retain the old behavior, use `series.iloc[i:j]`. To get the future behavior, use `series.loc[i:j]`.\n",
      "  supertop_3 = top_20.itemid.value_counts()[0:3].index.tolist()\n"
     ]
    }
   ],
   "source": [
    "#Top_20\n",
    "cols = ['itemid', 'top_20_sale']\n",
    "top_20_list = item_features[cols].loc[item_features['top_20_sale']==1]\n",
    "top_20_list = top_20_list.itemid.unique().tolist()\n",
    "\n",
    "#3 most popuar items\n",
    "cols = ['itemid', 'event']\n",
    "top_20 = user_features[cols].loc[(user_features['event']=='transaction')&(user_features['itemid'].isin(top_20_list))]\n",
    "supertop_3 = top_20.itemid.value_counts()[0:3].index.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "6d4b3eac",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[334401,\n",
       " 409804,\n",
       " 46232,\n",
       " 140527,\n",
       " 379953,\n",
       " 312728,\n",
       " 301721,\n",
       " 218794,\n",
       " 461686,\n",
       " 92466,\n",
       " 171878,\n",
       " 46156,\n",
       " 288525,\n",
       " 10572,\n",
       " 213834,\n",
       " 441852,\n",
       " 382885,\n",
       " 445351,\n",
       " 444190,\n",
       " 9877]"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_20_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "b7bee078",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[213834, 461686, 445351]"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "supertop_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "8dc39e15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>prediction</th>\n",
       "      <th>purch_number</th>\n",
       "      <th>precision@3</th>\n",
       "      <th>recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>291283</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>322407</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1214988</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>566009</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>273406</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   visitorid  prediction  purch_number  precision@3  recall\n",
       "0     291283           0             1          0.0     0.0\n",
       "1     322407           0             1          0.0     0.0\n",
       "2    1214988           0             1          0.0     0.0\n",
       "3     566009           0             1          0.0     0.0\n",
       "4     273406           0             2          0.0     0.0"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Experiments & Predictions\n",
    "###Baseline prediction function\n",
    "def baseline_3_top(num):\n",
    "    prediction = set(supertop_3)\n",
    "    check = set(test.loc[test.visitorid==num]['itemid'].to_list())\n",
    "    verdict = len(prediction.intersection(check))\n",
    "    \n",
    "    return verdict   \n",
    "\n",
    "###Df prediction function\n",
    "def get_prediction(us_list, pred_function):\n",
    "    prediction_df = {'visitorid': us_list}\n",
    "    prediction_df = pd.DataFrame.from_dict(prediction_df)\n",
    "    prediction_df['prediction'] = prediction_df['visitorid'].map(pred_function)\n",
    "    prediction_df['purch_number'] = prediction_df['visitorid'].apply(lambda x: len(test.loc[test.visitorid==x]))\n",
    "    prediction_df['precision@3'] = round((prediction_df['prediction']/3),4)\n",
    "    prediction_df['recall'] = round((prediction_df['prediction']/prediction_df['purch_number']),4)\n",
    "    \n",
    "    return prediction_df   \n",
    "\n",
    "#5 fixed users prediction\n",
    "us_list = pr_exp_users\n",
    "pred_function = baseline_3_top\n",
    "\n",
    "baseline_5 = get_prediction(us_list, pred_function)\n",
    "baseline_5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "9548a808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>visitorid</th>\n",
       "      <th>prediction</th>\n",
       "      <th>purch_number</th>\n",
       "      <th>precision@3</th>\n",
       "      <th>recall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>125769</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>446931</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>597416</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>491908</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>746939</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>272883</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>943950</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5703</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1014701</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>258317</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>929045</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>157419</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>226445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>387388</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>144849</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>471929</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>166590</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1220556</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>164995</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>676700</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>939751</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1000593</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1172980</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>413758</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1164596</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    visitorid  prediction  purch_number  precision@3  recall\n",
       "0      125769           0             1          0.0     0.0\n",
       "1      446931           0             1          0.0     0.0\n",
       "2      597416           0             1          0.0     0.0\n",
       "3      491908           0             1          0.0     0.0\n",
       "4      746939           0             1          0.0     0.0\n",
       "5      272883           0             1          0.0     0.0\n",
       "6      943950           0             1          0.0     0.0\n",
       "7        5703           0             1          0.0     0.0\n",
       "8     1014701           0             1          0.0     0.0\n",
       "9      258317           0             1          0.0     0.0\n",
       "10     929045           0             1          0.0     0.0\n",
       "11     157419           0             2          0.0     0.0\n",
       "12     226445           0             1          0.0     0.0\n",
       "13     387388           0             1          0.0     0.0\n",
       "14     144849           0             1          0.0     0.0\n",
       "15     471929           0             1          0.0     0.0\n",
       "16     166590           0             1          0.0     0.0\n",
       "17    1220556           0             1          0.0     0.0\n",
       "18     164995           0             1          0.0     0.0\n",
       "19     676700           0             1          0.0     0.0\n",
       "20     939751           0             1          0.0     0.0\n",
       "21    1000593           0             1          0.0     0.0\n",
       "22    1172980           0             1          0.0     0.0\n",
       "23     413758           0             1          0.0     0.0\n",
       "24    1164596           0             1          0.0     0.0"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#30 fixed users prediction\n",
    "us_list = random_25_users\n",
    "pred_function = baseline_3_top\n",
    "\n",
    "baseline_50 = get_prediction(us_list, pred_function)\n",
    "baseline_50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "44df149e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline experiment precision mean:  0.0\n"
     ]
    }
   ],
   "source": [
    "mean_precision = round((baseline_30['precision@3'].mean()),2)\n",
    "print('Baseline experiment precision mean: ', mean_precision)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "aaee33b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline experiment recall mean:  0.0\n"
     ]
    }
   ],
   "source": [
    "mean_recall = round((baseline_30['recall'].mean()),2)\n",
    "print('Baseline experiment recall mean: ', mean_recall)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2fb1de4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
