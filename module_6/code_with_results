Image
Прогнозирование стоимости автомобиля по характеристикам
add Codeadd Markdown
# Загрузим все необходимые библиотеки
​
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import sys
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from tqdm.notebook import tqdm
from catboost import CatBoostRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LinearRegression
import xgboost as xgb
import time
import os
​
from pandas import Series
import re
​
import json
import requests
import pandas_profiling
import warnings
import matplotlib.pyplot as plt
warnings.simplefilter('ignore')
​
from sklearn.base import clone
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import KFold
from sklearn.feature_selection import f_classif, mutual_info_classif
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.model_selection import RandomizedSearchCV
from tqdm import tqdm
from datetime import timedelta, datetime, date
​
from pandas import Series
from bs4 import BeautifulSoup
​
import seaborn as sn
%matplotlib inline
from sklearn.metrics import accuracy_score, recall_score, f1_score, mean_absolute_error, mean_squared_error, precision_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import auc, roc_auc_score, roc_curve
​
from datetime import date
from datetime import datetime, timedelta
​
from sklearn.preprocessing import PolynomialFeatures
​
​
add Codeadd Markdown
print('Python       :', sys.version.split('\n')[0])
print('Numpy        :', np.__version__)
Python       : 3.7.6 | packaged by conda-forge | (default, Mar 23 2020, 23:03:20) 
Numpy        : 1.18.5
add Codeadd Markdown
# зафиксируем версию пакетов, чтобы эксперименты были воспроизводимы:
!pip freeze > requirements.txt
add Codeadd Markdown
# всегда фиксируйте RANDOM_SEED, чтобы ваши эксперименты были воспроизводимы!
RANDOM_SEED = 42
add Codeadd Markdown
def mape(y_true, y_pred):
    return np.mean(np.abs((y_pred-y_true)/y_true))
add Codeadd Markdown
Сначала мы создаём список из доступных ссылок, что было проделано в google collab, в надежде,что найдутся сокомандники) (так и не нашлись, к сожалению) После этого мы прошлись по всем найденым ссылкам для получения необходимых данных, проделано в jupyter notebook.

add Codeadd Markdown
"""# загружаем необходимые библиотеки для получения и обработки данных
​
    import requests
    from bs4 import BeautifulSoup
    import csv
    import time
    import json
    import re
    import pandas as pd
   
    from google.colab import drive"""
  
    
"""drive.mount('/drive')
​
​
def get_all_links(url_list):
    
    #Функция для получения и сохранения в отдельный файл ссылок на объявления
    по машинам выбранных марок. В результате выполнения получаем файл со 
    списком найденных ссылок.
​
​
    all_car = []
    # проходимся по каждой выбранной марке
    # we go through each selected brand
    for url in url_list:
        # получаем количество страниц по выбранной марке
        # get the number of pages for the selected brand
        print(url)
        res = requests.get(url)
        soup = BeautifulSoup(res.content.decode('utf-8'), 'html.parser')
        news_blocks = soup.find('button',
                                class_='Button Button_color_blue Button_size_m Button_type_button Button_width_full')\
            .find('span', class_='ButtonWithLoader__content').text
        page_total = news_blocks.replace(u'\xa0', u' ').split()[1:3]
        page_total = int(''.join(page_total))
        # 38 ads on one page, get the number of pages
        number_of_pages = int(page_total / 38)
​
        # получаем и сохраняем ссылки по каждой машине из выбранной марки
        # get and save links for each car from the selected brand
        for i in range(1, number_of_pages):
            print('Current Page:', i, 'Total Pages:', number_of_pages)
            url_page = url + '/?page=' + str(i)
            res = requests.get(url)
            # задержка времени при отправке запросов/time delay when sending requests
            time.sleep(0.1)
            soup = BeautifulSoup(res.content.decode('utf-8'), 'html.parser')
            car_page = soup.find_all('a', class_='Link ListingItemTitle__link')
            car_list = list(map(lambda x: x.get('href'), car_page))
            for row in car_list:
                all_car.append(row)
    # записываем новую ссылку на объявление в файл
    # write the new link to the ad to a file
    with open('/drive/My Drive/all_car_27082021.csv', 'a') as myfile:
        wr = csv.writer(myfile)
        for row in all_car:
            wr.writerow([row])
    return all_car
​
​
# определяем список марок машин, которые нам интересны
# we define a list of car brands that are of interest to us
brands = ['honda', 'skoda', 'audi', 'volvo', 'bmw', 'nissan', 'infiniti',
          'mercedes', 'toyota', 'lexus', 'volkswagen', 'mitsubishi']
#url_list = ['https://auto.ru/moskva/cars/'+brand+'/all' for brand in brands]
​
url_list = ['https://auto.ru/cars/'+brand+'/all' for brand in brands]
all_car = get_all_links(url_list)
print(f'Количество отобранных объявлений: {len(all_car)}')"""
​
​
​
"131478 rows"
​
"df.to_csv('/drive/My Drive/lit_of_links.csv')"
 
    
    
"""# загружаем необходимые библиотеки для получения и обработки данных
# load the necessary libraries for receiving and processing data
import requests
from bs4 import BeautifulSoup
import csv
import time
import json
import re
import pandas as pd"""
​
"autoru_gdpr=1"
​
"""def get_cars_info(links, step=0):
​
    cars_info = pd.DataFrame()
    
    for link in links:
        try:
            response = requests.get(link)
            page = BeautifulSoup(response.content.decode('utf-8'), 'html.parser')
            print(f'link={link}, {response.status_code}')
        except:
            print(f'Error get link={link}')
            continue  
        try:
            json_data = json.loads(
                page.find('script', type="application/ld+json").string)
        except:
            json_data = None
        try:
            catalog_url = page.find(
                'a', class_='Link SpoilerLink CardCatalogLink SpoilerLink_type_default').get('href')
            response_catalog = requests.get(catalog_url)
            page_catalog = BeautifulSoup(
                response_catalog.content.decode('utf-8'), 'html.parser')
        except:
            print(f'Error get link={link}')
            continue  
        try:
            json_data_catalog = json.loads(page_catalog.find(
                'script', type="application/json", id='initial-state').string)
        except:
            json_data_catalog = None
        try:
            json_data_equip = json.loads(
                page.find('script', type="application/json", id='initial-state').string)
        except:
            json_data_equip = None
        try:
            json_data['description'] = json_data['description'].replace(
                '\n', ' ')
            json_data['description'] = re.sub(
                '\W+', ' ', json_data['description'])
        except:
            json_data['description'] = ''
        try:
            options_dict = json_data_catalog['state']['compare']['selected'][0]['options']
            options_list = [key for key in list(
                options_dict.keys()) if options_dict[key] == 1]
        except:
            options_list = []
      
        try:
            car_url = json_data['offers']['url']
        except:
            car_url = None
        try:
            bodyType = json_data['bodyType']
        except:
            bodyType = None
        try:
            brand = json_data['brand']
        except:
            brand = None
        try:
            color = json_data['color']
        except:
            color = None
        try:
            complectation_dict = options_list
        except:
            complectation_dict = None
        try:
            description = json_data['description']
        except:
            description = None
        try:
            engineDisplacement = json_data['vehicleEngine']['engineDisplacement']
        except:
            engineDisplacement = None
        try:
            enginePower = json_data['vehicleEngine']['enginePower']
        except:
            enginePower = None
        try:
            equipment_dict = json_data_equip['card']['vehicle_info']['equipment']
        except:
            equipment_dict = None
        try:
            fuelType = json_data['fuelType']
        except:
            fuelType = None
        try:
            image = json_data['image']
        except:
            image = None
        try:
            mileage = page.find('li', class_='CardInfoRow CardInfoRow_kmAge').find_all(
                'span')[-1].text.replace(u'\xa0', u' ')
        except:
            mileage = None
        try:
            modelDate = json_data['modelDate']
        except:
            modelDate = None
        try:
            model_name = page.find_all(
                'div', class_='InfoPopup InfoPopup_theme_plain InfoPopup_withChildren BreadcrumbsPopup')[1].text
        except:
            model_name = None
        try:
            name = json_data['name']
        except:
            name = None
        try:
            numberOfDoors = json_data['numberOfDoors']
        except:
            numberOfDoors = None
        try:
            parsing_unixtime = int(time.time())
        except:
            parsing_unixtime = None
        try:
            price = json_data['offers']['price']
        except:
            price = None
        try:
            priceCurrency = json_data['offers']['priceCurrency']
        except:
            priceCurrency = None
        try:
            productionDate = json_data['productionDate']
        except:
            productionDate = None
        try:
            sell_id = page.find(
                'div', class_='CardHead__infoItem CardHead__id').text[2:]
        except:
            sell_id = None
        try:
            views = page.find(
                'div', class_='CardHead__infoItem CardHead__views').text.split()[0]
        except:
            views = None
        try:
            date_added = page.find(
                'div', class_='CardHead__infoItem CardHead__creationDate').text
        except:
            date_added = None
        try:
            super_gen = json.loads(
                page.find('div', id="sale-data-attributes").get('data-bem'))
        except:
            super_gen = None
        try:
            vehicleConfiguration = json_data['vehicleConfiguration']
        except:
            vehicleConfiguration = None
        try:
            vehicleTransmission = json_data['vehicleTransmission']
        except:
            vehicleTransmission = None
        try:
            Владельцы = page.find('li', class_='CardInfoRow CardInfoRow_ownersCount').find_all(
                'span')[-1].text.replace(u'\xa0', u' ')
        except:
            Владельцы = None
        try:
            Владение = page.find(
                'li', class_='CardInfoRow CardInfoRow_owningTime').find_all('span')[-1].text
        except:
            Владение = None
        try:
            ПТС = page.find('li', class_='CardInfoRow CardInfoRow_pts').find_all(
                'span')[-1].text
        except:
            ПТС = None
        try:
            Привод = page.find('li', class_='CardInfoRow CardInfoRow_drive').find_all(
                'span')[-1].text
        except:
            Привод = None
        try:
            Руль = page.find('li', class_='CardInfoRow CardInfoRow_wheel').find_all(
                'span')[-1].text
        except:
            Руль = None
        try:
            Состояние = page.find(
                'li', class_='CardInfoRow CardInfoRow_state').find_all('span')[-1].text
        except:
            Состояние = None
        try:
            Таможня = page.find(
                'li', class_='CardInfoRow CardInfoRow_customs').find_all('span')[-1].text
        except:
            Таможня = None
        try:
            region = page.find('div', class_='CardBreadcrumbs').find_all(
                'div', class_='CardBreadcrumbs__item')[-1].text.replace(u'\xa0', u' ')
        except:
            region = None
​
        row = {'car_url': car_url, 'bodyType': bodyType, 'brand': brand, 'color': color,
               'complectation_dict': complectation_dict, 'description': description,
               'engineDisplacement': engineDisplacement, 'enginePower': enginePower,
               'equipment_dict': equipment_dict, 'fuelType': fuelType, 'image': image,
               'mileage': mileage, 'modelDate': modelDate, 'model_name': model_name,
               'name': name, 'numberOfDoors': numberOfDoors, 'parsing_unixtime': parsing_unixtime,
               'price': price, 'priceCurrency': priceCurrency, 'productionDate': productionDate,
               'sell_id': sell_id, 'views': views, 'date_added': date_added,
               'super_gen': super_gen, 'vehicleConfiguration': vehicleConfiguration,
               'vehicleTransmission': vehicleTransmission, 'Владельцы': Владельцы,
               'Владение': Владение, 'ПТС': ПТС, 'Привод': Привод, 'Руль': Руль,
               'Состояние': Состояние, 'Таможня': Таможня, 'region': region}
        
        cars_info = pd.concat([cars_info, pd.DataFrame([row])])
        step += 1
        if step % 10 == 0:
            print(f'Completed {step} of total {len(links)}')
        else:
            continue
    return cars_info
​
df = pd.read_csv('lit_of_links.csv', sep=',', header=None)
all_links = df[1].tolist()"""
​
​
"""# проходимся по каждому объявлению из всего списка или выбранного диапозона,
# собираем данные по автомобилю и записываем их в файл
# we go through each ad from the entire list or the selected range,
# collect data on the car and write it to a file
car_data_1 = get_cars_info(all_links[:50000])
car_data_1.reset_index()
car_data_1.to_csv('all_car_1.csv')
car_data_2 = get_cars_info(all_links[50000:100000])
car_data_2.reset_index()
car_data_2.to_csv('all_car_2.csv')
car_data_3 = get_cars_info(all_links[100000:])
car_data_3.reset_index()
car_data_3.to_csv('all_car_3.csv')
​
df_1=pd.read_csv("all_car_1.csv")
df_2=pd.read_csv("all_car_2.csv")
df_3=pd.read_csv("all_car_3.csv")
all_car=pd.concat([df_1,df_2,df_3], sort=False, axis=0)
all_car.to_csv('all_cars.csv')"""
'# проходимся по каждому объявлению из всего списка или выбранного диапозона,\n# собираем данные по автомобилю и записываем их в файл\n# we go through each ad from the entire list or the selected range,\n# collect data on the car and write it to a file\ncar_data_1 = get_cars_info(all_links[:50000])\ncar_data_1.reset_index()\ncar_data_1.to_csv(\'all_car_1.csv\')\ncar_data_2 = get_cars_info(all_links[50000:100000])\ncar_data_2.reset_index()\ncar_data_2.to_csv(\'all_car_2.csv\')\ncar_data_3 = get_cars_info(all_links[100000:])\ncar_data_3.reset_index()\ncar_data_3.to_csv(\'all_car_3.csv\')\n\ndf_1=pd.read_csv("all_car_1.csv")\ndf_2=pd.read_csv("all_car_2.csv")\ndf_3=pd.read_csv("all_car_3.csv")\nall_car=pd.concat([df_1,df_2,df_3], sort=False, axis=0)\nall_car.to_csv(\'all_cars.csv\')'
add Codeadd Markdown
Setup
add Codeadd Markdown
Изначально проводилось обучение только на спарсенных лично данных, но по какой-то причине в датасете было очень много дубликатов, скорее всего ошибка в самом парсинге. Поэтому используем также и датасет данный в baseline

add Codeadd Markdown
VERSION    = 8
DIR_TRAIN  = '../input/all-cars/' # подключил к ноутбуку внешний датасет
DIR_TRAIN_base  = '../input/parsing-all-moscow-auto-ru-09-09-2020/'
DIR_TEST   = '../input/sf-dst-car-price-prediction/'
VAL_SIZE   = 0.20   # 20%
add Codeadd Markdown
Data
add Codeadd Markdown
!ls '../input'
all-cars  parsing-all-moscow-auto-ru-09-09-2020  sf-dst-car-price-prediction
add Codeadd Markdown
train = pd.read_csv(DIR_TRAIN+'all_cars.csv') # датасет для обучения модели
train_base  = pd.read_csv(DIR_TRAIN_base+'all_auto_ru_09_09_2020.csv') # датасет для обучения модели
test = pd.read_csv(DIR_TEST+'test.csv')
sample_submission = pd.read_csv(DIR_TEST+'sample_submission.csv')
add Codeadd Markdown
train.head(5)
Unnamed: 0	Unnamed: 0.1	car_url	bodyType	brand	color	complectation_dict	description	engineDisplacement	enginePower	...	vehicleConfiguration	vehicleTransmission	Владельцы	Владение	ПТС	Привод	Руль	Состояние	Таможня	region
0	0	0	https://auto.ru/cars/used/sale/honda/cr_v/1104...	внедорожник 5 дв.	HONDA	синий	[]	Автомобиль проверен и готов к эксплуатации Гар...	2.0 LTR	147 N12	...	ALLROAD_5_DOORS AUTOMATIC 2.0	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Брянске
1	1	0	https://auto.ru/cars/used/sale/honda/accord/11...	седан	HONDA	белый	[]	В автосалон не поставлю СПОЙЛЕР ПРОДАН Собстве...	2.0 LTR	150 N12	...	SEDAN AUTOMATIC 2.0	автоматическая	3 или более	NaN	Дубликат	передний	Правый	Не требует ремонта	Растаможен	в Екатеринбурге
2	2	0	https://auto.ru/cars/used/sale/honda/crosstour...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'multi-wheel', 'airbag-pass...	Безопасность 8 Обзор 4 Комфорт 11 Элементы экс...	3.5 LTR	275 N12	...	ALLROAD_5_DOORS AUTOMATIC 3.5	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Сочи
3	3	0	https://auto.ru/cars/new/group/honda/cr_v/2252...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'eco-leather', 'multi-wheel...	Поставка в сентябре 2021г Доп оборудование на ...	2.4 LTR	186 N12	...	ALLROAD_5_DOORS VARIATOR 2.4	вариатор	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
4	4	0	https://auto.ru/cars/used/sale/honda/civic/110...	седан	HONDA	чёрный	['airbag-passenger', 'lock', 'electro-mirrors'...	Один владелец Для данного автомобиля действует...	1.8 LTR	140 N12	...	SEDAN AUTOMATIC 1.8	автоматическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	в Санкт-Петербурге
5 rows × 36 columns

add Codeadd Markdown
Убираем ненужные колонки

add Codeadd Markdown
train = train.drop('Unnamed: 0', 1)
add Codeadd Markdown
train = train.drop('Unnamed: 0.1', 1)
add Codeadd Markdown
train.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 125034 entries, 0 to 125033
Data columns (total 34 columns):
 #   Column                Non-Null Count   Dtype  
---  ------                --------------   -----  
 0   car_url               125034 non-null  object 
 1   bodyType              125034 non-null  object 
 2   brand                 125034 non-null  object 
 3   color                 125034 non-null  object 
 4   complectation_dict    125034 non-null  object 
 5   description           125034 non-null  object 
 6   engineDisplacement    125034 non-null  object 
 7   enginePower           125034 non-null  object 
 8   equipment_dict        125034 non-null  object 
 9   fuelType              125034 non-null  object 
 10  image                 124881 non-null  object 
 11  mileage               99152 non-null   object 
 12  modelDate             125034 non-null  int64  
 13  model_name            99152 non-null   object 
 14  name                  125034 non-null  object 
 15  numberOfDoors         125034 non-null  int64  
 16  parsing_unixtime      125034 non-null  int64  
 17  price                 95179 non-null   float64
 18  priceCurrency         125034 non-null  object 
 19  productionDate        125034 non-null  int64  
 20  sell_id               125034 non-null  int64  
 21  views                 98769 non-null   float64
 22  date_added            99152 non-null   object 
 23  super_gen             125034 non-null  object 
 24  vehicleConfiguration  125034 non-null  object 
 25  vehicleTransmission   125034 non-null  object 
 26  Владельцы             99152 non-null   object 
 27  Владение              13181 non-null   object 
 28  ПТС                   99152 non-null   object 
 29  Привод                99152 non-null   object 
 30  Руль                  99152 non-null   object 
 31  Состояние             99126 non-null   object 
 32  Таможня               99150 non-null   object 
 33  region                99152 non-null   object 
dtypes: float64(2), int64(5), object(27)
memory usage: 32.4+ MB
add Codeadd Markdown
# Смотрим совпадения по всем колонкам кроме patsing_unixtime
​
train.duplicated(subset=['car_url', 'bodyType', 'brand', 'color', 'complectation_dict',
       'description', 'engineDisplacement', 'enginePower', 'equipment_dict',
       'fuelType', 'image', 'mileage', 'modelDate', 'model_name', 'name',
       'numberOfDoors', 'price', 'priceCurrency',
       'productionDate', 'sell_id', 'views', 'date_added', 'super_gen',
       'vehicleConfiguration', 'vehicleTransmission', 'Владельцы', 'Владение',
       'ПТС', 'Привод', 'Руль', 'Состояние', 'Таможня', 'region']).sum()
105946
add Codeadd Markdown
# Удаляем дубликаты
​
train.drop_duplicates(subset=['car_url', 'bodyType', 'brand', 'color', 'complectation_dict', 'description', 'engineDisplacement',
        'enginePower', 'equipment_dict', 'fuelType', 'image', 'mileage', 'modelDate', 'model_name', 'name', 'numberOfDoors', 'price',
        'priceCurrency', 'productionDate', 'sell_id', 'views', 'date_added', 'super_gen', 'vehicleConfiguration', 'vehicleTransmission',
        'Владельцы', 'Владение', 'ПТС', 'Привод', 'Руль', 'Состояние', 'Таможня', 'region'], keep = 'first', inplace = True)
add Codeadd Markdown
train
car_url	bodyType	brand	color	complectation_dict	description	engineDisplacement	enginePower	equipment_dict	fuelType	...	vehicleConfiguration	vehicleTransmission	Владельцы	Владение	ПТС	Привод	Руль	Состояние	Таможня	region
0	https://auto.ru/cars/used/sale/honda/cr_v/1104...	внедорожник 5 дв.	HONDA	синий	[]	Автомобиль проверен и готов к эксплуатации Гар...	2.0 LTR	147 N12	{'alloy-wheel-disks': True, 'condition': True,...	бензин	...	ALLROAD_5_DOORS AUTOMATIC 2.0	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Брянске
1	https://auto.ru/cars/used/sale/honda/accord/11...	седан	HONDA	белый	[]	В автосалон не поставлю СПОЙЛЕР ПРОДАН Собстве...	2.0 LTR	150 N12	{'engine-proof': True, 'tinted-glass': True, '...	бензин	...	SEDAN AUTOMATIC 2.0	автоматическая	3 или более	NaN	Дубликат	передний	Правый	Не требует ремонта	Растаможен	в Екатеринбурге
2	https://auto.ru/cars/used/sale/honda/crosstour...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'multi-wheel', 'airbag-pass...	Безопасность 8 Обзор 4 Комфорт 11 Элементы экс...	3.5 LTR	275 N12	{'cruise-control': True, 'esp': True, 'airbag-...	бензин	...	ALLROAD_5_DOORS AUTOMATIC 3.5	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Сочи
3	https://auto.ru/cars/new/group/honda/cr_v/2252...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'eco-leather', 'multi-wheel...	Поставка в сентябре 2021г Доп оборудование на ...	2.4 LTR	186 N12	{'cruise-control': True, 'asr': True, 'tinted-...	бензин	...	ALLROAD_5_DOORS VARIATOR 2.4	вариатор	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN
4	https://auto.ru/cars/used/sale/honda/civic/110...	седан	HONDA	чёрный	['airbag-passenger', 'lock', 'electro-mirrors'...	Один владелец Для данного автомобиля действует...	1.8 LTR	140 N12	{'esp': True, 'airbag-driver': True, 'electro-...	бензин	...	SEDAN AUTOMATIC 1.8	автоматическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	в Санкт-Петербурге
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
124961	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	красный	['airbag-passenger', 'lock', 'electro-mirrors'...	Код автомобиля Ю 73 Автомобиль принят по прогр...	2.0 LTR	146 N12	{'cruise-control': True, 'esp': True, 'airbag-...	бензин	...	ALLROAD_5_DOORS VARIATOR 2.0	вариатор	1 владелец	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Санкт-Петербурге
124974	https://auto.ru/cars/used/sale/mitsubishi/paje...	внедорожник 5 дв.	MITSUBISHI	белый	['cruise-control', 'multi-wheel', 'airbag-pass...	Автомобиль был принят в зачет по программе Tra...	3.0 LTR	178 N12	{'asr': True, 'tinted-glass': True, 'esp': Tru...	бензин	...	ALLROAD_5_DOORS AUTOMATIC 3.0	автоматическая	2 владельца	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Санкт-Петербурге
124979	https://auto.ru/cars/used/sale/mitsubishi/paje...	внедорожник 5 дв.	MITSUBISHI	бежевый	['cruise-control', 'xenon', 'airbag-passenger'...	Автомобиль приобретался у официального дилера ...	3.8 LTR	250 N12	{'cruise-control': True, 'engine-proof': True,...	бензин	...	ALLROAD_5_DOORS AUTOMATIC 3.8	автоматическая	3 или более	NaN	Дубликат	полный	Левый	Не требует ремонта	Растаможен	в Санкт-Петербурге
124981	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	синий	['xenon', 'airbag-passenger', 'lock', 'electro...	В продажу поступил MITSUBISHI OUTLANDER Оригин...	2.4 LTR	170 N12	{'esp': True, 'airbag-driver': True, 'electro-...	бензин	...	ALLROAD_5_DOORS VARIATOR 2.4	вариатор	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	в Волгограде
125031	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	серый	['airbag-passenger', 'lock', 'electro-mirrors'...	Продажа от официального дилера ГК АВТОМИР Авто...	2.0 LTR	146 N12	{'airbag-driver': True, 'isofix': True, 'usb':...	бензин	...	ALLROAD_5_DOORS VARIATOR 2.0	вариатор	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	в Москве
19088 rows × 34 columns

add Codeadd Markdown
train_base.head(5)
bodyType	brand	color	fuelType	modelDate	name	numberOfDoors	productionDate	vehicleConfiguration	vehicleTransmission	...	Руль	Состояние	Владельцы	ПТС	Таможня	Владение	price	start_date	hidden	model
0	Седан	AUDI	040001	бензин	1990.0	2.8 MT (174 л.с.) 4WD	4.0	1991	SEDAN MECHANICAL 2.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	200000.0	2019-10-03T08:09:11Z	NaN	100
1	Седан	AUDI	EE1D19	бензин	1982.0	1.8 MT (90 л.с.)	4.0	1986	SEDAN MECHANICAL 1.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	60000.0	2020-09-06T06:49:40Z	NaN	100
2	Универсал 5 дв.	AUDI	0000CC	бензин	1988.0	2.3 MT (136 л.с.) 4WD	5.0	1989	WAGON_5_DOORS MECHANICAL 2.3	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	99000.0	2020-09-02T14:04:21Z	NaN	100
3	Седан	AUDI	CACECB	бензин	1988.0	1.8 MT (90 л.с.)	4.0	1989	SEDAN MECHANICAL 1.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	65000.0	2020-08-23T17:40:09Z	NaN	100
4	Седан	AUDI	040001	бензин	1990.0	2.0 MT (101 л.с.)	4.0	1991	SEDAN MECHANICAL 2.0	MECHANICAL	...	LEFT	NaN	3.0	DUPLICATE	True	NaN	100000.0	2020-09-08T09:22:07Z	NaN	100
5 rows × 26 columns

add Codeadd Markdown
train_base.info(5)
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 89378 entries, 0 to 89377
Data columns (total 26 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   bodyType              89377 non-null  object 
 1   brand                 89378 non-null  object 
 2   color                 89378 non-null  object 
 3   fuelType              89378 non-null  object 
 4   modelDate             89377 non-null  float64
 5   name                  89377 non-null  object 
 6   numberOfDoors         89377 non-null  float64
 7   productionDate        89378 non-null  int64  
 8   vehicleConfiguration  89377 non-null  object 
 9   vehicleTransmission   89377 non-null  object 
 10  engineDisplacement    89377 non-null  object 
 11  enginePower           89377 non-null  float64
 12  description           86124 non-null  object 
 13  mileage               89378 non-null  int64  
 14  Комплектация          89378 non-null  object 
 15  Привод                89377 non-null  object 
 16  Руль                  89378 non-null  object 
 17  Состояние             0 non-null      float64
 18  Владельцы             75790 non-null  float64
 19  ПТС                   89017 non-null  object 
 20  Таможня               89378 non-null  bool   
 21  Владение              29201 non-null  object 
 22  price                 88968 non-null  float64
 23  start_date            89378 non-null  object 
 24  hidden                0 non-null      float64
 25  model                 89378 non-null  object 
dtypes: bool(1), float64(7), int64(2), object(16)
memory usage: 17.1+ MB
add Codeadd Markdown
train_base.columns
Index(['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'name',
       'numberOfDoors', 'productionDate', 'vehicleConfiguration',
       'vehicleTransmission', 'engineDisplacement', 'enginePower',
       'description', 'mileage', 'Комплектация', 'Привод', 'Руль', 'Состояние',
       'Владельцы', 'ПТС', 'Таможня', 'Владение', 'price', 'start_date',
       'hidden', 'model'],
      dtype='object')
add Codeadd Markdown
train_base.drop_duplicates(subset=['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'name',
       'numberOfDoors', 'productionDate', 'vehicleConfiguration',
       'vehicleTransmission', 'engineDisplacement', 'enginePower',
       'description', 'mileage', 'Комплектация', 'Привод', 'Руль', 'Состояние',
       'Владельцы', 'ПТС', 'Таможня', 'Владение', 'price', 'start_date',
       'hidden', 'model'], keep = 'first', inplace = True)
add Codeadd Markdown
train_base
bodyType	brand	color	fuelType	modelDate	name	numberOfDoors	productionDate	vehicleConfiguration	vehicleTransmission	...	Руль	Состояние	Владельцы	ПТС	Таможня	Владение	price	start_date	hidden	model
0	Седан	AUDI	040001	бензин	1990.0	2.8 MT (174 л.с.) 4WD	4.0	1991	SEDAN MECHANICAL 2.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	200000.0	2019-10-03T08:09:11Z	NaN	100
1	Седан	AUDI	EE1D19	бензин	1982.0	1.8 MT (90 л.с.)	4.0	1986	SEDAN MECHANICAL 1.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	60000.0	2020-09-06T06:49:40Z	NaN	100
2	Универсал 5 дв.	AUDI	0000CC	бензин	1988.0	2.3 MT (136 л.с.) 4WD	5.0	1989	WAGON_5_DOORS MECHANICAL 2.3	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	99000.0	2020-09-02T14:04:21Z	NaN	100
3	Седан	AUDI	CACECB	бензин	1988.0	1.8 MT (90 л.с.)	4.0	1989	SEDAN MECHANICAL 1.8	MECHANICAL	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	65000.0	2020-08-23T17:40:09Z	NaN	100
4	Седан	AUDI	040001	бензин	1990.0	2.0 MT (101 л.с.)	4.0	1991	SEDAN MECHANICAL 2.0	MECHANICAL	...	LEFT	NaN	3.0	DUPLICATE	True	NaN	100000.0	2020-09-08T09:22:07Z	NaN	100
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
89373	Минивэн	SSANG_YONG	040001	дизель	2004.0	2.7d AT (163 л.с.) 4WD	5.0	2006	MINIVAN AUTOMATIC 2.7d	AUTOMATIC	...	LEFT	NaN	3.0	ORIGINAL	True	NaN	450000.0	2020-02-11T09:29:59Z	NaN	RODIUS
89374	Минивэн	SSANG_YONG	CACECB	дизель	2004.0	2.7d AT (163 л.с.) 4WD	5.0	2007	MINIVAN AUTOMATIC 2.7d	AUTOMATIC	...	LEFT	NaN	3.0	ORIGINAL	True	{'year': 2017, 'month': 2}	485000.0	2020-05-30T18:56:30Z	NaN	RODIUS
89375	Минивэн	SSANG_YONG	040001	дизель	2013.0	2.0d AT (149 л.с.) 4WD	5.0	2014	MINIVAN AUTOMATIC 2.0d	AUTOMATIC	...	LEFT	NaN	1.0	ORIGINAL	True	{'year': 2015, 'month': 12}	1090000.0	2020-08-30T14:39:15Z	NaN	STAVIC
89376	Минивэн	SSANG_YONG	97948F	дизель	2013.0	2.0d AT (149 л.с.) 4WD	5.0	2013	MINIVAN AUTOMATIC 2.0d	AUTOMATIC	...	LEFT	NaN	3.0	ORIGINAL	True	{'year': 2017, 'month': 10}	1180000.0	2019-05-14T15:43:20Z	NaN	STAVIC
89377	Минивэн	SSANG_YONG	FAFBFB	дизель	2013.0	2.0d AT (149 л.с.) 4WD	5.0	2014	MINIVAN AUTOMATIC 2.0d	AUTOMATIC	...	LEFT	NaN	2.0	ORIGINAL	True	{'year': 2018, 'month': 6}	1075000.0	2020-08-10T11:30:29Z	NaN	STAVIC
87264 rows × 26 columns

add Codeadd Markdown
test.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 34686 entries, 0 to 34685
Data columns (total 32 columns):
 #   Column                Non-Null Count  Dtype 
---  ------                --------------  ----- 
 0   bodyType              34686 non-null  object
 1   brand                 34686 non-null  object
 2   car_url               34686 non-null  object
 3   color                 34686 non-null  object
 4   complectation_dict    6418 non-null   object
 5   description           34686 non-null  object
 6   engineDisplacement    34686 non-null  object
 7   enginePower           34686 non-null  object
 8   equipment_dict        24690 non-null  object
 9   fuelType              34686 non-null  object
 10  image                 34686 non-null  object
 11  mileage               34686 non-null  int64 
 12  modelDate             34686 non-null  int64 
 13  model_info            34686 non-null  object
 14  model_name            34686 non-null  object
 15  name                  34686 non-null  object
 16  numberOfDoors         34686 non-null  int64 
 17  parsing_unixtime      34686 non-null  int64 
 18  priceCurrency         34686 non-null  object
 19  productionDate        34686 non-null  int64 
 20  sell_id               34686 non-null  int64 
 21  super_gen             34686 non-null  object
 22  vehicleConfiguration  34686 non-null  object
 23  vehicleTransmission   34686 non-null  object
 24  vendor                34686 non-null  object
 25  Владельцы             34686 non-null  object
 26  Владение              11995 non-null  object
 27  ПТС                   34685 non-null  object
 28  Привод                34686 non-null  object
 29  Руль                  34686 non-null  object
 30  Состояние             34686 non-null  object
 31  Таможня               34686 non-null  object
dtypes: int64(6), object(26)
memory usage: 8.5+ MB
add Codeadd Markdown
test.sample(10)
bodyType	brand	car_url	color	complectation_dict	description	engineDisplacement	enginePower	equipment_dict	fuelType	...	vehicleConfiguration	vehicleTransmission	vendor	Владельцы	Владение	ПТС	Привод	Руль	Состояние	Таможня
34205	седан	MERCEDES	https://auto.ru/cars/used/sale/mercedes/s_klas...	чёрный	{"id":"20891313","name":"S350 d 4MATIC","avail...	Отличное состояние. Дилерское обслуживание.	3.0 LTR	249 N12	{"cruise-control":true,"roller-blind-for-rear-...	дизель	...	SEDAN AUTOMATIC 3.0	автоматическая	EUROPEAN	3 или более	NaN	Дубликат	полный	Левый	Не требует ремонта	Растаможен
9786	хэтчбек 3 дв.	BMW	https://auto.ru/cars/used/sale/bmw/1er/1100716...	белый	NaN	Продаю свою крошку, которая меня не разу не по...	1.6 LTR	115 N12	NaN	бензин	...	HATCHBACK_3_DOORS AUTOMATIC 1.6	автоматическая	EUROPEAN	3 или более	11 месяцев	Оригинал	задний	Левый	Не требует ремонта	Растаможен
27877	седан	MITSUBISHI	https://auto.ru/cars/used/sale/mitsubishi/lanc...	чёрный	NaN	Автомобиль в идеальном техническом состоянии, ...	1.6 LTR	98 N12	NaN	бензин	...	SEDAN MECHANICAL 1.6	механическая	JAPANESE	3 или более	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен
5416	внедорожник 5 дв.	HONDA	https://auto.ru/cars/used/sale/honda/cr_v/1101...	серебристый	NaN	Для своих лет машина в очень хорошем состоянии...	2.0 LTR	147 N12	{"esp":true,"airbag-driver":true,"electro-wind...	бензин	...	ALLROAD_5_DOORS AUTOMATIC 2.0	автоматическая	JAPANESE	2 владельца	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
27193	хэтчбек 5 дв.	MITSUBISHI	https://auto.ru/cars/used/sale/mitsubishi/colt...	красный	NaN	Прочее: 1. Элементы экстерьера: 1. Салон: 6. Б...	1.3 LTR	95 N12	{"engine-proof":true,"alloy-wheel-disks":true,...	бензин	...	HATCHBACK_5_DOORS MECHANICAL 1.3	механическая	JAPANESE	3 или более	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен
26415	фургон	VOLKSWAGEN	https://auto.ru/cars/used/sale/volkswagen/tran...	синий	NaN	Продается автомобиль, служил как рабочая лошад...	1.9 LTR	104 N12	{"alloy-wheel-disks":true,"16-inch-wheels":tru...	дизель	...	VAN MECHANICAL 1.9	механическая	EUROPEAN	3 или более	3 года и 5 месяцев	Оригинал	передний	Левый	Не требует ремонта	Растаможен
23580	внедорожник 5 дв.	VOLKSWAGEN	https://auto.ru/cars/used/sale/volkswagen/tigu...	белый	NaN	При покупке автомобиля:\n► Возможна покупка ав...	1.4 LTR	150 N12	{"engine-proof":true,"asr":true,"tinted-glass"...	бензин	...	ALLROAD_5_DOORS ROBOT 1.4	роботизированная	EUROPEAN	1 владелец	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
24223	минивэн	VOLKSWAGEN	https://auto.ru/cars/used/sale/volkswagen/cara...	серый	{"id":"20959322","name":"Comfortline","availab...	Куплена и обслуживается у официального дилера....	2.0 LTR	140 N12	{"tinted-glass":true,"esp":true,"adaptive-ligh...	дизель	...	MINIVAN MECHANICAL 2.0	механическая	EUROPEAN	1 владелец	2 года и 10 месяцев	Оригинал	полный	Левый	Не требует ремонта	Растаможен
6190	внедорожник 5 дв.	HONDA	https://auto.ru/cars/used/sale/honda/hr_v/1091...	серебристый	NaN	Продаю автомобиль Honda hr-v от собственника. ...	1.6 LTR	105 N12	NaN	бензин	...	ALLROAD_5_DOORS VARIATOR 1.6	вариатор	JAPANESE	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
7403	внедорожник 5 дв.	VOLVO	https://auto.ru/cars/used/sale/volvo/xc60/1090...	коричневый	{"id":"8531313","name":"Summum","available_opt...	Автомобиль в хорошем состоянии. Полный привод....	2.4 LTR	163 N12	{"cruise-control":true,"esp":true,"usb":true,"...	дизель	...	ALLROAD_5_DOORS AUTOMATIC 2.4	автоматическая	EUROPEAN	2 владельца	9 лет и 4 месяца	Оригинал	полный	Левый	Не требует ремонта	Растаможен
10 rows × 32 columns

add Codeadd Markdown
test.duplicated(subset=['bodyType', 'brand', 'car_url', 'color', 'complectation_dict',
       'description', 'engineDisplacement', 'enginePower', 'equipment_dict',
       'fuelType', 'image', 'mileage', 'modelDate', 'model_info', 'model_name',
       'name', 'numberOfDoors', 'priceCurrency',
       'productionDate', 'sell_id', 'super_gen', 'vehicleConfiguration',
       'vehicleTransmission', 'vendor', 'Владельцы', 'Владение', 'ПТС',
       'Привод', 'Руль', 'Состояние', 'Таможня']).sum()
0
add Codeadd Markdown
# определяем, какие столбцы не вошли в датасет
drop_columns = []
for i in train_base.columns:
    if i not in train.columns:
        drop_columns.append(i)
add Codeadd Markdown
drop_columns_2 = []
for i in train.columns:
    if i not in train_base.columns:
        drop_columns_2.append(i)
add Codeadd Markdown
drop_columns_3 = []
for i in test.columns:
    if i not in train.columns:
        drop_columns_3.append(i)
add Codeadd Markdown
drop_columns_4 = []
for i in train.columns:
    if i not in test.columns:
        drop_columns_4.append(i)
add Codeadd Markdown
drop_columns_5 = []
for i in test.columns:
    if i not in train_base.columns:
        drop_columns_5.append(i)
add Codeadd Markdown
drop_columns_6 = []
for i in train_base.columns:
    if i not in train.columns:
        drop_columns_6.append(i)
add Codeadd Markdown
train_base.columns
Index(['bodyType', 'brand', 'color', 'fuelType', 'modelDate', 'name',
       'numberOfDoors', 'productionDate', 'vehicleConfiguration',
       'vehicleTransmission', 'engineDisplacement', 'enginePower',
       'description', 'mileage', 'Комплектация', 'Привод', 'Руль', 'Состояние',
       'Владельцы', 'ПТС', 'Таможня', 'Владение', 'price', 'start_date',
       'hidden', 'model'],
      dtype='object')
add Codeadd Markdown
train.columns
Index(['car_url', 'bodyType', 'brand', 'color', 'complectation_dict',
       'description', 'engineDisplacement', 'enginePower', 'equipment_dict',
       'fuelType', 'image', 'mileage', 'modelDate', 'model_name', 'name',
       'numberOfDoors', 'parsing_unixtime', 'price', 'priceCurrency',
       'productionDate', 'sell_id', 'views', 'date_added', 'super_gen',
       'vehicleConfiguration', 'vehicleTransmission', 'Владельцы', 'Владение',
       'ПТС', 'Привод', 'Руль', 'Состояние', 'Таможня', 'region'],
      dtype='object')
add Codeadd Markdown
test.columns
Index(['bodyType', 'brand', 'car_url', 'color', 'complectation_dict',
       'description', 'engineDisplacement', 'enginePower', 'equipment_dict',
       'fuelType', 'image', 'mileage', 'modelDate', 'model_info', 'model_name',
       'name', 'numberOfDoors', 'parsing_unixtime', 'priceCurrency',
       'productionDate', 'sell_id', 'super_gen', 'vehicleConfiguration',
       'vehicleTransmission', 'vendor', 'Владельцы', 'Владение', 'ПТС',
       'Привод', 'Руль', 'Состояние', 'Таможня'],
      dtype='object')
add Codeadd Markdown
# активируем функцию
drop_columns
['Комплектация', 'start_date', 'hidden', 'model']
add Codeadd Markdown
drop_columns_2
['car_url',
 'complectation_dict',
 'equipment_dict',
 'image',
 'model_name',
 'parsing_unixtime',
 'priceCurrency',
 'sell_id',
 'views',
 'date_added',
 'super_gen',
 'region']
add Codeadd Markdown
drop_columns_3
['model_info', 'vendor']
add Codeadd Markdown
drop_columns_4
['price', 'views', 'date_added', 'region']
add Codeadd Markdown
drop_columns_5
['car_url',
 'complectation_dict',
 'equipment_dict',
 'image',
 'model_info',
 'model_name',
 'parsing_unixtime',
 'priceCurrency',
 'sell_id',
 'super_gen',
 'vendor']
add Codeadd Markdown
drop_columns_6
['Комплектация', 'start_date', 'hidden', 'model']
add Codeadd Markdown
train_base.Комплектация.sample(10)
43673                                          {'id': '0'}
70446                                          {'id': '0'}
49908                                          {'id': '0'}
66614                                          {'id': '0'}
24658                                          {'id': '0'}
19849    {'id': '21145913', 'name': 'Titanium', 'availa...
87165                                          {'id': '0'}
51433    {'id': '20083125', 'name': 'LE High', 'availab...
31246                                          {'id': '0'}
66557                                          {'id': '0'}
Name: Комплектация, dtype: object
add Codeadd Markdown
train_base['Комплектация'].iloc[7318]
"{'id': '22261477', 'name': '630d xDrive M Sport Pro', 'available_options': ['multi-wheel', 'auto-park', 'airbag-passenger', 'navigation', 'decorative-interior-lighting', 'bas', 'lock', 'electro-mirrors', 'easy-trunk-opening', 'mirrors-heat', 'power-latching-doors', 'leather', 'driver-seat-memory', 'body-kit', 'glonass', 'front-seats-heat-vent', 'automatic-lighting-control', 'passenger-seat-updown', 'collision-prevention-assist', 'computer', 'high-beam-assist', 'seat-transformation', 'airbag-side', 'electronic-gage-panel', 'electro-trunk', 'auto-cruise', 'abs', 'wheel-leather', 'auto-mirrors', 'black-roof', 'asr', 'esp', 'adaptive-light', 'usb', 'audiosystem-tv', 'front-centre-armrest', 'front-seat-support', '20-inch-wheels', 'air-suspension', 'servo', 'drl', 'steering-wheel-gear-shift-paddles', 'electro-window-back', 'multizone-climate-control', 'park-assist-f', 'wheel-heat', 'led-lights', 'music-super', 'park-assist-r', 'knee-airbag', 'wireless-charger', 'airbag-driver', 'aux', 'projection-display', 'drive-mode-sys', 'electro-window-front', 'light-sensor', 'airbag-curtain', 'keyless-entry', 'passenger-seat-electric', 'paint-metallic', 'leather-gear-stick', 'start-button', 'rain-sensor', 'tyre-pressure', 'voice-recognition', 'front-seats-heat', 'power-child-locks-rear-doors', 'bluetooth', 'wheel-configuration2', 'wheel-configuration1', 'immo', '12v-socket', 'third-rear-headrest', '360-camera'], 'vendor_colors': [{'body_color_id': 22437771, 'mark_color_id': 21801967, 'name_ru': 'Серый алвит', 'hex_codes': ['665E5B'], 'color_type': 'METALLIC', 'stock_color': {'hex_code': '97948F', 'name_ru': 'серый'}, 'photos': [{'name': '34-front', 'sizes': {'orig': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/orig', 'wizardv3mr': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/wizardv3mr', 'wizardv3': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/wizardv3', 'cattouch': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/cattouch', 'small': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/small', '320x240': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/320x240', '1200x900': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/1200x900', '1200x900n': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/1200x900n', 'thumb_m': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/thumb_m', 'full': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/full', '832x624': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/832x624', '456x342': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/456x342', '120x90': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/120x90', '92x69': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/92x69', 'islandoff': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/islandoff', 'thumb_s': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/thumb_s', 'thumb_s_2x': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d391606614ae73a0d68b0441/thumb_s_2x'}}, {'name': '34-back', 'sizes': {'orig': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/orig', 'wizardv3mr': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/wizardv3mr', 'wizardv3': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/wizardv3', 'cattouch': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/cattouch', 'small': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/small', '320x240': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/320x240', '1200x900': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/1200x900', '1200x900n': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/1200x900n', 'thumb_m': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/thumb_m', 'full': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/full', '832x624': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/832x624', '456x342': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/456x342', '120x90': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/120x90', '92x69': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/92x69', 'islandoff': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/islandoff', 'thumb_s': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/thumb_s', 'thumb_s_2x': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3a564a47c50db4bddd0867f/thumb_s_2x'}}, {'name': 'side', 'sizes': {'orig': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/orig', 'wizardv3mr': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/wizardv3mr', 'wizardv3': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/wizardv3', 'cattouch': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/cattouch', 'small': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/small', '320x240': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/320x240', '1200x900': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/1200x900', '1200x900n': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/1200x900n', 'thumb_m': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/thumb_m', 'full': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/full', '832x624': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/832x624', '456x342': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/456x342', '120x90': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/120x90', '92x69': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/92x69', 'islandoff': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/islandoff', 'thumb_s': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/thumb_s', 'thumb_s_2x': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3b8f7059a08f38240013d5e/thumb_s_2x'}}, {'name': 'front', 'sizes': {'orig': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/orig', 'wizardv3mr': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/wizardv3mr', 'wizardv3': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/wizardv3', 'cattouch': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/cattouch', 'small': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/small', '320x240': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/320x240', '1200x900': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/1200x900', '1200x900n': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/1200x900n', 'thumb_m': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/thumb_m', 'full': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/full', '832x624': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/832x624', '456x342': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/456x342', '120x90': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/120x90', '92x69': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/92x69', 'islandoff': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/islandoff', 'thumb_s': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/thumb_s', 'thumb_s_2x': '//avatars.mds.yandex.net/get-verba/1540742/2a0000017371d3cb8a0a21c1563de8015121/thumb_s_2x'}}, {'name': 'back', 'sizes': {'orig': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/orig', 'wizardv3mr': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/wizardv3mr', 'wizardv3': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/wizardv3', 'cattouch': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/cattouch', 'small': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/small', '320x240': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/320x240', '1200x900': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/1200x900', '1200x900n': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/1200x900n', 'thumb_m': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/thumb_m', 'full': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/full', '832x624': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/832x624', '456x342': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/456x342', '120x90': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/120x90', '92x69': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/92x69', 'islandoff': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/islandoff', 'thumb_s': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/thumb_s', 'thumb_s_2x': '//avatars.mds.yandex.net/get-verba/787013/2a0000017371d3dfb19459caa579b6218fef/thumb_s_2x'}}], 'main_color': True}]}"
add Codeadd Markdown
Здесь много информации и той, которая есть в других колонках и уникальная, в дальнейшим возможно стоит поработать с этим признаком, но на данный момент удаляем

add Codeadd Markdown
train_base = train_base.drop('Комплектация', 1) 
add Codeadd Markdown
train_base.start_date.sample(3)
73955    2020-09-02T07:40:22Z
76658    2020-06-17T05:59:36Z
32516    2020-08-25T17:27:39Z
Name: start_date, dtype: object
add Codeadd Markdown
Тоже самое, что и date_added в test

add Codeadd Markdown
train['date_added'].sample(3)
82600    26 сентября
36532    25 сентября
83565    25 сентября
Name: date_added, dtype: object
add Codeadd Markdown
train_base.hidden.sample(3)
38068   NaN
78494   NaN
68478   NaN
Name: hidden, dtype: float64
add Codeadd Markdown
полностью пустой признак, удаляем

add Codeadd Markdown
train_base = train_base.drop('hidden', 1) 
add Codeadd Markdown
train_base.model.sample(3)
31574         QX4
60498     OCTAVIA
37890    SPORTAGE
Name: model, dtype: object
add Codeadd Markdown
тоже самое, что и model_name в test и train, надо переименовать

add Codeadd Markdown
train_base = train_base.rename(columns={'model': 'model_name'})
add Codeadd Markdown
train.complectation_dict.sample(10)
22602     ['sport-seats', 'airbag-passenger', 'lock', 'e...
117488    ['cruise-control', 'xenon', 'airbag-passenger'...
55295                                                    []
123703    ['cruise-control', 'multi-wheel', 'airbag-pass...
82319     ['cruise-control', 'multi-wheel', 'xenon', 'ai...
37090     ['cruise-control', 'sport-seats', 'multi-wheel...
58177                                                    []
20820     ['cruise-control', 'multi-wheel', 'airbag-pass...
76133                                                    []
112176    ['cruise-control', 'multi-wheel', 'heated-wash...
Name: complectation_dict, dtype: object
add Codeadd Markdown
train.equipment_dict.sample(10)
57322    {'cruise-control': True, 'asr': True, 'esp': T...
1072                                                    {}
44203    {'tinted-glass': True, 'esp': True, 'airbag-dr...
33782    {'cruise-control': True, 'asr': True, 'esp': T...
90729    {'esp': True, 'airbag-driver': True, 'isofix':...
58929    {'cruise-control': True, 'esp': True, 'adaptiv...
44323    {'cruise-control': True, 'tinted-glass': True,...
3183     {'tinted-glass': True, 'esp': True, 'aux': Tru...
39551    {'cruise-control': True, 'asr': True, 'tinted-...
97799    {'cruise-control': True, 'esp': True, 'airbag-...
Name: equipment_dict, dtype: object
add Codeadd Markdown
train.super_gen.sample(10)
59538    {'sale-data-attributes': {'asciiCat': 'cars', ...
33       {'sale-data-attributes': {'asciiCat': 'cars', ...
21794    {'sale-data-attributes': {'asciiCat': 'cars', ...
73495    {'sale-data-attributes': {'asciiCat': 'cars', ...
54334    {'sale-data-attributes': {'asciiCat': 'cars', ...
9247     {'sale-data-attributes': {'asciiCat': 'cars', ...
19975    {'sale-data-attributes': {'asciiCat': 'cars', ...
42171    {'sale-data-attributes': {'asciiCat': 'cars', ...
91174    {'sale-data-attributes': {'asciiCat': 'cars', ...
49802    {'sale-data-attributes': {'asciiCat': 'cars', ...
Name: super_gen, dtype: object
add Codeadd Markdown
test['vendor'].sample(10)
18013    EUROPEAN
2485     EUROPEAN
10920    EUROPEAN
10250    EUROPEAN
31198    EUROPEAN
22067    JAPANESE
13657    JAPANESE
16052    EUROPEAN
32548    JAPANESE
32432    JAPANESE
Name: vendor, dtype: object
add Codeadd Markdown
Данную информацию мы не собрали при парсинге, при этом логически, марки машин отчасти показывают страну производства, поэтому пока можем удалить этот столбец. В дальнейшим, можем добавить информацию, анализирую марки машин

add Codeadd Markdown
test = test.drop('vendor', 1) 
add Codeadd Markdown
test['model_info'].sample(10)
11194    {"code":"TERRANO","name":"Terrano","ru_name":"...
97       {"code":"OCTAVIA","name":"Octavia","ru_name":"...
13261    {"code":"MURANO","name":"Murano","ru_name":"Му...
4434     {"code":"Q5","name":"Q5","ru_name":"Ку5","morp...
28094    {"code":"LANCER","name":"Lancer","ru_name":"Ла...
2954     {"code":"A3","name":"A3","ru_name":"А3","morph...
4723     {"code":"Q7","name":"Q7","ru_name":"Ку7","morp...
1248     {"code":"OCTAVIA","name":"Octavia","ru_name":"...
32288    {"code":"OUTLANDER","name":"Outlander","ru_nam...
18908    {"code":"E_KLASSE","name":"E-Класс","ru_name":...
Name: model_info, dtype: object
add Codeadd Markdown
Данная информация есть в других ячейках, можем удалить. В дальнейшим мы увидем, что есть пропуски по моделям машин, опять же можно было бы проверить наличие данной информации в данном столбце, как будет больше времени, надо будет вернуться к этому

add Codeadd Markdown
test = test.drop('model_info', 1)
add Codeadd Markdown
Переменные views, region и date_added могут быть полезны, если в дальнейшим тестовая выборка пополнится данными признаками, но пока удаляем их

add Codeadd Markdown
train['views'].sample(10)
65450       NaN
31878     566.0
57253    1532.0
77983     800.0
27546     211.0
55565     130.0
65745     305.0
34605    1368.0
1966      772.0
36788    4438.0
Name: views, dtype: float64
add Codeadd Markdown
train = train.drop('views', 1)
add Codeadd Markdown
train = train.drop('date_added', 1)
add Codeadd Markdown
train_base = train_base.drop('start_date', 1)
add Codeadd Markdown
train['region'].sample(10)
84255         во Владивостоке
30400                в Москве
39768      в Санкт-Петербурге
68617                в Москве
114115               в Москве
100971               в Москве
55063                в Москве
12335            в Краснодаре
93049            в Краснодаре
54414            в Краснодаре
Name: region, dtype: object
add Codeadd Markdown
train = train.drop('region', 1)
add Codeadd Markdown
train_base.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 87264 entries, 0 to 89377
Data columns (total 23 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   bodyType              87263 non-null  object 
 1   brand                 87264 non-null  object 
 2   color                 87264 non-null  object 
 3   fuelType              87264 non-null  object 
 4   modelDate             87263 non-null  float64
 5   name                  87263 non-null  object 
 6   numberOfDoors         87263 non-null  float64
 7   productionDate        87264 non-null  int64  
 8   vehicleConfiguration  87263 non-null  object 
 9   vehicleTransmission   87263 non-null  object 
 10  engineDisplacement    87263 non-null  object 
 11  enginePower           87263 non-null  float64
 12  description           84031 non-null  object 
 13  mileage               87264 non-null  int64  
 14  Привод                87263 non-null  object 
 15  Руль                  87264 non-null  object 
 16  Состояние             0 non-null      float64
 17  Владельцы             75247 non-null  float64
 18  ПТС                   86907 non-null  object 
 19  Таможня               87264 non-null  bool   
 20  Владение              28994 non-null  object 
 21  price                 86854 non-null  float64
 22  model_name            87264 non-null  object 
dtypes: bool(1), float64(6), int64(2), object(14)
memory usage: 15.4+ MB
add Codeadd Markdown
Price
add Codeadd Markdown
train['price'].value_counts()
1195000.0    281
1245000.0    216
660000.0     186
1690000.0    178
165000.0     168
            ... 
2727000.0      1
1790000.0      1
2970000.0      1
1270000.0      1
1997000.0      1
Name: price, Length: 1172, dtype: int64
add Codeadd Markdown
train['price'].isnull().sum()
2230
add Codeadd Markdown
Так как цена наш целевой признак, мы удаляем строки, в которых нет цены

add Codeadd Markdown
train.dropna(subset=['price'], inplace=True)
add Codeadd Markdown
train.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 16858 entries, 0 to 125031
Data columns (total 31 columns):
 #   Column                Non-Null Count  Dtype  
---  ------                --------------  -----  
 0   car_url               16858 non-null  object 
 1   bodyType              16858 non-null  object 
 2   brand                 16858 non-null  object 
 3   color                 16858 non-null  object 
 4   complectation_dict    16858 non-null  object 
 5   description           16858 non-null  object 
 6   engineDisplacement    16858 non-null  object 
 7   enginePower           16858 non-null  object 
 8   equipment_dict        16858 non-null  object 
 9   fuelType              16858 non-null  object 
 10  image                 16854 non-null  object 
 11  mileage               15622 non-null  object 
 12  modelDate             16858 non-null  int64  
 13  model_name            15622 non-null  object 
 14  name                  16858 non-null  object 
 15  numberOfDoors         16858 non-null  int64  
 16  parsing_unixtime      16858 non-null  int64  
 17  price                 16858 non-null  float64
 18  priceCurrency         16858 non-null  object 
 19  productionDate        16858 non-null  int64  
 20  sell_id               16858 non-null  int64  
 21  super_gen             16858 non-null  object 
 22  vehicleConfiguration  16858 non-null  object 
 23  vehicleTransmission   16858 non-null  object 
 24  Владельцы             15622 non-null  object 
 25  Владение              2131 non-null   object 
 26  ПТС                   15622 non-null  object 
 27  Привод                15622 non-null  object 
 28  Руль                  15622 non-null  object 
 29  Состояние             15618 non-null  object 
 30  Таможня               15620 non-null  object 
dtypes: float64(1), int64(5), object(25)
memory usage: 4.1+ MB
add Codeadd Markdown
train
car_url	bodyType	brand	color	complectation_dict	description	engineDisplacement	enginePower	equipment_dict	fuelType	...	super_gen	vehicleConfiguration	vehicleTransmission	Владельцы	Владение	ПТС	Привод	Руль	Состояние	Таможня
0	https://auto.ru/cars/used/sale/honda/cr_v/1104...	внедорожник 5 дв.	HONDA	синий	[]	Автомобиль проверен и готов к эксплуатации Гар...	2.0 LTR	147 N12	{'alloy-wheel-disks': True, 'condition': True,...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS AUTOMATIC 2.0	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
1	https://auto.ru/cars/used/sale/honda/accord/11...	седан	HONDA	белый	[]	В автосалон не поставлю СПОЙЛЕР ПРОДАН Собстве...	2.0 LTR	150 N12	{'engine-proof': True, 'tinted-glass': True, '...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	SEDAN AUTOMATIC 2.0	автоматическая	3 или более	NaN	Дубликат	передний	Правый	Не требует ремонта	Растаможен
2	https://auto.ru/cars/used/sale/honda/crosstour...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'multi-wheel', 'airbag-pass...	Безопасность 8 Обзор 4 Комфорт 11 Элементы экс...	3.5 LTR	275 N12	{'cruise-control': True, 'esp': True, 'airbag-...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS AUTOMATIC 3.5	автоматическая	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
3	https://auto.ru/cars/new/group/honda/cr_v/2252...	внедорожник 5 дв.	HONDA	чёрный	['cruise-control', 'eco-leather', 'multi-wheel...	Поставка в сентябре 2021г Доп оборудование на ...	2.4 LTR	186 N12	{'cruise-control': True, 'asr': True, 'tinted-...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS VARIATOR 2.4	вариатор	NaN	NaN	NaN	NaN	NaN	NaN	NaN
4	https://auto.ru/cars/used/sale/honda/civic/110...	седан	HONDA	чёрный	['airbag-passenger', 'lock', 'electro-mirrors'...	Один владелец Для данного автомобиля действует...	1.8 LTR	140 N12	{'esp': True, 'airbag-driver': True, 'electro-...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	SEDAN AUTOMATIC 1.8	автоматическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
124961	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	красный	['airbag-passenger', 'lock', 'electro-mirrors'...	Код автомобиля Ю 73 Автомобиль принят по прогр...	2.0 LTR	146 N12	{'cruise-control': True, 'esp': True, 'airbag-...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS VARIATOR 2.0	вариатор	1 владелец	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
124974	https://auto.ru/cars/used/sale/mitsubishi/paje...	внедорожник 5 дв.	MITSUBISHI	белый	['cruise-control', 'multi-wheel', 'airbag-pass...	Автомобиль был принят в зачет по программе Tra...	3.0 LTR	178 N12	{'asr': True, 'tinted-glass': True, 'esp': Tru...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS AUTOMATIC 3.0	автоматическая	2 владельца	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
124979	https://auto.ru/cars/used/sale/mitsubishi/paje...	внедорожник 5 дв.	MITSUBISHI	бежевый	['cruise-control', 'xenon', 'airbag-passenger'...	Автомобиль приобретался у официального дилера ...	3.8 LTR	250 N12	{'cruise-control': True, 'engine-proof': True,...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS AUTOMATIC 3.8	автоматическая	3 или более	NaN	Дубликат	полный	Левый	Не требует ремонта	Растаможен
124981	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	синий	['xenon', 'airbag-passenger', 'lock', 'electro...	В продажу поступил MITSUBISHI OUTLANDER Оригин...	2.4 LTR	170 N12	{'esp': True, 'airbag-driver': True, 'electro-...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS VARIATOR 2.4	вариатор	3 или более	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен
125031	https://auto.ru/cars/used/sale/mitsubishi/outl...	внедорожник 5 дв.	MITSUBISHI	серый	['airbag-passenger', 'lock', 'electro-mirrors'...	Продажа от официального дилера ГК АВТОМИР Авто...	2.0 LTR	146 N12	{'airbag-driver': True, 'isofix': True, 'usb':...	бензин	...	{'sale-data-attributes': {'asciiCat': 'cars', ...	ALLROAD_5_DOORS VARIATOR 2.0	вариатор	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен
16858 rows × 31 columns

add Codeadd Markdown
train.price.describe()
count    1.685800e+04
mean     2.491070e+06
std      2.511004e+06
min      5.000000e+04
25%      9.990000e+05
50%      1.559000e+06
75%      3.280000e+06
max      2.980000e+07
Name: price, dtype: float64
add Codeadd Markdown
train['price'].sort_values()
13467       50000.0
13423       50000.0
13384       50000.0
13277       50000.0
25167       74000.0
            ...    
65974    22988600.0
66278    22988600.0
71987    25900000.0
71984    28700000.0
71986    29800000.0
Name: price, Length: 16858, dtype: float64
add Codeadd Markdown
train_base['price'].value_counts()
450000.0     1208
350000.0     1040
250000.0      986
550000.0      962
650000.0      937
             ... 
2295100.0       1
6015300.0       1
23000.0         1
7736100.0       1
3670000.0       1
Name: price, Length: 8168, dtype: int64
add Codeadd Markdown
train_base['price'].isnull().sum()
410
add Codeadd Markdown
train_base.dropna(subset=['price'], inplace=True)
add Codeadd Markdown
train_base.price.describe()
count    8.685400e+04
mean     1.260892e+06
std      1.923665e+06
min      1.600000e+04
25%      3.500000e+05
50%      6.490000e+05
75%      1.400000e+06
max      9.900000e+07
Name: price, dtype: float64
add Codeadd Markdown
train_base['price'].sort_values()
57256       16000.0
30232       20000.0
60216       20000.0
17470       21000.0
70782       23000.0
            ...    
86882    59087576.0
86878    59087576.0
86874    65435792.0
87213    68500000.0
56585    99000000.0
Name: price, Length: 86854, dtype: float64
add Codeadd Markdown
Data Preprocessing
add Codeadd Markdown
# список числовых переменных
num_cols = []
# список категориальных переменных
cat_cols = []
# список бинарных переменных
bin_cols = []
add Codeadd Markdown
train['sample'] = 1 # помечаем, где у нас трейн
train_base['sample'] = 1 # помечаем, где у нас трейн
test['sample'] = 0 # помечаем, где у нас тест
test['price'] = 0 # значение целевой переменной отсутствует для тестовой выборки
data = test.append(train, sort=False).reset_index(drop=True)
add Codeadd Markdown
data.head(5)
bodyType	brand	car_url	color	complectation_dict	description	engineDisplacement	enginePower	equipment_dict	fuelType	...	vehicleTransmission	Владельцы	Владение	ПТС	Привод	Руль	Состояние	Таможня	sample	price
0	лифтбек	SKODA	https://auto.ru/cars/used/sale/skoda/octavia/1...	синий	NaN	Все автомобили, представленные в продаже, прох...	1.2 LTR	105 N12	{"engine-proof":true,"tinted-glass":true,"airb...	бензин	...	роботизированная	3 или более	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
1	лифтбек	SKODA	https://auto.ru/cars/used/sale/skoda/octavia/1...	чёрный	NaN	ЛОТ: 01217195\nАвтопрага Север\nДанный автомоб...	1.6 LTR	110 N12	{"cruise-control":true,"asr":true,"esp":true,"...	бензин	...	механическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
2	лифтбек	SKODA	https://auto.ru/cars/used/sale/skoda/superb/11...	серый	{"id":"20026336","name":"Ambition","available_...	Все автомобили, представленные в продаже, прох...	1.8 LTR	152 N12	{"cruise-control":true,"tinted-glass":true,"es...	бензин	...	роботизированная	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
3	лифтбек	SKODA	https://auto.ru/cars/used/sale/skoda/octavia/1...	коричневый	{"id":"20803582","name":"Ambition","available_...	КОМПЛЕКТ ЗИМНЕЙ (ЛЕТНЕЙ) РЕЗИНЫ ПО СЕЗОНУ В ПО...	1.6 LTR	110 N12	{"cruise-control":true,"roller-blind-for-rear-...	бензин	...	автоматическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
4	лифтбек	SKODA	https://auto.ru/cars/used/sale/skoda/octavia/1...	белый	NaN	ЛОТ: 01220889\nАвтопрага Север\n\nВы можете по...	1.8 LTR	152 N12	{"cruise-control":true,"asr":true,"esp":true,"...	бензин	...	автоматическая	1 владелец	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
5 rows × 32 columns

add Codeadd Markdown
Я сначала соединила test и train, чтобы проверить, есть ли дубликаты по sell_id. Так как в train_base такого значения нет, то при объединение они одинаково заполнятся na

add Codeadd Markdown
data.duplicated(subset=['sell_id']).sum()
15311
add Codeadd Markdown
# Оставляем первые дубликаты, так как они тестовые
data.drop_duplicates(subset=['sell_id'], keep = 'first', inplace = True)
add Codeadd Markdown
data=data.append(train_base, sort=False).reset_index(drop=True)
add Codeadd Markdown
#Приведём колонки к одному виду названий
data.rename(columns={'bodyType': 'body_type',
                   'engineDisplacement': 'engine_displacement',
                   'enginePower': 'engine_power',
                   'fuelType': 'fuel_type',
                   'modelDate': 'model_date',
                   'numberOfDoors': 'number_of_doors',
                   'productionDate': 'production_date',
                   'vehicleConfiguration': 'vehicle_configuration',
                   'vehicleTransmission': 'vehicle_transmission',
                   'Владельцы': 'owners',
                   'Владение': 'ownership_time',
                   'ПТС': 'licence',
                   'Привод': 'type_of_drive',
                   'Руль': 'steering_wheel',
                    'Таможня': 'сustoms',
                    'Состояние': 'condition'
                    }, inplace=True)
add Codeadd Markdown
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 123087 entries, 0 to 123086
Data columns (total 32 columns):
 #   Column                 Non-Null Count   Dtype  
---  ------                 --------------   -----  
 0   body_type              123086 non-null  object 
 1   brand                  123087 non-null  object 
 2   car_url                36233 non-null   object 
 3   color                  123087 non-null  object 
 4   complectation_dict     7965 non-null    object 
 5   description            119874 non-null  object 
 6   engine_displacement    123086 non-null  object 
 7   engine_power           123086 non-null  object 
 8   equipment_dict         26237 non-null   object 
 9   fuel_type              123087 non-null  object 
 10  image                  36233 non-null   object 
 11  mileage                122854 non-null  object 
 12  model_date             123086 non-null  float64
 13  model_name             122854 non-null  object 
 14  name                   123086 non-null  object 
 15  number_of_doors        123086 non-null  float64
 16  parsing_unixtime       36233 non-null   float64
 17  priceCurrency          36233 non-null   object 
 18  production_date        123087 non-null  int64  
 19  sell_id                36233 non-null   float64
 20  super_gen              36233 non-null   object 
 21  vehicle_configuration  123086 non-null  object 
 22  vehicle_transmission   123086 non-null  object 
 23  owners                 110856 non-null  object 
 24  ownership_time         41040 non-null   object 
 25  licence                122496 non-null  object 
 26  type_of_drive          122853 non-null  object 
 27  steering_wheel         122854 non-null  object 
 28  condition              35999 non-null   object 
 29  сustoms                122852 non-null  object 
 30  sample                 123087 non-null  int64  
 31  price                  123087 non-null  float64
dtypes: float64(5), int64(2), object(25)
memory usage: 30.1+ MB
add Codeadd Markdown
data.sample(10)
body_type	brand	car_url	color	complectation_dict	description	engine_displacement	engine_power	equipment_dict	fuel_type	...	vehicle_transmission	owners	ownership_time	licence	type_of_drive	steering_wheel	condition	сustoms	sample	price
63559	Внедорожник 5 дв.	HYUNDAI	NaN	CACECB	NaN	Автомобиль полностью исправен, на ходу. Регули...	2.2d	197	NaN	дизель	...	AUTOMATIC	3	{'year': 2018, 'month': 3}	ORIGINAL	полный	LEFT	NaN	True	1	820000.0
7151	седан	VOLVO	https://auto.ru/cars/used/sale/volvo/s80/11012...	коричневый	{"id":"4733244","name":"Премиум","available_op...	Машина в отличном состоянии. За время эксплуат...	2.5 LTR	200 N12	{"cruise-control":true,"tinted-glass":true,"fr...	бензин	...	автоматическая	3 или более	6 лет и 6 месяцев	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
43404	Седан	BMW	NaN	C49648	NaN	На полном ходу	525i	150	NaN	бензин	...	MECHANICAL	3	{'year': 2019, 'month': 10}	ORIGINAL	задний	LEFT	NaN	True	1	85000.0
21672	внедорожник 5 дв.	TOYOTA	https://auto.ru/cars/used/sale/toyota/land_cru...	чёрный	NaN	2017 года на учете с 2018, идеальное состояние...	4.5 LTR	249 N12	NaN	дизель	...	автоматическая	2 владельца	NaN	Оригинал	полный	Левый	Не требует ремонта	Растаможен	0	0.0
73372	Внедорожник 5 дв.	KIA	NaN	EE1D19	NaN	1 владелец. Своевременное обслуживание. Пройде...	2.0	150	NaN	бензин	...	AUTOMATIC	1	{'year': 2018, 'month': 2}	ORIGINAL	передний	LEFT	NaN	True	1	1350000.0
32688	внедорожник 5 дв.	NISSAN	https://auto.ru/cars/used/sale/nissan/qashqai/...	белый	NaN	В комплектации автомобиля\n• Тип обивки салона...	1.2 LTR	115 N12	NaN	бензин	...	вариатор	3 или более	NaN	Оригинал	передний	Левый	Не требует ремонта	Растаможен	0	0.0
4603	седан	AUDI	https://auto.ru/cars/used/sale/audi/a4/1100647...	серебристый	NaN	Автомобиль в хорошем состоянии\nСтоит stage 2 ...	2.0 LTR	200 N12	NaN	бензин	...	автоматическая	3 или более	NaN	Дубликат	полный	Левый	Не требует ремонта	Растаможен	0	0.0
80493	Внедорожник 5 дв.	MITSUBISHI	NaN	040001	NaN	продам отличный джип комфортный и вместительны...	3.5	202	NaN	бензин	...	AUTOMATIC	3	NaN	ORIGINAL	полный	RIGHT	NaN	True	1	600000.0
62132	Минивэн	HYUNDAI	NaN	CACECB	NaN	Рабочее состояние автомобиля, все ТО пройдены,...	2.5d	145	NaN	дизель	...	AUTOMATIC	3	{'year': 2018, 'month': 5}	ORIGINAL	задний	LEFT	NaN	True	1	1050000.0
29698	хэтчбек 5 дв.	BMW	https://auto.ru/cars/used/sale/bmw/1er/1099955...	чёрный	NaN	BMW 116i (Е87) - 2010г.в., 115л.с. 1.6, немецк...	1.6 LTR	115 N12	{"engine-proof":true,"alloy-wheel-disks":true,...	бензин	...	автоматическая	3 или более	3 месяца	Оригинал	задний	Левый	Не требует ремонта	Растаможен	0	0.0
10 rows × 32 columns

add Codeadd Markdown
Pandas Profiling
Производим быстрый и углубленный EDA ещё не очищенных данных.

add Codeadd Markdown
pandas_profiling.ProfileReport(data)
Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found

Error displaying widget: model not found


add Codeadd Markdown
1) В датасете представлено 30 признака (без sample и price), из них:

категориальных переменных - 19,
числовых переменных - 6,
ссылки - 2,
bool - 2,
неподдерживаемых признаков - 4.
2) Больше всего пропусков в sell_id (70.6%), что логично, так как во втором трейне нет этой информации, и ownership time (66.7%), имеет смысл их удалить

3) Также сожем удалить константный признак priceCurrency, condition (+ в нём много прпусков)

Далее будем испольлзовать данные предоставленные pandas_profiling при обработки признакаов

add Codeadd Markdown
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 123087 entries, 0 to 123086
Data columns (total 32 columns):
 #   Column                 Non-Null Count   Dtype  
---  ------                 --------------   -----  
 0   body_type              123086 non-null  object 
 1   brand                  123087 non-null  object 
 2   car_url                36233 non-null   object 
 3   color                  123087 non-null  object 
 4   complectation_dict     7965 non-null    object 
 5   description            119874 non-null  object 
 6   engine_displacement    123086 non-null  object 
 7   engine_power           123086 non-null  object 
 8   equipment_dict         26237 non-null   object 
 9   fuel_type              123087 non-null  object 
 10  image                  36233 non-null   object 
 11  mileage                122854 non-null  object 
 12  model_date             123086 non-null  float64
 13  model_name             122854 non-null  object 
 14  name                   123086 non-null  object 
 15  number_of_doors        123086 non-null  float64
 16  parsing_unixtime       36233 non-null   float64
 17  priceCurrency          36233 non-null   object 
 18  production_date        123087 non-null  int64  
 19  sell_id                36233 non-null   float64
 20  super_gen              36233 non-null   object 
 21  vehicle_configuration  123086 non-null  object 
 22  vehicle_transmission   123086 non-null  object 
 23  owners                 110856 non-null  object 
 24  ownership_time         41040 non-null   object 
 25  licence                122496 non-null  object 
 26  type_of_drive          122853 non-null  object 
 27  steering_wheel         122854 non-null  object 
 28  condition              35999 non-null   object 
 29  сustoms                122852 non-null  object 
 30  sample                 123087 non-null  int64  
 31  price                  123087 non-null  float64
dtypes: float64(5), int64(2), object(25)
memory usage: 30.1+ MB
add Codeadd Markdown
data = data.drop('priceCurrency', 1)
add Codeadd Markdown
data = data.drop('ownership_time', 1)
add Codeadd Markdown
data = data.drop('sell_id', 1)
add Codeadd Markdown
data = data.drop('condition', 1)
add Codeadd Markdown
car_url, parsing_unixtime удаляем, они нам не нужны

add Codeadd Markdown
data = data.drop('car_url', 1)
add Codeadd Markdown
data = data.drop('parsing_unixtime', 1)
add Codeadd Markdown
vehicle_configuration - вся информация у нас есть в других столбцах удаляем

add Codeadd Markdown
data = data.drop('vehicle_configuration', 1)
add Codeadd Markdown
complectation_dict, equipment_dict, super_gen - это словари данных, сложны в обработке + с большим количеством пропусков, на данный момент удаляем. При наличие дополнительного времени стоит постараться вытащить дополнительную информацию

add Codeadd Markdown
data = data.drop('complectation_dict', 1)
add Codeadd Markdown
data = data.drop('equipment_dict', 1)
add Codeadd Markdown
data = data.drop('super_gen', 1)
add Codeadd Markdown
data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 123087 entries, 0 to 123086
Data columns (total 22 columns):
 #   Column                Non-Null Count   Dtype  
---  ------                --------------   -----  
 0   body_type             123086 non-null  object 
 1   brand                 123087 non-null  object 
 2   color                 123087 non-null  object 
 3   description           119874 non-null  object 
 4   engine_displacement   123086 non-null  object 
 5   engine_power          123086 non-null  object 
 6   fuel_type             123087 non-null  object 
 7   image                 36233 non-null   object 
 8   mileage               122854 non-null  object 
 9   model_date            123086 non-null  float64
 10  model_name            122854 non-null  object 
 11  name                  123086 non-null  object 
 12  number_of_doors       123086 non-null  float64
 13  production_date       123087 non-null  int64  
 14  vehicle_transmission  123086 non-null  object 
 15  owners                110856 non-null  object 
 16  licence               122496 non-null  object 
 17  type_of_drive         122853 non-null  object 
 18  steering_wheel        122854 non-null  object 
 19  сustoms               122852 non-null  object 
 20  sample                123087 non-null  int64  
 21  price                 123087 non-null  float64
dtypes: float64(3), int64(2), object(17)
memory usage: 20.7+ MB
add Codeadd Markdown
Посмотрим каждый признак

add Codeadd Markdown
Body_type
add Codeadd Markdown
Пропущенное значение 1, 192 варианта типа кузова. Посмотрим их

add Codeadd Markdown
data.body_type.value_counts()
Внедорожник 5 дв.              30575
Седан                          29920
седан                          13540
внедорожник 5 дв.              13085
Хэтчбек 5 дв.                   8561
                               ...  
Седан Latio                        1
Родстер Roadster                   1
Седан Axio                         1
Универсал 5 дв. XC                 1
Внедорожник 5 дв. Trackhawk        1
Name: body_type, Length: 192, dtype: int64
add Codeadd Markdown
data[data.body_type.isnull() == True]
body_type	brand	color	description	engine_displacement	engine_power	fuel_type	image	mileage	model_date	...	number_of_doors	production_date	vehicle_transmission	owners	licence	type_of_drive	steering_wheel	сustoms	sample	price
60173	NaN	HONDA	CACECB	Продаю Honda Civic Suttle 1989 г. выпуска, неу...	NaN	NaN	универсал	NaN	400000	NaN	...	NaN	1989	NaN	3	ORIGINAL	NaN	LEFT	True	1	120000.0
1 rows × 22 columns

add Codeadd Markdown
В этой строке очень мало ифнормации, удалим её

add Codeadd Markdown
data.dropna(subset=['body_type'], inplace=True) 
add Codeadd Markdown
data.body_type.isnull().sum()
0
add Codeadd Markdown
Можем убрать данные по количеству дверей (не теряя информации, так как в столбце количества дверей ,был всего один пропуск в той же строке, что и у body_type), что уменьшит количество вариаций.

add Codeadd Markdown
data['body_type'] = data['body_type'].astype(str).apply(lambda x: None if x.strip()=='' else x)
data['body_type'] = data.body_type.apply(lambda x: x.split(' ')[0].lower())
add Codeadd Markdown
data.body_type.value_counts()
седан            44729
внедорожник      44411
хэтчбек          13387
лифтбек           5639
универсал         4739
минивэн           3395
компактвэн        2564
купе              2136
пикап              899
купе-хардтоп       355
кабриолет          257
родстер            252
фургон             236
микровэн            31
седан-хардтоп       29
лимузин             12
тарга               11
фастбек              4
Name: body_type, dtype: int64
add Codeadd Markdown
#определяем его в "категориальные"
cat_cols.append('body_type')
add Codeadd Markdown
Brand
add Codeadd Markdown
Пропусков нет

add Codeadd Markdown
data.brand.value_counts()
MERCEDES      12034
BMW           11759
VOLKSWAGEN    11511
NISSAN        10175
TOYOTA         8726
AUDI           7429
MITSUBISHI     6621
SKODA          5615
HYUNDAI        5577
KIA            5511
FORD           4763
CHEVROLET      3588
VOLVO          3560
OPEL           3092
RENAULT        2682
HONDA          2418
MAZDA          2279
INFINITI       1945
LEXUS          1893
PEUGEOT        1609
LAND_ROVER     1597
CITROEN        1124
DAEWOO         1028
SUBARU          927
SUZUKI          855
SSANG_YONG      707
PORSCHE         699
CHERY           561
JEEP            461
GREAT_WALL      416
DODGE           412
CADILLAC        317
CHRYSLER        316
JAGUAR          306
MINI            303
GEELY           270
Name: brand, dtype: int64
add Codeadd Markdown
cat_cols.append('brand')
add Codeadd Markdown
Color
add Codeadd Markdown
Пропусков нет

add Codeadd Markdown
data.color.value_counts()
040001         24340
FAFBFB         15237
чёрный         11489
CACECB         11117
97948F         10527
0000CC          8604
белый           6502
EE1D19          4450
серебристый     4249
серый           4174
200204          3496
синий           3428
007F00          2557
C49648          1818
красный         1597
коричневый      1582
22A0F8          1384
зелёный          975
DEA522           765
660099           739
FFD600           694
бежевый          671
4A2197           596
FF8649           504
голубой          467
золотистый       270
пурпурный        257
фиолетовый       227
жёлтый           194
оранжевый        138
FFC0CB            25
розовый           13
Name: color, dtype: int64
add Codeadd Markdown
#Приведём цвета к одному знаминателю
color_dict = {'040001':'black', 
              'FAFBFB':'white',
              'CACECB':'silver',
              '97948F':'grey',
              'чёрный':'black',
              '0000CC':'blue',
              'белый':'white',
              '200204':'brown',
              'EE1D19':'red',
              'серебристый':'silver',
              'серый':'grey',
              'синий':'blue',
              '007F00':'green',
              'C49648':'beige',
              'красный':'red', 
              'коричневый':'brown',
              '22A0F8':'light_blue',
              'зелёный':'green',
              '660099':'purple',
              'DEA522':'gold',
              '4A2197':'violet',
              'бежевый':'beige',
              'FFD600':'yellow',
              'голубой':'light_blue',
              'FF8649':'orange',
              'золотистый':'gold',
              'пурпурный':'purple',
              'фиолетовый':'violet',
              'жёлтый':'yellow',
              'оранжевый':'orange',
              'FFC0CB':'pink',
              'розовый':'pink'
             }
data['color'] = data['color'].map(color_dict)
add Codeadd Markdown
data.color.value_counts()
black         35829
white         21739
silver        15366
grey          14701
blue          12032
red            6047
brown          5078
green          3532
beige          2489
light_blue     1851
gold           1035
purple          996
yellow          888
violet          823
orange          642
pink             38
Name: color, dtype: int64
add Codeadd Markdown
cat_cols.append('color')
add Codeadd Markdown
Description
add Codeadd Markdown
Если дополнительно поработать с данным признаком, можно также посмотреть уникальные слова, но на данный момент посмотрим количество символов

add Codeadd Markdown
data['description']=data['description'].fillna(0)
add Codeadd Markdown
# сгенерируем числовой признак - количество символов в описании
data['description_len'] = data.description.apply(lambda x: len(str(x)))
# сам description удалим
data = data.drop('description',axis=1)
add Codeadd Markdown
#Определим его как числовой признак
num_cols.append('description_len')
add Codeadd Markdown
Engine_displacement
add Codeadd Markdown
data['engine_displacement'].value_counts()
1.6         16637
2.0         12804
2.0 LTR      7858
1.4          5530
1.6 LTR      5144
            ...  
Electric        1
3.0hyb          1
116             1
Joy             1
8.2             1
Name: engine_displacement, Length: 589, dtype: int64
add Codeadd Markdown
data['engine_displacement'].unique()
array(['1.2 LTR', '1.6 LTR', '1.8 LTR', '2.0 LTR', '1.4 LTR', '1.3 LTR',
       '1.0 LTR', '3.6 LTR', '1.5 LTR', '1.9 LTR', '2.8 LTR', '1.1 LTR',
       '2.5 LTR', '4.2 LTR', '3.0 LTR', '4.0 LTR', '5.9 LTR', '2.7 LTR',
       '3.1 LTR', '2.4 LTR', '5.2 LTR', '3.2 LTR', '4.1 LTR', '6.3 LTR',
       '2.3 LTR', '6.0 LTR', '2.2 LTR', '3.7 LTR', '2.9 LTR', '5.0 LTR',
       '3.3 LTR', '2.1 LTR', '2.6 LTR', ' LTR', '3.5 LTR', '1.7 LTR',
       '0.7 LTR', '4.4 LTR', '4.8 LTR', '5.4 LTR', '6.6 LTR', '4.9 LTR',
       '3.8 LTR', '3.4 LTR', '3.9 LTR', '4.6 LTR', '5.6 LTR', '4.5 LTR',
       '5.5 LTR', '6.2 LTR', '4.7 LTR', '4.3 LTR', '5.8 LTR', '5.3 LTR',
       '5.7 LTR', '2.8', '1.8', '2.3', '2.0', '2.6', '2.2', 'S4', '2.0d',
       '2.5d', '1.9', '2.1', '2.4', '1.6', '1.9d', '1.6d', '1.3', '3.3',
       '1.4', '1.2d', 'ultra', '1.2', '3.2', '1.5', '8V', '3.1', '3.0d',
       '2.7d', '16V', '3.0', '7S-tronic', 'tiptronic', '40', '45', '55',
       '2.7', '4.2', 'S-tronic', 'Tiptronic', 'Long', '4.0', '60', '3.9d',
       '6.0', '3.7', '4.1d', '35', '8tiptronic', 'clean', '2.0hyb', '3.6',
       '5.9d', 'V10', 'V8', '2.5', '2.9', '5.0', '5.2', 'M135i', '116i',
       '120i', '118i', '135i', 'M140i', '125i', '120d', '130i', '118d',
       '218i', '220i', '220d', 'M235i', '218d', '216d', '335i', '320i',
       '318i', '318d', '320d', '316i', '328i', '330i', '325xi', '325i',
       '330d', '340i', '323i', '335d', '335xi', '330xi', '316', '315',
       '318', 'N46', '420d', '428i', '420i', '435i', '430i', '440i',
       '520d', '530d', '525i', '523i', '520i', '530i', '525d', '528i',
       '550i', '535d', 'M550i', 'M550d', '540i', '535i', '530xi', '530Li',
       '525xi', '518', '520Li', '528Li', '535xi', '545i', '524d', '518i',
       '535Li', '530xd', '630i', '640i', '650i', '640d', '630d', '620d',
       '635i', '645i', '750d', '740i', '730Ld', '750i', '750Li', '740Li',
       '730d', '730i', '750Ld', '730Li', '740d', 'M760Li', '740Ld',
       'Active', '760Li', '735i', '745d', '728i', '728Li', '760i', '745i',
       '745Li', '735Li', '733i', '725d', 'M850i', '840d', '840i', '850i',
       '94Ah', 'Electro', 'S', '0.7hyb', '1.5hyb', 'Competition', '4.4',
       '4.9', '18i', '20i', '18d', '20d', '25d', '28i', '23d', '25i',
       'sDrive18i', 'xDrive20i', 'xDrive18d', 'xDrive20d', '30d', 'M40d',
       '30i', '35i', 'M40i', '35d', 'M50d', '40i', '48i', '3.0sd', '50i',
       '3.0i', '40d', 'M50i', '4.4i', '4.8i', '3.0si', '4.8is', '40e',
       '4.6is', 'ActiveHybrid', '23i', '35is', '6.2', '4.5', '6.4', '4.6',
       '4.1', '8.2', 'ESV', '5.3', '5.7', '7.0', '6-speed', '5-speed',
       '1.1', '0.8', '3.4', '4.3', '8.1', '6.2d', 'SS', 'ZL1', '2.2d',
       'Stingray', 'Z06', '5.4', '3.8', '1.7', '6.6d', 'Double', '1.0',
       'EV', '7.5', '7.4', '6AT', '6.5d', '2.8d', 'EXT', '1.4hyb', 'SRT8',
       '3.5', 'Fifth', '6.8', '3.6hyb', 'SWB', 'Grand', '5-doors',
       'Донинвест', '1.4d', 'SensoDrive', 'Aircross', 'Triomphe',
       'Hydractive', 'CrossTourer', 'XL', '2.1d', 'Best', 'SRT-4', 'R__T',
       'Hellcat', 'SRT', '3.9', '4.7', 'Crew', '6.7d', 'SRT-10', '1.8d',
       '5.8', '7.3d', '2.3hyb', 'Sport', 'Raptor', 'SVT', 'KAT',
       'Electric', 'ST170', 'StreetKa', 'PowerShift', 'ST220', 'Shelby',
       '3.2d', 'SHO', 'LWB', 'Type', '0.7', 'Hybrid', 'AMT', 'Shuttle',
       'del', 'Spike', '1.3hyb', 'Spada', 'ТагАЗ', '1.5d', 'Prime',
       'Limousine', '1.7d', 'Classic', '2.6d', '2.9d', 'EX25', 'EX35',
       'EX37', 'FX37', 'FX35', 'FX50', 'FX45', 'FX30d', 'FX', 'G37',
       'G35', 'G25', 'G20', 'I30', 'JX35', 'M37', 'M35', 'M56', 'M25',
       'M45', 'Q45', '3.5hyb', '5.6', '2.5hyb', 'SVR', 'R', 'TrailHawk',
       'Trackhawk', '3.1d', '5.9', 'Trailhawk', '4-speed', '8-speed',
       '2.4hyb', 'GT', 'X-Line', '200h', '250', '200', '300', '350',
       '330', '300h', '450h', '430', '460', '470', '250h', '200t', '250C',
       '400', '600h', '500', '570', '450d', '450', '270', '400h', '350L',
       'Brawny', 'S-Wagon', 'Hard', 'Soft', 'John', 'Cooper', 'One',
       'Grandis', 'CZ1', 'CZ2', 'Plus', 'CZ3', '2.3d', 'VR-4', 'Easy',
       '2.4d', 'Super', 'Cedia', 'PHEV', 'Cubic', '30kWh', '1.2hyb',
       '4.2d', '4.8', 'Joy', 'Latio', 'GTC', '1.3d', 'C16NZ', '16LZ2',
       'X16SZR', 'CNG', 'GSi', 'Country', 'L', '+', '7', 'Carrera',
       'Turbo', '4', '4S', 'RS', '4.6hyb', 'Diesel', 'GTS', 'E-Hybrid',
       '2.9hyb', 'Europa', 'Campus', 'Be', 'Stepway', 'RX4', 'Conquest',
       '100', 'Scout', 'DSG7', 'DSG', 'ACT', 'tS', 'STi', 'S-Edition',
       'XV', 'XL-7', 'US', 'Japan', 'Gracia', 'Prominent', 'GT-Four',
       'Fielder', 'Axio', 'Ceres', 'Runx', 'i', 'SF', 'Premio', '1.8hyb',
       'Lucida', 'Emina', '3.3hyb', 'Regius', '4.5d', '3.4d', '105',
       'Cygnus', '78', '76', '79', '3.5d', '4.0d', '3.6d', 'Arctic',
       'Noah', 'Qualis', 'JDM', 'CrewMax', 'Ardeo', 'Multimode',
       'full-time', 'part-time', 'Maxi', 'BiFuel', 'Alltrack', 'EcoFuel',
       '4MOTION', 'e-Golf', 'VR6', 'GTI"35"', '5-Seater', '4-Seater',
       '4.9d', 'Cross', 'Allspace', '3.0hyb', 'Syncro', 'T-5R', 'Bi-Fuel',
       'XC', 'G3', 'G5', 'G1', '110', '130', 'Base', '90', 'Ingenium',
       'Supercharged', '4.4d', '9-speed', 'HST', '180', '160', '170',
       '220', '150', '140', '210', 'C', '63', '53', '43', '230', '240',
       '280', '320', '109', '550', '600', '420', '65', 'All-Terrain',
       '290', '50', 'Brabus', '560', '650', 'Pullman', '380', '260', 'L1',
       'L3', 'L2', 'Marco', '121', '113', '111', '119', '114', '112',
       '108', '115', '116', 'Sports'], dtype=object)
add Codeadd Markdown
# Смотрим машины у которых литраж обозначен просто как LTR
data[data['engine_displacement'] == ' LTR']
body_type	brand	color	engine_displacement	engine_power	fuel_type	image	mileage	model_date	model_name	...	production_date	vehicle_transmission	owners	licence	type_of_drive	steering_wheel	сustoms	sample	price	description_len
5241	внедорожник	AUDI	white	LTR	408 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	885	2018.0	E_TRON	...	2019	автоматическая	1 владелец	Оригинал	полный	Левый	Растаможен	0	0.0	1456
7992	хэтчбек	BMW	blue	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	32000	2017.0	I3	...	2018	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	125
8252	хэтчбек	BMW	grey	LTR	170 N12	электро	https://autoru.naydex.net/lICN99c69/9bc7d3Rr7k...	51000	2013.0	I3	...	2014	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	1422
8350	хэтчбек	BMW	white	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	25000	2017.0	I3	...	2018	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	2681
8684	хэтчбек	BMW	black	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	58500	2013.0	I3	...	2017	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	740
8722	хэтчбек	BMW	light_blue	LTR	170 N12	электро	https://autoru.naydex.net/lICN99c69/9bc7d3Rr7k...	28800	2013.0	I3	...	2017	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	3108
8917	хэтчбек	BMW	beige	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	39000	2013.0	I3	...	2017	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	467
10817	хэтчбек	BMW	grey	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	50359	2013.0	I3	...	2016	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	564
10936	хэтчбек	BMW	black	LTR	170 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	78000	2013.0	I3	...	2016	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	590
11043	хэтчбек	BMW	grey	LTR	170 N12	электро	https://autoru.naydex.net/ys1kR7800/fbd964zfcB...	20000	2013.0	I3	...	2017	автоматическая	1 владелец	Оригинал	задний	Левый	Растаможен	0	0.0	2787
11302	хэтчбек	NISSAN	light_blue	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	91357	2010.0	LEAF	...	2011	автоматическая	3 или более	Оригинал	передний	Левый	Растаможен	0	0.0	87
11682	хэтчбек	NISSAN	white	LTR	150 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	9000	2017.0	LEAF	...	2018	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	97
11714	хэтчбек	NISSAN	white	LTR	150 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	14800	2017.0	LEAF	...	2017	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	443
11719	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	102000	2010.0	LEAF	...	2011	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	454
11754	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	34500	2010.0	LEAF	...	2011	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	206
11878	хэтчбек	NISSAN	silver	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	66000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	501
11974	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	40000	2010.0	LEAF	...	2011	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	679
12072	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	52755	2010.0	LEAF	...	2012	автоматическая	3 или более	Оригинал	передний	Правый	Растаможен	0	0.0	2879
12085	хэтчбек	NISSAN	light_blue	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	26100	2010.0	LEAF	...	2015	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	801
12100	хэтчбек	NISSAN	grey	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	26000	2010.0	LEAF	...	2016	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	428
12250	хэтчбек	NISSAN	grey	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	63000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	693
12287	хэтчбек	NISSAN	light_blue	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	45000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	471
12334	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	48320	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	382
12466	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	52000	2010.0	LEAF	...	2016	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	1835
12481	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	145000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	1094
12558	хэтчбек	NISSAN	silver	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	53000	2010.0	LEAF	...	2011	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	1070
12582	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	42500	2010.0	LEAF	...	2015	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	850
12678	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	34000	2010.0	LEAF	...	2014	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	814
12749	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	74000	2010.0	LEAF	...	2015	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	592
12854	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	100000	2010.0	LEAF	...	2011	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	947
12916	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	81100	2010.0	LEAF	...	2014	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	657
12948	хэтчбек	NISSAN	silver	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	57000	2010.0	LEAF	...	2014	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	558
12950	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	59000	2010.0	LEAF	...	2014	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	68
13052	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	55000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	689
13104	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	104000	2010.0	LEAF	...	2014	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	1766
13105	хэтчбек	NISSAN	silver	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	134000	2010.0	LEAF	...	2012	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	56
13478	хэтчбек	NISSAN	red	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	48000	2010.0	LEAF	...	2016	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	611
13633	хэтчбек	NISSAN	blue	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	103238	2010.0	LEAF	...	2012	автоматическая	2 владельца	Оригинал	передний	Левый	Растаможен	0	0.0	617
13660	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	66000	2010.0	LEAF	...	2012	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	65
13720	хэтчбек	NISSAN	red	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	57000	2010.0	LEAF	...	2012	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	174
13812	хэтчбек	NISSAN	light_blue	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	71500	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	172
13915	хэтчбек	NISSAN	red	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	26100	2010.0	LEAF	...	2016	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	339
13952	хэтчбек	NISSAN	white	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	87000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	180
13989	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	45364	2010.0	LEAF	...	2014	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	285
14147	хэтчбек	NISSAN	grey	LTR	109 N12	электро	https://autoru.naydex.net/G87gDZg56/28c7a8vqVE...	710000	2010.0	LEAF	...	2013	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	746
14419	хэтчбек	NISSAN	grey	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	78000	2010.0	LEAF	...	2014	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	1119
23869	хэтчбек	VOLKSWAGEN	black	LTR	115 N12	электро	https://autoru.naydex.net/o9DBXQ270/5ac010hAY0...	27000	2012.0	GOLF	...	2016	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	1328
23948	хэтчбек	VOLKSWAGEN	white	LTR	115 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	12638	2012.0	GOLF	...	2014	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	1100
27064	хэтчбек	MITSUBISHI	white	LTR	67 N12	электро	https://autoru.naydex.net/mcQh17801/f1b5751dCi...	40000	2010.0	I_MIEV	...	2016	автоматическая	2 владельца	Оригинал	задний	Левый	Растаможен	0	0.0	264
28241	хэтчбек	MITSUBISHI	silver	LTR	67 N12	электро	https://autoru.naydex.net/mcQh17801/f1b5751dCi...	38550	2010.0	I_MIEV	...	2012	автоматическая	2 владельца	Оригинал	задний	Правый	Растаможен	0	0.0	729
32668	хэтчбек	NISSAN	black	LTR	150 N12	электро	https://autoru.naydex.net/1xsMU7627/eea2057RFg...	100	2017.0	LEAF	...	2018	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	0	0.0	1970
32700	хэтчбек	NISSAN	light_blue	LTR	109 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	29500	2010.0	LEAF	...	2011	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	221
32798	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/1xsMU7627/eea2057RFg...	50000	2010.0	LEAF	...	2013	автоматическая	1 владелец	Оригинал	передний	Правый	Растаможен	0	0.0	23
34159	хэтчбек	MERCEDES	white	LTR	179 N12	электро	https://autoru.naydex.net/O1Iap7626/e63034lCq/...	28900	2014.0	B_KLASSE	...	2016	автоматическая	2 владельца	Оригинал	передний	Левый	Растаможен	0	0.0	564
34504	хэтчбек	NISSAN	black	LTR	109 N12	электро	https://autoru.naydex.net/16IvE9y79/a7f8demo/N...	103075	2010.0	LEAF	...	2013	автоматическая	2 владельца	Оригинал	передний	Правый	Растаможен	0	0.0	41
34946	внедорожник	AUDI	blue	LTR	408 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	NaN	2018.0	NaN	...	2021	автоматическая	NaN	NaN	NaN	NaN	NaN	1	7801000.0	1176
35060	внедорожник	AUDI	white	LTR	408 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	11 000 км	2018.0	e-tron	...	2019	автоматическая	1 владелец	Оригинал	полный	Левый	NaN	1	5990000.0	2327
35643	внедорожник	MERCEDES	white	LTR	408 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	4 326 км	2019.0	EQC	...	2019	автоматическая	1 владелец	Оригинал	полный	Левый	Растаможен	1	7000000.0	299
35674	внедорожник	MERCEDES	silver	LTR	408 N12	электро	https://avatars.mds.yandex.net/get-autoru-vos/...	5 300 км	2019.0	EQC	...	2019	автоматическая	1 владелец	Оригинал	полный	Левый	Растаможен	1	6700000.0	3251
36028	хэтчбек	VOLKSWAGEN	white	LTR	115 N12	электро	https://autoru.naydex.net/T171DRu50/b651fb4jRP...	9 150 км	2012.0	Golf	...	2017	автоматическая	1 владелец	Оригинал	передний	Левый	Растаможен	1	1690000.0	272
60 rows × 22 columns

add Codeadd Markdown
data[data['engine_displacement']==' LTR'].fuel_type.value_counts()
электро    60
Name: fuel_type, dtype: int64
add Codeadd Markdown
Машины все электрические, поэтому у них просто нет литража, можем заменить на 0

add Codeadd Markdown
data['engine_displacement'] = data['engine_displacement'].apply(lambda x: '0 LTR' if x == 'LTR' or x==' LTR' else x)
add Codeadd Markdown
# оставим только числовые данные.
data['engine_displacement'] = data['engine_displacement'].astype(str)
data['engine_displacement'] = data['engine_displacement'].str.extract(
    '(\d.\d)', expand=False).str.strip()
# Заменим все некорректные числа(объём двигателя в литрах) более 10 на None, при наличие времени, можно точечено найти информацию про литражи
data['engine_displacement'] = data['engine_displacement'].apply(
    lambda x: None if float(x) > 10 else x).astype(float)
add Codeadd Markdown
data['engine_displacement'].unique()
array([1.2, 1.6, 1.8, 2. , 1.4, 1.3, 1. , 3.6, 1.5, 1.9, 2.8, 1.1, 2.5,
       4.2, 3. , 4. , 5.9, 2.7, 3.1, 2.4, 5.2, 3.2, 4.1, 6.3, 2.3, 6. ,
       2.2, 3.7, 2.9, 5. , 3.3, 2.1, 2.6, nan, 3.5, 1.7, 0.7, 4.4, 4.8,
       5.4, 6.6, 4.9, 3.8, 3.4, 3.9, 4.6, 5.6, 4.5, 5.5, 6.2, 4.7, 4.3,
       5.8, 5.3, 5.7, 6.4, 8.2, 7. , 0.8, 8.1, 7.5, 7.4, 6.5, 6.8, 6.7,
       7.3])
add Codeadd Markdown
data['engine_displacement'].value_counts()
2.0    22718
1.6    21965
1.8     8606
1.4     7299
3.0     6818
       ...  
6.5        1
6.7        1
8.1        1
8.2        1
7.4        1
Name: engine_displacement, Length: 65, dtype: int64
add Codeadd Markdown
data['engine_displacement'].isnull().sum()
20356
add Codeadd Markdown
data['engine_displacement']=data['engine_displacement'].fillna("2.0")
add Codeadd Markdown
# Приведем значение признака  в float
data['engine_displacement'] = data['engine_displacement'].astype('float64')
add Codeadd Markdown
num_cols.append('engine_displacement')
add Codeadd Markdown
Engine_power
add Codeadd Markdown
1 пропуск, и pandasprofiling не может прочитать этот признак

add Codeadd Markdown
data.engine_power.value_counts()
150.0      6824
249.0      3471
140.0      2837
105.0      2338
123.0      2184
           ... 
30 N12        1
383 N12       1
164 N12       1
303 N12       1
11.0          1
Name: engine_power, Length: 716, dtype: int64
add Codeadd Markdown
# Преобразовываем значения столбца, избавляемся от N12
data['engine_power'] = data['engine_power'].astype(str)
data['engine_power'] = data['engine_power'].apply(lambda x: float(x.split(" ")[0]))
add Codeadd Markdown
data.engine_power.value_counts()
150.0    8677
249.0    5339
140.0    3812
105.0    3322
110.0    3057
         ... 
251.0       1
481.0       1
537.0       1
700.0       1
526.0       1
Name: engine_power, Length: 401, dtype: int64
add Codeadd Markdown
data.engine_power.unique()
array([105., 110., 152., 200., 102., 150.,  90., 180., 220., 122.,  70.,
       140., 125.,  54.,  86.,  75.,  64.,  95., 260., 170.,  80.,  68.,
       160., 115., 280.,  53.,  60., 143.,  42., 101.,  58., 193.,  79.,
        30., 100.,  50., 163., 225., 420., 211., 245., 560., 500., 249.,
       450., 605., 250., 354., 120., 290., 230., 350., 204., 255., 340.,
       177., 272., 372., 210., 130., 300., 190., 239., 435., 333., 271.,
       326., 238., 310., 233., 252., 133., 460., 520., 400., 525., 367.,
       265., 550., 580.,  88., 165., 430., 335., 174., 224., 136., 256.,
       338., 112., 218., 360.,  93., 182., 113., 240., 270., 137., 155.,
        61., 254., 116.,  71., 285., 408., 166., 156., 257., 201., 162.,
       194., 142., 154., 147., 281., 243., 118., 128.,  91.,  83., 205.,
       247., 188., 295., 275.,  78., 109.,  94., 185., 258., 145., 132.,
       135.,  52.,  66., 124.,  98., 215., 158.,  99., 103., 131., 126.,
       235., 181., 315., 203., 231.,  82., 304., 175., 320., 213., 144.,
       146., 151., 111., 286., 306., 107., 184., 313., 264., 575., 407.,
       192., 129., 555., 625., 329., 370., 381., 269., 600., 510., 544.,
       462., 355., 507., 609., 431., 530., 387., 610., 197., 343., 445.,
       171.,  51.,  46., 347., 321., 167., 141., 169., 405., 117., 114.,
       173., 234., 540., 106.,  49., 248., 317., 309.,  97., 121., 268.,
       149.,  87.,  85.,  65.,  67., 127., 485., 186., 222., 307., 262.,
       302., 284., 325., 168., 221., 330., 283., 328., 303., 278., 388.,
       571., 585., 612., 401., 279., 455., 382., 557., 517., 394., 422.,
       292., 469., 522., 296., 639., 390., 476., 630., 402., 487., 558.,
       421., 316., 514., 457., 626., 242.,  38.,  32., 223.,  72., 305.,
       183., 273., 159.,  76., 148., 179.,  73., 277., 282., 178., 288.,
       199., 266.,  92.,  74., 324., 232., 157.,  69., 212., 276., 202.,
        77., 164.,  96.,  84., 228., 108., 208., 263., 294., 318., 380.,
       219., 214., 383., 241.,  57.,  55., 104.,  48.,  40.,  44., 227.,
       139., 209., 195., 189., 480., 591., 301., 410., 481., 537., 415.,
       187., 226., 311., 322., 564., 409., 426., 349., 299., 314., 119.,
       161., 589., 312., 172., 466., 495., 513., 437., 365., 323., 345.,
       403.,  63., 359., 396., 425., 253., 237., 287., 138., 207.,  41.,
       251., 717., 492., 395., 702., 470., 123., 411., 375., 385.,  20.,
       526., 662., 412.,  56., 334., 373.,  81., 198., 196., 298., 416.,
       363., 468., 352., 274.,  62., 424., 261., 477., 244., 153.,  45.,
        89., 475., 608., 440., 570., 521., 761., 680.,  17.,  11., 236.,
       134., 565., 339., 700., 800.])
add Codeadd Markdown
# Приведем значение признака  в int
data['engine_power'] = data['engine_power'].astype('int64')
add Codeadd Markdown
num_cols.append('engine_power')
add Codeadd Markdown
Fuel_type
add Codeadd Markdown
Пропущенных значений нет, 6 уникальных значений

add Codeadd Markdown
data.fuel_type.value_counts()
бензин     102837
дизель      19543
гибрид        519
электро       169
газ            18
Name: fuel_type, dtype: int64
add Codeadd Markdown
cat_cols.append('fuel_type')
add Codeadd Markdown
Image
add Codeadd Markdown
Можно посмотреть влияет ли уникальность(реальность) фотографии на целевой признак

add Codeadd Markdown
data['image'].isnull().sum()
86853
add Codeadd Markdown
# Посмотрим на запись
display(data[data.image.isnull() == True])
body_type	brand	color	engine_displacement	engine_power	fuel_type	image	mileage	model_date	model_name	...	production_date	vehicle_transmission	owners	licence	type_of_drive	steering_wheel	сustoms	sample	price	description_len
36233	седан	AUDI	black	2.8	174	бензин	NaN	350000	1990.0	100	...	1991	MECHANICAL	3	ORIGINAL	полный	LEFT	True	1	200000.0	228
36234	седан	AUDI	red	1.8	90	бензин	NaN	173424	1982.0	100	...	1986	MECHANICAL	3	ORIGINAL	передний	LEFT	True	1	60000.0	132
36235	универсал	AUDI	blue	2.3	136	бензин	NaN	230000	1988.0	100	...	1989	MECHANICAL	3	ORIGINAL	полный	LEFT	True	1	99000.0	1147
36236	седан	AUDI	silver	1.8	90	бензин	NaN	240000	1988.0	100	...	1989	MECHANICAL	3	ORIGINAL	передний	LEFT	True	1	65000.0	1
36237	седан	AUDI	black	2.0	101	бензин	NaN	300000	1990.0	100	...	1991	MECHANICAL	3	DUPLICATE	передний	LEFT	True	1	100000.0	204
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
123082	минивэн	SSANG_YONG	black	2.7	163	дизель	NaN	260000	2004.0	RODIUS	...	2006	AUTOMATIC	3	ORIGINAL	полный	LEFT	True	1	450000.0	197
123083	минивэн	SSANG_YONG	silver	2.7	163	дизель	NaN	300000	2004.0	RODIUS	...	2007	AUTOMATIC	3	ORIGINAL	полный	LEFT	True	1	485000.0	522
123084	минивэн	SSANG_YONG	black	2.0	149	дизель	NaN	126000	2013.0	STAVIC	...	2014	AUTOMATIC	1	ORIGINAL	полный	LEFT	True	1	1090000.0	201
123085	минивэн	SSANG_YONG	grey	2.0	149	дизель	NaN	84000	2013.0	STAVIC	...	2013	AUTOMATIC	3	ORIGINAL	полный	LEFT	True	1	1180000.0	1682
123086	минивэн	SSANG_YONG	white	2.0	149	дизель	NaN	144000	2013.0	STAVIC	...	2014	AUTOMATIC	2	ORIGINAL	полный	LEFT	True	1	1075000.0	332
86853 rows × 22 columns

add Codeadd Markdown
Так как отсутсвие изображения можно расценивать как отсутствие оригинальной фотографии, то заполняем пропуски самым встречающимся значением

add Codeadd Markdown
data.image.value_counts()
https://avatars.mds.yandex.net/get-verba/216201/2a000001609d0005e0912c12a896bbda4ab1/wizardv3mr                                                                                                                                  13
https://avatars.mds.yandex.net/get-verba/216201/2a000001609bda17487cc63d8b957ab4aab2/wizardv3mr                                                                                                                                   9
https://avatars.mds.yandex.net/get-verba/787013/2a000001609d6c09eb305345ee1ea7e7bd15/wizardv3mr                                                                                                                                   8
https://avatars.mds.yandex.net/get-verba/1030388/2a000001609cf6746b94cf8334836265daaf/wizardv3mr                                                                                                                                  8
https://avatars.mds.yandex.net/get-verba/787013/2a000001609ceeb68cbe6dd25fd2629211da/wizardv3mr                                                                                                                                   7
                                                                                                                                                                                                                                 ..
https://autoru.naydex.net/ESooa9149/468b9eoMemRk/qYMsjh4E8B__rflVJVfy7b1b-wUX9sx_4S5vynlzIYdgyUPy5qLsUgPJhqoDWScThTCc_-DHXKZ7FkA_GB4VVcwXzRtKAXFKewnY4OBjo5moX-5wY3OpuvVpbEg6JdJkwqsgoSCTnfJ3yEKeNa9GBrOQOYznp0qXTMAjiL2w#DSD     1
https://avatars.mds.yandex.net/get-autoru-vos/2188061/237bee6ed2949b560048c24ca81276a0/320x240                                                                                                                                    1
https://autoru.naydex.net/O1Iap7626/e63034lCq/jOT626mlFgjShUmjB18U5YZQ6pDFlm0ZNJRBaZA5FS19bXzhT39SvieEEnYW234vpuul9RcACAfPMf5C1Nspq4n8ouPIgQcZl4gp_gp-eOyWCcKdwMswOG3lBHhQ2YX4wZWUederozJ77A92a_JPngKmgMzi5QTDmoTHPpT2SKQ#DSD     1
https://avatars.mds.yandex.net/get-autoru-vos/2130267/f470e35809e89f4288121219fdbd8c04/320x240                                                                                                                                    1
https://autoru.naydex.net/mcQh17801/f1b5751dCi/ZpAxhySp-6XA9ZRjLXnaIoWog-BkhRn4qCmMkbY1cVFQTXjgtBoYX89n68dzf0C9CmN63B0K74kZl27dNtuT4yDXO5s7_-jx1fHfI2Fxjzea4tOhM9JRrvR4yOGOEUQ-bndexoEme0jVYKvbMD0m2xoLPYtIWrrAE-YChibU1w#DSD     1
Name: image, Length: 36102, dtype: int64
add Codeadd Markdown
data['image']=data['image'].fillna(data['image'].mode()[0])
add Codeadd Markdown
data['image'].isnull().sum()
0
add Codeadd Markdown
data['real_photo'] = data.image.apply(lambda x: x.find('get-verba') == -1)
add Codeadd Markdown
data['real_photo'].value_counts()
False    87157
True     35929
Name: real_photo, dtype: int64
add Codeadd Markdown
data = data.drop('image',axis=1)
add Codeadd Markdown
bin_cols.append('real_photo')
add Codeadd Markdown
Mileage
add Codeadd Markdown
Pandas Profiling не смог дать нам информацию по данному признаку, будем смотреть почему

add Codeadd Markdown
data.mileage.isnull().sum()
233
add Codeadd Markdown
# Проверим километраж относительно даты выпуска машины
data[data.mileage.isnull()== True].production_date.value_counts()
2021    228
2019      3
2020      2
Name: production_date, dtype: int64
add Codeadd Markdown
Судя по всему это новые машины, поэтому пробега нет, заполняем пропуски нулями

add Codeadd Markdown
data.mileage=data.mileage.fillna("0")
add Codeadd Markdown
data.mileage.value_counts()
0         11998
200000     1567
150000     1413
180000     1236
160000     1197
          ...  
171124        1
105590        1
40056         1
302201        1
162431        1
Name: mileage, Length: 25348, dtype: int64
add Codeadd Markdown
data.mileage.sample()
20883    275000
Name: mileage, dtype: object
add Codeadd Markdown
При попытке перевести в числовой формат на данном этапе появилась ошибка, что есть буквы км. При просмотре sample можно увидеть данные значения. Уберём лишнее

add Codeadd Markdown
data['mileage'] = data['mileage'].apply(lambda x: str(x).replace('км', '').replace('\xa0', ' '))
add Codeadd Markdown
data['mileage'].unique()
array(['74000', '60563', '88000', ..., '262800', '106124', '191768'],
      dtype=object)
add Codeadd Markdown
# Убираем оставшиеся пробелы
data['mileage'] = data['mileage'].apply(lambda x: str(x).replace(' ', ''))
add Codeadd Markdown
data.mileage.value_counts()
0         12231
200000     1572
150000     1419
180000     1240
160000     1205
          ...  
83397         1
94631         1
50287         1
27216         1
2956          1
Name: mileage, Length: 24942, dtype: int64
add Codeadd Markdown
# Преобразуем mileage в int
data['mileage'] = data['mileage'].astype('int64')
add Codeadd Markdown
num_cols.append('mileage')
add Codeadd Markdown
Model_date
add Codeadd Markdown
1 пропуск, мы его убрали ранее, 79 уникальных значений. Сильная корреляция с productionDate. В дальнейшим можем рассмотерть данные признаки для создания новых

add Codeadd Markdown
data.model_date.sort_values()
16944     1904.0
121800    1904.0
58285     1908.0
58284     1908.0
58282     1927.0
           ...  
35530     2021.0
35830     2021.0
35762     2021.0
35835     2021.0
35628     2021.0
Name: model_date, Length: 123086, dtype: float64
add Codeadd Markdown
data['model_date'].hist(figsize=(5,5), bins=50)
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580ddcf50>

add Codeadd Markdown
У нас достаточно сильный перекос моделей на те, которые созданы после 2000. Но те модели, которые были выпущены ранее, могут являтся колекционными и мы их должны оставить, чтобы модель могла предсказывать их стоимость

add Codeadd Markdown
num_cols.append('model_date')
add Codeadd Markdown
Model_name
add Codeadd Markdown
Много уникальных значений - 705

add Codeadd Markdown
data.model_name.value_counts()
OCTAVIA     2847
5ER         2663
FOCUS       2455
E_KLASSE    2191
PASSAT      2162
            ... 
VENTURE        1
NEMO           1
VIPER          1
AMG GT         1
I10            1
Name: model_name, Length: 1264, dtype: int64
add Codeadd Markdown
Заполним пробелы noDate, возможно в одном из признаков, которых мы удалили ранее, есть информация про модель. В дальнейшим, можно будем проверить

add Codeadd Markdown
data.model_name = data.model_name.fillna('noDate')
add Codeadd Markdown
cat_cols.append('model_name')
add Codeadd Markdown
Name
add Codeadd Markdown
Судя по данным, Name это смесь признаков, которые у нас уже есть. Поверим ещё раз и удалим, если это так. Можно было бы дозаполнить пропуски в model_name, где возможно, но это весьма долгая и кропотливая работа, в будущем стоит попробовать

add Codeadd Markdown
data.name.value_counts()
1.6 AT (110 л.с.)                         1715
2.0 AT (150 л.с.)                         1697
1.6 AT (123 л.с.)                         1292
1.6 MT (105 л.с.)                         1177
1.6 MT (110 л.с.)                          978
                                          ... 
BMW 5 серии M550d xDrive VII (G30/G31)       1
SRT-10 8.4 MT (600 л.с.)                     1
6.7d AT (350 л.с.) 4WD                       1
1.3 MT (67 л.с.)                             1
M340i xDrive 3.0 AT (387 л.с.) 4WD           1
Name: name, Length: 5371, dtype: int64
add Codeadd Markdown
data = data.drop('name',axis=1)
add Codeadd Markdown
Number_of_doors
add Codeadd Markdown
data.number_of_doors.value_counts()
5.0    69745
4.0    47374
2.0     3114
3.0     2851
0.0        2
Name: number_of_doors, dtype: int64
add Codeadd Markdown
Видим, что есть 2 машины без дверей, посмотрим в каких строках они находятся

add Codeadd Markdown
data.number_of_doors.sort_values()
121800    0.0
16944     0.0
40065     2.0
13629     2.0
9302      2.0
         ... 
53536     5.0
53535     5.0
53534     5.0
53532     5.0
123086    5.0
Name: number_of_doors, Length: 123086, dtype: float64
add Codeadd Markdown
data.iloc[16944]
body_type                  кабриолет
brand                       MERCEDES
color                          white
engine_displacement              5.3
engine_power                      32
fuel_type                     бензин
mileage                        48000
model_date                      1904
model_name                   SIMPLEX
number_of_doors                    0
production_date                 1904
vehicle_transmission    механическая
owners                    1 владелец
licence                     Оригинал
type_of_drive                 задний
steering_wheel                Правый
сustoms                   Растаможен
sample                             0
price                              0
description_len                  785
real_photo                      True
Name: 16944, dtype: object
add Codeadd Markdown
data.iloc[121800]
body_type                 родстер
brand                    MERCEDES
color                       white
engine_displacement             2
engine_power                  388
fuel_type                  бензин
mileage                     56000
model_date                   2008
model_name              SL_KLASSE
number_of_doors                 2
production_date              2008
vehicle_transmission    AUTOMATIC
owners                          2
licence                  ORIGINAL
type_of_drive              задний
steering_wheel               LEFT
сustoms                      True
sample                          1
price                     2.2e+06
description_len               491
real_photo                  False
Name: 121801, dtype: object
add Codeadd Markdown
У данных модели действительно нет дверей

add Codeadd Markdown
cat_cols.append('number_of_doors')
add Codeadd Markdown
Production_date
add Codeadd Markdown
Нет пустых значений, уникальных значений 81. Сильная корреляция с Model_date. В дальнейшим можем рассмотерть данные признаки для создания новых

add Codeadd Markdown
data.production_date.value_counts()
2020    11453
2008     9633
2012     9448
2011     8787
2013     8122
        ...  
1955        1
1924        1
1954        1
1923        1
1951        1
Name: production_date, Length: 81, dtype: int64
add Codeadd Markdown
data['production_date'].hist(figsize=(5,5), bins=50)
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580e3b250>

add Codeadd Markdown
Тоже самое, что и с model_date, сильный перекос машин в сторону произведённых после 2000. Но те машины, которые были выпущены ранее, могут являтся колекционными и мы их должны оставить, чтобы модель могла предсказывать их стоимость

add Codeadd Markdown
num_cols.append('production_date')
add Codeadd Markdown
Vehicle_transmission
add Codeadd Markdown
data.vehicle_transmission.value_counts()
AUTOMATIC           47774
MECHANICAL          24971
автоматическая      20476
ROBOT                7517
механическая         7390
VARIATOR             6591
вариатор             4265
роботизированная     4102
Name: vehicle_transmission, dtype: int64
add Codeadd Markdown
change_transmission = {
               'автоматическая': 'AUTOMATIC',
               'механическая': 'MECHANICAL',
               'вариатор': 'VARIATOR',
               'роботизированная': 'ROBOT'
                }
data = data.replace({'vehicle_transmission': change_transmission})
add Codeadd Markdown
data.vehicle_transmission.value_counts()
AUTOMATIC     68250
MECHANICAL    32361
ROBOT         11619
VARIATOR      10856
Name: vehicle_transmission, dtype: int64
add Codeadd Markdown
cat_cols.append('vehicle_transmission')
add Codeadd Markdown
Owners
add Codeadd Markdown
data['owners'].value_counts()
3.0            35861
2.0            20763
1.0            18231
3 или более    16415
1 владелец      9459
2 владельца     9270
1 владелец       507
2 владельца      349
Name: owners, dtype: int64
add Codeadd Markdown
data['owners'].isnull().sum()
12231
add Codeadd Markdown
# Посмотрим количество владельцов относительно года выпуск
data[data.owners.isnull()== True].production_date.value_counts()
2020    10856
2019     1064
2021      228
2018       82
2017        1
Name: production_date, dtype: int64
add Codeadd Markdown
Скорее всего так как они достаточно новые, это может быть либо 1 владелец, либо вообще ноль. Заменим на ноль, чтобы всё-таки иметь отдельную категорию тех машин, у которых не было ещё владельцев

add Codeadd Markdown
data.owners = data.owners.fillna('0')
add Codeadd Markdown
data['owners'].unique()
array(['3 или более', '1\xa0владелец', '2\xa0владельца', '0',
       '1 владелец', '2 владельца', 3.0, 1.0, 2.0], dtype=object)
add Codeadd Markdown
# Создаем словарь с кодировкой значений в числовые
owners_dict = {"3 или более": 3, "1\xa0владелец": 1, "1 владелец": 1, "2\xa0владельца": 2, "2 владельца": 2}
data['owners'].replace(to_replace=owners_dict, inplace=True)  # заменяем значения в соответствии со словарем
add Codeadd Markdown
# Преобразуем owners в int
data['owners'] = data['owners'].astype('int64')
add Codeadd Markdown
data['owners'].value_counts()
3    52276
2    30382
1    28197
0    12231
Name: owners, dtype: int64
add Codeadd Markdown
cat_cols.append('owners')
add Codeadd Markdown
Licence
add Codeadd Markdown
Всего 4 уникальных значения и 591 пропуск

add Codeadd Markdown
data.licence.value_counts()
ORIGINAL     76189
Оригинал     31270
DUPLICATE    10307
Дубликат      4729
Name: licence, dtype: int64
add Codeadd Markdown
change_passport = {
               'Оригинал': 'ORIGINAL',
               'Дубликат': 'DUPLICATE'
                }
data = data.replace({'licence': change_passport})
​
add Codeadd Markdown
data.licence.isnull().sum()
591
add Codeadd Markdown
data.licence = data.licence.fillna('ORIGINAL')# заполним пропуск наиболее частым значением
add Codeadd Markdown
# Преобразуем значения в колонке licence
data['licence'] = data['licence'].apply(lambda x: 1 if x == 'ORIGINAL' else 0).astype('int8')
add Codeadd Markdown
#определяем в бинарные признаки
bin_cols.append('licence')
add Codeadd Markdown
Type_of_drive
add Codeadd Markdown
3 уникальных значения, 234 пропуска

add Codeadd Markdown
data.type_of_drive.value_counts()
передний    62331
полный      49406
задний      11116
Name: type_of_drive, dtype: int64
add Codeadd Markdown
data.type_of_drive = data.type_of_drive.fillna('передний')# заполним пропуск наиболее частым значением, но можно будет посмотреть удаленные признаки, возможно там бдет эта информация
add Codeadd Markdown
#определяем его в "категориальные"
cat_cols.append('type_of_drive')
add Codeadd Markdown
Steering_wheel
add Codeadd Markdown
4 уникальных значения, 233 пропуска

add Codeadd Markdown
data.steering_wheel.value_counts()
LEFT      85077
Левый     34554
RIGHT      1776
Правый     1446
Name: steering_wheel, dtype: int64
add Codeadd Markdown
change_wheel = {
               'Левый': 'LEFT',
               'Правый': 'RIGHT'
                }
data = data.replace({'steering_wheel': change_wheel})
add Codeadd Markdown
data.steering_wheel = data.steering_wheel.fillna('LEFT')# заполним пропуск наиболее частым значением
add Codeadd Markdown
# Преобразуем значения в колонке
data['steering_wheel'] = data['steering_wheel'].apply(lambda x: 1 if x == 'LEFT' else 0).astype('int8')
add Codeadd Markdown
data.steering_wheel.value_counts()
1    119864
0      3222
Name: steering_wheel, dtype: int64
add Codeadd Markdown
#определяем в бинарные признаки
bin_cols.append('steering_wheel')
add Codeadd Markdown
Customs
add Codeadd Markdown
data.сustoms.value_counts()
True          86853
Растаможен    35998
Name: сustoms, dtype: int64
add Codeadd Markdown
data.сustoms.isnull().sum()
235
add Codeadd Markdown
Так как значение всего одно, можем удалить признак

add Codeadd Markdown
data = data.drop('сustoms',axis=1)
add Codeadd Markdown
Feature Engineering
add Codeadd Markdown
#создадим новые признаки на основе существующих: количество лет от производства и возраст модели
data['car_age'] = 2021 - data.production_date
data['model_age'] = 2021 - data.model_date
add Codeadd Markdown
#определим эти признаки в числовые
num_cols.append('car_age')
num_cols.append('model_age')
add Codeadd Markdown
EDA
add Codeadd Markdown
sn.set(font_scale=1)
plt.subplots(figsize=(10, 10))
sn.heatmap(data.corr(), square=True,
              annot=True, fmt=".1f", linewidths=0.1, cmap="RdBu")
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580e13e10>

add Codeadd Markdown
# Посмотрим матрицу коэффициента корреляции численных признаков
sn.set(font_scale = 1)
fig, axis = plt.subplots(figsize=(7,7))
sn.heatmap(data[num_cols].corr().abs(), vmin=0, vmax=1, square=True,
           annot=True, fmt=".2f", linewidths=0.1)
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580e506d0>

add Codeadd Markdown
Помимо очевидной кореляции между production_date, model_date,car_age и model_age. Также с данными показателями скорелирован mileage

add Codeadd Markdown
Посмотрим распределение целевой переменной числовых признаков

add Codeadd Markdown
imp_num = pd.Series(f_classif(data[num_cols], data['price'])[0], index = num_cols)
imp_num.sort_values(inplace = True)
imp_num.plot(kind = 'barh')
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580e51150>

add Codeadd Markdown
description_len самый значимый признак из числовых, model_age самый важный из 4 скореллированных признаков, удалим 3 других

add Codeadd Markdown
num_cols.remove('car_age')
num_cols.remove('production_date')
num_cols.remove('model_date')
add Codeadd Markdown
data = data.drop('production_date',axis=1)
data = data.drop('car_age',axis=1)
data = data.drop('model_date',axis=1)
add Codeadd Markdown
data.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 123086 entries, 0 to 123086
Data columns (total 19 columns):
 #   Column                Non-Null Count   Dtype  
---  ------                --------------   -----  
 0   body_type             123086 non-null  object 
 1   brand                 123086 non-null  object 
 2   color                 123086 non-null  object 
 3   engine_displacement   123086 non-null  float64
 4   engine_power          123086 non-null  int64  
 5   fuel_type             123086 non-null  object 
 6   mileage               123086 non-null  int64  
 7   model_name            123086 non-null  object 
 8   number_of_doors       123086 non-null  float64
 9   vehicle_transmission  123086 non-null  object 
 10  owners                123086 non-null  int64  
 11  licence               123086 non-null  int8   
 12  type_of_drive         123086 non-null  object 
 13  steering_wheel        123086 non-null  int8   
 14  sample                123086 non-null  int64  
 15  price                 123086 non-null  float64
 16  description_len       123086 non-null  int64  
 17  real_photo            123086 non-null  bool   
 18  model_age             123086 non-null  float64
dtypes: bool(1), float64(4), int64(5), int8(2), object(7)
memory usage: 16.3+ MB
add Codeadd Markdown
bin_cols
['real_photo', 'licence', 'steering_wheel']
add Codeadd Markdown
cat_cols
['body_type',
 'brand',
 'color',
 'fuel_type',
 'model_name',
 'number_of_doors',
 'vehicle_transmission',
 'owners',
 'type_of_drive']
add Codeadd Markdown
num_cols
['description_len',
 'engine_displacement',
 'engine_power',
 'mileage',
 'model_age']
add Codeadd Markdown
# трансформируем бинарные признаки
​
label_encoder = LabelEncoder()
​
for column in bin_cols:
    data[column] = label_encoder.fit_transform(data[column])
    
data.sample(10)
body_type	brand	color	engine_displacement	engine_power	fuel_type	mileage	model_name	number_of_doors	vehicle_transmission	owners	licence	type_of_drive	steering_wheel	sample	price	description_len	real_photo	model_age
52393	седан	CITROEN	black	1.6	120	бензин	86698	C4	4.0	AUTOMATIC	1	1	передний	1	1	465000.0	216	0	11.0
84328	внедорожник	NISSAN	silver	2.0	141	бензин	202000	QASHQAI	5.0	VARIATOR	1	1	передний	1	1	740000.0	215	0	11.0
35092	седан	VOLVO	brown	2.0	190	бензин	12884	S90	4.0	AUTOMATIC	1	1	передний	1	1	3655000.0	2412	1	1.0
31933	внедорожник	MERCEDES	white	3.5	272	бензин	174500	M_KLASSE	5.0	AUTOMATIC	3	1	полный	1	0	0.0	122	1	13.0
95299	лифтбек	SKODA	blue	1.4	140	бензин	193000	OCTAVIA	5.0	ROBOT	1	1	передний	1	1	630000.0	738	0	8.0
106627	седан	VOLKSWAGEN	black	2.0	200	бензин	183000	PASSAT	4.0	AUTOMATIC	3	1	передний	1	1	700000.0	59	0	16.0
51195	внедорожник	CHEVROLET	silver	1.7	80	бензин	145685	NIVA	5.0	MECHANICAL	2	1	полный	1	1	150000.0	1	0	19.0
90782	седан	PEUGEOT	black	1.6	110	бензин	108000	408	4.0	MECHANICAL	2	1	передний	1	1	380000.0	148	0	9.0
67363	внедорожник	JAGUAR	grey	2.0	249	бензин	0	F_PACE	5.0	AUTOMATIC	0	1	полный	1	1	4816500.0	1482	0	5.0
93080	седан	RENAULT	grey	1.4	75	бензин	136826	LOGAN	4.0	MECHANICAL	2	1	передний	1	1	279000.0	2048	0	17.0
add Codeadd Markdown
imp_bin = pd.Series(f_classif(data[bin_cols], data['price'])[0], index = bin_cols)
imp_bin.sort_values(inplace = True)
imp_bin.plot(kind = 'barh')
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580ea0110>

add Codeadd Markdown
Наличие фотографий действительно сильно взаимосвязан с ценой

add Codeadd Markdown
# Посмотрим матрицу коэффициента корреляции бинарных признаков
sn.set(font_scale = 1)
fig, axis = plt.subplots(figsize=(7,7))
sn.heatmap(data[bin_cols].corr().abs(), vmin=0, vmax=1, square=True,
           annot=True, fmt=".2f", linewidths=0.1)
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580e98b50>

add Codeadd Markdown
Признаки не скореллированы

add Codeadd Markdown
for colum in cat_cols:
    data[colum] = data[colum].astype('category').cat.codes
add Codeadd Markdown
imp_cat = pd.Series(f_classif(data[cat_cols], data['price'])[0], index = cat_cols)
imp_cat.sort_values(inplace = True)
imp_cat.plot(kind = 'barh')
<matplotlib.axes._subplots.AxesSubplot at 0x7f4580efef10>

add Codeadd Markdown
Количество владельце самый значимый признак из категориальных

add Codeadd Markdown
Label Encoding
add Codeadd Markdown
data
body_type	brand	color	engine_displacement	engine_power	fuel_type	mileage	model_name	number_of_doors	vehicle_transmission	owners	licence	type_of_drive	steering_wheel	sample	price	description_len	real_photo	model_age
0	6	29	2	1.2	105	0	74000	781	4	2	3	1	1	1	0	0.0	1001	1	8.0
1	6	29	1	1.6	110	0	60563	781	4	1	1	1	1	1	0	0.0	2609	1	4.0
2	6	29	6	1.8	152	0	88000	1044	4	2	1	1	1	1	0	0.0	1001	1	8.0
3	6	29	3	1.6	110	0	95000	781	4	0	1	1	1	1	0	0.0	1676	1	8.0
4	6	29	14	1.8	152	0	58536	781	4	0	1	1	1	1	0	0.0	2365	1	13.0
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
123082	8	30	1	2.7	163	3	260000	921	4	0	3	1	2	1	1	450000.0	197	0	17.0
123083	8	30	12	2.7	163	3	300000	921	4	0	3	1	2	1	1	485000.0	522	0	17.0
123084	8	30	1	2.0	149	3	126000	1034	4	0	1	1	2	1	1	1090000.0	201	0	8.0
123085	8	30	6	2.0	149	3	84000	1034	4	0	3	1	2	1	1	1180000.0	1682	0	8.0
123086	8	30	14	2.0	149	3	144000	1034	4	0	2	1	2	1	1	1075000.0	332	0	8.0
123086 rows × 19 columns

add Codeadd Markdown
# Преобразуем категориальные признаки
data = pd.get_dummies(data, columns=cat_cols)
add Codeadd Markdown
# выполним стандартизацию численных переменных
#data[num_cols] = pd.DataFrame(StandardScaler().fit_transform(data[num_cols]), columns=num_cols)
add Codeadd Markdown
Результаты от стандартизации хуже

add Codeadd Markdown
data
engine_displacement	engine_power	mileage	licence	steering_wheel	sample	price	description_len	real_photo	model_age	...	vehicle_transmission_1	vehicle_transmission_2	vehicle_transmission_3	owners_0	owners_1	owners_2	owners_3	type_of_drive_0	type_of_drive_1	type_of_drive_2
0	1.2	105	74000	1	1	0	0.0	1001	1	8.0	...	0	1	0	0	0	0	1	0	1	0
1	1.6	110	60563	1	1	0	0.0	2609	1	4.0	...	1	0	0	0	1	0	0	0	1	0
2	1.8	152	88000	1	1	0	0.0	1001	1	8.0	...	0	1	0	0	1	0	0	0	1	0
3	1.6	110	95000	1	1	0	0.0	1676	1	8.0	...	0	0	0	0	1	0	0	0	1	0
4	1.8	152	58536	1	1	0	0.0	2365	1	13.0	...	0	0	0	0	1	0	0	0	1	0
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
123082	2.7	163	260000	1	1	1	450000.0	197	0	17.0	...	0	0	0	0	0	0	1	0	0	1
123083	2.7	163	300000	1	1	1	485000.0	522	0	17.0	...	0	0	0	0	0	0	1	0	0	1
123084	2.0	149	126000	1	1	1	1090000.0	201	0	8.0	...	0	0	0	0	1	0	0	0	0	1
123085	2.0	149	84000	1	1	1	1180000.0	1682	0	8.0	...	0	0	0	0	0	0	1	0	0	1
123086	2.0	149	144000	1	1	1	1075000.0	332	0	8.0	...	0	0	0	0	0	1	0	0	0	1
123086 rows × 1366 columns

add Codeadd Markdown
data.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 123086 entries, 0 to 123086
Columns: 1366 entries, engine_displacement to type_of_drive_2
dtypes: float64(3), int64(7), uint8(1356)
memory usage: 169.5 MB
add Codeadd Markdown
Train Split
add Codeadd Markdown
train_data = data.query('sample == 1').drop(['sample'], axis=1)
test_data = data.query('sample == 0').drop(['sample','price'], axis=1)
X = train_data.drop(['price'], axis=1)
y = train_data['price']
y = y/1.3 #согласно автостату цены увеличились на 30%, значит уменьшим нашу целевую переменную
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=VAL_SIZE, shuffle=True, random_state=RANDOM_SEED)
add Codeadd Markdown
Model 1: Создадим "наивную" модель
Эта модель будет предсказывать среднюю цену по модели двигателя (engineDisplacement). C ней будем сравнивать другие модели.

add Codeadd Markdown
tmp_train = X_train.copy()
tmp_train['price'] = y_train
​
add Codeadd Markdown
# Находим median по экземплярам engineDisplacement в трейне и размечаем тест
predict = X_test['engine_displacement'].map(tmp_train.groupby('engine_displacement')['price'].median())
​
#оцениваем точность
print(f"Точность наивной модели по метрике MAPE: {(mape(y_test, predict.values))*100:0.2f}%")
Точность наивной модели по метрике MAPE: 91.89%
add Codeadd Markdown
Model 2 : CatBoost
Image

add Codeadd Markdown
Fit
add Codeadd Markdown
model = CatBoostRegressor(iterations = 5000,
                          random_seed = RANDOM_SEED,
                          eval_metric='MAPE',
                          custom_metric=['R2', 'MAE'],
                          silent=True,
                         )
model.fit(X_train, y_train,
         #cat_features=cat_features_ids,
         eval_set=(X_test, y_test),
         verbose_eval=0,
         use_best_model=True,
         #plot=True
         )
​
model.save_model('catboost_single_model_baseline.model')
add Codeadd Markdown
# оцениваем точность
predict = model.predict(X_test)
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict))*100:0.2f}%")
Точность модели по метрике MAPE: 17.36%
add Codeadd Markdown
# попробуем подобрать параметры 
cb = CatBoostRegressor(iterations = 20000,
                       learning_rate = 0.15,
                       depth = 9,
                       random_seed = RANDOM_SEED,
                       eval_metric = 'MAPE',
                       custom_metric = ['R2', 'MAE'],
                       silent=True
                       )
cb.fit(X_train, y_train,
         eval_set = (X_test, y_test),
         verbose_eval = 0,
         use_best_model = True
         )
​
cb.save_model('catboost_single_model_baseline.cb')
predict = cb.predict(X_test)
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict))*100:0.2f}%")
Точность модели по метрике MAPE: 14.93%
add Codeadd Markdown
Log Traget
Попробуем взять таргет в логорифм - это позволит уменьшить влияние выбросов на обучение модели (используем для этого np.log и np.exp).

add Codeadd Markdown
model_log = CatBoostRegressor(iterations = 5000,
                          random_seed = RANDOM_SEED,
                          eval_metric='MAPE',
                          custom_metric=['R2', 'MAE'],
                          silent=True,
                         )
model_log.fit(X_train, np.log(y_train),
         eval_set=(X_test, np.log(y_test)),
         verbose_eval=0,
         use_best_model=True,
         )
​
model_log.save_model('catboost_single_model_2_baseline.model')
predict_test = np.exp(model_log.predict(X_test))
predict_submission = np.exp(model_log.predict(test_data))
VERSION = 4
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict_test)) * 100:0.2f}%")
Точность модели по метрике MAPE: 13.78%
add Codeadd Markdown
GradientBoosting
add Codeadd Markdown
from sklearn.ensemble import GradientBoostingRegressor
gb = GradientBoostingRegressor(min_samples_split = 2,
                               learning_rate = 0.03,
                               max_depth = 10,
                               n_estimators = 1000)
gb.fit(X_train, y_train)
predict = gb.predict(X_test)
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict))*100:0.2f}%")
Точность модели по метрике MAPE: 15.44%
add Codeadd Markdown
Random Forest
add Codeadd Markdown
rf = RandomForestRegressor(random_state = RANDOM_SEED, n_jobs = -1, verbose = 1)
rf = RandomForestRegressor(random_state = RANDOM_SEED, n_jobs = -1, verbose = 1).fit(X_train, np.log(y_train+1))
predict_submission = np.exp(rf.predict(test_data))
VERSION = 5
print(f"Точность модели по метрике MAPE: {(mape(y_test, np.exp(rf.predict(X_test)))) * 100:0.2f}%")
[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:   58.7s
[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:  2.2min finished
[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.2s
[Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed:    0.5s finished
[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.2s
[Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed:    0.4s finished
Точность модели по метрике MAPE: 13.79%
add Codeadd Markdown
xgboost
add Codeadd Markdown
np.exp(xgb_reg.predict(X_test)
xgb_reg = xgb.XGBRegressor(objective='reg:squarederror',
                           colsample_bytree=0.5,
                           learning_rate=0.05,
                           max_depth=12,
                           alpha=1,
                           n_estimators=1000)
xgb_reg.fit(X_train, np.log(y_train))
print(f"Точность модели по метрике MAPE с логтаргетом: {(mape(y_test, np.exp(xgb_reg.predict(X_test))))*100:0.2f}%")
Точность модели по метрике MAPE с логтаргетом: 13.10%
add Codeadd Markdown
Лучшие показатели у xgboost 13,10, на втором месте CatBoost с логарифмом 13.78 RandomForest 13,79

add Codeadd Markdown
Stacking
add Codeadd Markdown
Cтекинг на базе GradientBoostingRegressor c CatBoostingRegressor и XGBRegressor.

add Codeadd Markdown
from sklearn.ensemble import StackingRegressor

estimators = [('xgb_reg', xgb.XGBRegressor(objective='reg:squarederror',
                           colsample_bytree=0.5,
                           learning_rate=0.05,
                           max_depth=12,
                           alpha=1,
                           n_estimators=1000)),
              ('model', CatBoostRegressor(iterations = 5000,
                          random_seed = RANDOM_SEED,
                          eval_metric='MAPE',
                          custom_metric=['R2', 'MAE'],
                          silent=True))]

st_ensemble = StackingRegressor(estimators=estimators,
                                final_estimator=GradientBoostingRegressor(
                                min_samples_split=2,
                                learning_rate=0.03,
                                max_depth=10,
                                n_estimators=1000))


st_ensemble.fit(X_train, np.log(y_train))

predict_ensemble = np.exp(st_ensemble.predict(X_test))
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict_ensemble))*100:0.2f}%")
from sklearn.ensemble import StackingRegressor
​
estimators = [('xgb_reg', xgb.XGBRegressor(objective='reg:squarederror',
                           colsample_bytree=0.5,
                           learning_rate=0.05,
                           max_depth=12,
                           alpha=1,
                           n_estimators=1000)),
              ('model', CatBoostRegressor(iterations = 5000,
                          random_seed = RANDOM_SEED,
                          eval_metric='MAPE',
                          custom_metric=['R2', 'MAE'],
                          silent=True))]
​
st_ensemble = StackingRegressor(estimators=estimators,
                                final_estimator=GradientBoostingRegressor(
                                min_samples_split=2,
                                learning_rate=0.03,
                                max_depth=10,
                                n_estimators=1000))
​
​
st_ensemble.fit(X_train, np.log(y_train))
​
predict_ensemble = np.exp(st_ensemble.predict(X_test))
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict_ensemble))*100:0.2f}%")
​
Точность модели по метрике MAPE: 13.72%
add Codeadd Markdown
Cтекинг на базе RandomForestRegressor c CatBoostingRegressor и XGBRegressor.

add Codeadd Markdown
RandomForestRegressor
from sklearn.ensemble import StackingRegressor
​
estimators = [('xgb_reg', xgb.XGBRegressor(objective='reg:squarederror',
                           colsample_bytree=0.5,
                           learning_rate=0.05,
                           max_depth=12,
                           alpha=1,
                           n_estimators=1000)),
              ('model', CatBoostRegressor(iterations = 5000,
                          random_seed = RANDOM_SEED,
                          eval_metric='MAPE',
                          custom_metric=['R2', 'MAE'],
                          silent=True))]
​
st_ensemble_2 = StackingRegressor(estimators=estimators,
                                final_estimator=RandomForestRegressor(
                                random_state = RANDOM_SEED,
                                n_jobs = -1,
                                verbose = 1))
​
​
st_ensemble_2.fit(X_train, np.log(y_train))
​
predict_ensemble_2 = np.exp(st_ensemble_2.predict(X_test))
print(f"Точность модели по метрике MAPE: {(mape(y_test, predict_ensemble_2))*100:0.2f}%")
[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:    4.3s
[Parallel(n_jobs=-1)]: Done 100 out of 100 | elapsed:    9.8s finished
[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.1s
Точность модели по метрике MAPE: 14.65%
[Parallel(n_jobs=4)]: Done 100 out of 100 | elapsed:    0.3s finished
add Codeadd Markdown
Как мы видим, несмторя на стекинг данных с использованием моделей с минимальными показателями, лучшей моделью является xgboost с результатом 13.10%

add Codeadd Markdown
predict_submission = np.exp(xgb_reg.predict(test_data))
add Codeadd Markdown
Submission
add Codeadd Markdown
sample_submission['price'] = predict_submission
sample_submission.to_csv(f'submission_2_v3.csv', index=False)
sample_submission.head(10)
sell_id	price
0	1100575026	5.951086e+05
1	1100549428	9.145642e+05
2	1100658222	8.772886e+05
3	1100937408	6.942426e+05
4	1101037972	7.158835e+05
5	1100912634	7.162379e+05
6	1101228730	6.373706e+05
7	1100165896	3.811038e+05
8	1100768262	1.467265e+06
9	1101218501	7.580391e+05
add Codeadd Markdown
What's next?
Или что еще можно сделать, чтоб улучшить результат:

Спарсить свежие данные
Посмотреть, что можно извлечь из признаков или как еще можно обработать признаки
Сгенерировать новые признаки
Попробовать подобрать параметры модели
Попробовать другие алгоритмы и библиотеки ML
add Codeadd Markdown
Подробный чек лист: https://docs.google.com/spreadsheets/d/1I_ErM3U0Cs7Rs1obyZbIEGtVn-H47pHNCi4xdDgUmXY/edit?usp=sharing
